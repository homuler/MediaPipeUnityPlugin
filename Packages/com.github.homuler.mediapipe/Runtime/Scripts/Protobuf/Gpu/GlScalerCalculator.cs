// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/gpu/gl_scaler_calculator.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/gpu/gl_scaler_calculator.proto</summary>
  public static partial class GlScalerCalculatorReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/gpu/gl_scaler_calculator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GlScalerCalculatorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CihtZWRpYXBpcGUvZ3B1L2dsX3NjYWxlcl9jYWxjdWxhdG9yLnByb3RvEglt",
            "ZWRpYXBpcGUaJG1lZGlhcGlwZS9mcmFtZXdvcmsvY2FsY3VsYXRvci5wcm90",
            "bxoebWVkaWFwaXBlL2dwdS9zY2FsZV9tb2RlLnByb3RvIoUDChlHbFNjYWxl",
            "ckNhbGN1bGF0b3JPcHRpb25zEhQKDG91dHB1dF93aWR0aBgBIAEoBRIVCg1v",
            "dXRwdXRfaGVpZ2h0GAIgASgFEhcKDG91dHB1dF9zY2FsZRgHIAEoAjoBMRIQ",
            "Cghyb3RhdGlvbhgDIAEoBRIVCg1mbGlwX3ZlcnRpY2FsGAQgASgIEhcKD2Zs",
            "aXBfaG9yaXpvbnRhbBgFIAEoCBItCgpzY2FsZV9tb2RlGAYgASgOMhkubWVk",
            "aWFwaXBlLlNjYWxlTW9kZS5Nb2RlEjEKInVzZV9uZWFyZXN0X25laWdoYm9y",
            "X2ludGVycG9sYXRpb24YCCABKAg6BWZhbHNlEioKG3VzZV9pbnB1dF9mb3Jt",
            "YXRfZm9yX291dHB1dBgJIAEoCDoFZmFsc2UyUgoDZXh0EhwubWVkaWFwaXBl",
            "LkNhbGN1bGF0b3JPcHRpb25zGJbNqk8gASgLMiQubWVkaWFwaXBlLkdsU2Nh",
            "bGVyQ2FsY3VsYXRvck9wdGlvbnM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mediapipe.CalculatorReflection.Descriptor, global::Mediapipe.ScaleModeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.GlScalerCalculatorOptions), global::Mediapipe.GlScalerCalculatorOptions.Parser, new[]{ "OutputWidth", "OutputHeight", "OutputScale", "Rotation", "FlipVertical", "FlipHorizontal", "ScaleMode", "UseNearestNeighborInterpolation", "UseInputFormatForOutput" }, null, null, new pb::Extension[] { global::Mediapipe.GlScalerCalculatorOptions.Extensions.Ext }, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Next id: 10.
  /// </summary>
  public sealed partial class GlScalerCalculatorOptions : pb::IMessage<GlScalerCalculatorOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<GlScalerCalculatorOptions> _parser = new pb::MessageParser<GlScalerCalculatorOptions>(() => new GlScalerCalculatorOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<GlScalerCalculatorOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.GlScalerCalculatorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GlScalerCalculatorOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GlScalerCalculatorOptions(GlScalerCalculatorOptions other) : this() {
      _hasBits0 = other._hasBits0;
      outputWidth_ = other.outputWidth_;
      outputHeight_ = other.outputHeight_;
      outputScale_ = other.outputScale_;
      rotation_ = other.rotation_;
      flipVertical_ = other.flipVertical_;
      flipHorizontal_ = other.flipHorizontal_;
      scaleMode_ = other.scaleMode_;
      useNearestNeighborInterpolation_ = other.useNearestNeighborInterpolation_;
      useInputFormatForOutput_ = other.useInputFormatForOutput_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public GlScalerCalculatorOptions Clone() {
      return new GlScalerCalculatorOptions(this);
    }

    /// <summary>Field number for the "output_width" field.</summary>
    public const int OutputWidthFieldNumber = 1;
    private readonly static int OutputWidthDefaultValue = 0;

    private int outputWidth_;
    /// <summary>
    /// Output dimensions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OutputWidth {
      get { if ((_hasBits0 & 1) != 0) { return outputWidth_; } else { return OutputWidthDefaultValue; } }
      set {
        _hasBits0 |= 1;
        outputWidth_ = value;
      }
    }
    /// <summary>Gets whether the "output_width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOutputWidth {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "output_width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOutputWidth() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "output_height" field.</summary>
    public const int OutputHeightFieldNumber = 2;
    private readonly static int OutputHeightDefaultValue = 0;

    private int outputHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OutputHeight {
      get { if ((_hasBits0 & 2) != 0) { return outputHeight_; } else { return OutputHeightDefaultValue; } }
      set {
        _hasBits0 |= 2;
        outputHeight_ = value;
      }
    }
    /// <summary>Gets whether the "output_height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOutputHeight {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "output_height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOutputHeight() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "output_scale" field.</summary>
    public const int OutputScaleFieldNumber = 7;
    private readonly static float OutputScaleDefaultValue = 1F;

    private float outputScale_;
    /// <summary>
    /// A scale factor for output size, while keeping aspect ratio. It has lower
    /// priority than the above two fields. That is, it is effective only when the
    /// above two fields are unset.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float OutputScale {
      get { if ((_hasBits0 & 64) != 0) { return outputScale_; } else { return OutputScaleDefaultValue; } }
      set {
        _hasBits0 |= 64;
        outputScale_ = value;
      }
    }
    /// <summary>Gets whether the "output_scale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOutputScale {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "output_scale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOutputScale() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private readonly static int RotationDefaultValue = 0;

    private int rotation_;
    /// <summary>
    /// Counterclockwise rotation in degrees. Must be a multiple of 90.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Rotation {
      get { if ((_hasBits0 & 4) != 0) { return rotation_; } else { return RotationDefaultValue; } }
      set {
        _hasBits0 |= 4;
        rotation_ = value;
      }
    }
    /// <summary>Gets whether the "rotation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRotation {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "rotation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRotation() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "flip_vertical" field.</summary>
    public const int FlipVerticalFieldNumber = 4;
    private readonly static bool FlipVerticalDefaultValue = false;

    private bool flipVertical_;
    /// <summary>
    /// Flip the output texture vertically. This is applied after rotation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FlipVertical {
      get { if ((_hasBits0 & 8) != 0) { return flipVertical_; } else { return FlipVerticalDefaultValue; } }
      set {
        _hasBits0 |= 8;
        flipVertical_ = value;
      }
    }
    /// <summary>Gets whether the "flip_vertical" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlipVertical {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "flip_vertical" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlipVertical() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "flip_horizontal" field.</summary>
    public const int FlipHorizontalFieldNumber = 5;
    private readonly static bool FlipHorizontalDefaultValue = false;

    private bool flipHorizontal_;
    /// <summary>
    /// Flip the output texture horizontally. This is applied after rotation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FlipHorizontal {
      get { if ((_hasBits0 & 16) != 0) { return flipHorizontal_; } else { return FlipHorizontalDefaultValue; } }
      set {
        _hasBits0 |= 16;
        flipHorizontal_ = value;
      }
    }
    /// <summary>Gets whether the "flip_horizontal" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlipHorizontal {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "flip_horizontal" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlipHorizontal() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "scale_mode" field.</summary>
    public const int ScaleModeFieldNumber = 6;
    private readonly static global::Mediapipe.ScaleMode.Types.Mode ScaleModeDefaultValue = global::Mediapipe.ScaleMode.Types.Mode.Default;

    private global::Mediapipe.ScaleMode.Types.Mode scaleMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.ScaleMode.Types.Mode ScaleMode {
      get { if ((_hasBits0 & 32) != 0) { return scaleMode_; } else { return ScaleModeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        scaleMode_ = value;
      }
    }
    /// <summary>Gets whether the "scale_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaleMode {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "scale_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaleMode() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "use_nearest_neighbor_interpolation" field.</summary>
    public const int UseNearestNeighborInterpolationFieldNumber = 8;
    private readonly static bool UseNearestNeighborInterpolationDefaultValue = false;

    private bool useNearestNeighborInterpolation_;
    /// <summary>
    /// Whether to use nearest neighbor interpolation. Default to use linear
    /// interpolation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UseNearestNeighborInterpolation {
      get { if ((_hasBits0 & 128) != 0) { return useNearestNeighborInterpolation_; } else { return UseNearestNeighborInterpolationDefaultValue; } }
      set {
        _hasBits0 |= 128;
        useNearestNeighborInterpolation_ = value;
      }
    }
    /// <summary>Gets whether the "use_nearest_neighbor_interpolation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUseNearestNeighborInterpolation {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "use_nearest_neighbor_interpolation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUseNearestNeighborInterpolation() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "use_input_format_for_output" field.</summary>
    public const int UseInputFormatForOutputFieldNumber = 9;
    private readonly static bool UseInputFormatForOutputDefaultValue = false;

    private bool useInputFormatForOutput_;
    /// <summary>
    /// Whether the output format should match the input format. If true, it is
    /// your responsibility to ensure the output format is valid to render to given
    /// the current OpenGL configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UseInputFormatForOutput {
      get { if ((_hasBits0 & 256) != 0) { return useInputFormatForOutput_; } else { return UseInputFormatForOutputDefaultValue; } }
      set {
        _hasBits0 |= 256;
        useInputFormatForOutput_ = value;
      }
    }
    /// <summary>Gets whether the "use_input_format_for_output" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUseInputFormatForOutput {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "use_input_format_for_output" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUseInputFormatForOutput() {
      _hasBits0 &= ~256;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as GlScalerCalculatorOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(GlScalerCalculatorOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OutputWidth != other.OutputWidth) return false;
      if (OutputHeight != other.OutputHeight) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(OutputScale, other.OutputScale)) return false;
      if (Rotation != other.Rotation) return false;
      if (FlipVertical != other.FlipVertical) return false;
      if (FlipHorizontal != other.FlipHorizontal) return false;
      if (ScaleMode != other.ScaleMode) return false;
      if (UseNearestNeighborInterpolation != other.UseNearestNeighborInterpolation) return false;
      if (UseInputFormatForOutput != other.UseInputFormatForOutput) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOutputWidth) hash ^= OutputWidth.GetHashCode();
      if (HasOutputHeight) hash ^= OutputHeight.GetHashCode();
      if (HasOutputScale) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(OutputScale);
      if (HasRotation) hash ^= Rotation.GetHashCode();
      if (HasFlipVertical) hash ^= FlipVertical.GetHashCode();
      if (HasFlipHorizontal) hash ^= FlipHorizontal.GetHashCode();
      if (HasScaleMode) hash ^= ScaleMode.GetHashCode();
      if (HasUseNearestNeighborInterpolation) hash ^= UseNearestNeighborInterpolation.GetHashCode();
      if (HasUseInputFormatForOutput) hash ^= UseInputFormatForOutput.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOutputWidth) {
        output.WriteRawTag(8);
        output.WriteInt32(OutputWidth);
      }
      if (HasOutputHeight) {
        output.WriteRawTag(16);
        output.WriteInt32(OutputHeight);
      }
      if (HasRotation) {
        output.WriteRawTag(24);
        output.WriteInt32(Rotation);
      }
      if (HasFlipVertical) {
        output.WriteRawTag(32);
        output.WriteBool(FlipVertical);
      }
      if (HasFlipHorizontal) {
        output.WriteRawTag(40);
        output.WriteBool(FlipHorizontal);
      }
      if (HasScaleMode) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ScaleMode);
      }
      if (HasOutputScale) {
        output.WriteRawTag(61);
        output.WriteFloat(OutputScale);
      }
      if (HasUseNearestNeighborInterpolation) {
        output.WriteRawTag(64);
        output.WriteBool(UseNearestNeighborInterpolation);
      }
      if (HasUseInputFormatForOutput) {
        output.WriteRawTag(72);
        output.WriteBool(UseInputFormatForOutput);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOutputWidth) {
        output.WriteRawTag(8);
        output.WriteInt32(OutputWidth);
      }
      if (HasOutputHeight) {
        output.WriteRawTag(16);
        output.WriteInt32(OutputHeight);
      }
      if (HasRotation) {
        output.WriteRawTag(24);
        output.WriteInt32(Rotation);
      }
      if (HasFlipVertical) {
        output.WriteRawTag(32);
        output.WriteBool(FlipVertical);
      }
      if (HasFlipHorizontal) {
        output.WriteRawTag(40);
        output.WriteBool(FlipHorizontal);
      }
      if (HasScaleMode) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ScaleMode);
      }
      if (HasOutputScale) {
        output.WriteRawTag(61);
        output.WriteFloat(OutputScale);
      }
      if (HasUseNearestNeighborInterpolation) {
        output.WriteRawTag(64);
        output.WriteBool(UseNearestNeighborInterpolation);
      }
      if (HasUseInputFormatForOutput) {
        output.WriteRawTag(72);
        output.WriteBool(UseInputFormatForOutput);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasOutputWidth) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputWidth);
      }
      if (HasOutputHeight) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputHeight);
      }
      if (HasOutputScale) {
        size += 1 + 4;
      }
      if (HasRotation) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rotation);
      }
      if (HasFlipVertical) {
        size += 1 + 1;
      }
      if (HasFlipHorizontal) {
        size += 1 + 1;
      }
      if (HasScaleMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ScaleMode);
      }
      if (HasUseNearestNeighborInterpolation) {
        size += 1 + 1;
      }
      if (HasUseInputFormatForOutput) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(GlScalerCalculatorOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasOutputWidth) {
        OutputWidth = other.OutputWidth;
      }
      if (other.HasOutputHeight) {
        OutputHeight = other.OutputHeight;
      }
      if (other.HasOutputScale) {
        OutputScale = other.OutputScale;
      }
      if (other.HasRotation) {
        Rotation = other.Rotation;
      }
      if (other.HasFlipVertical) {
        FlipVertical = other.FlipVertical;
      }
      if (other.HasFlipHorizontal) {
        FlipHorizontal = other.FlipHorizontal;
      }
      if (other.HasScaleMode) {
        ScaleMode = other.ScaleMode;
      }
      if (other.HasUseNearestNeighborInterpolation) {
        UseNearestNeighborInterpolation = other.UseNearestNeighborInterpolation;
      }
      if (other.HasUseInputFormatForOutput) {
        UseInputFormatForOutput = other.UseInputFormatForOutput;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OutputWidth = input.ReadInt32();
            break;
          }
          case 16: {
            OutputHeight = input.ReadInt32();
            break;
          }
          case 24: {
            Rotation = input.ReadInt32();
            break;
          }
          case 32: {
            FlipVertical = input.ReadBool();
            break;
          }
          case 40: {
            FlipHorizontal = input.ReadBool();
            break;
          }
          case 48: {
            ScaleMode = (global::Mediapipe.ScaleMode.Types.Mode) input.ReadEnum();
            break;
          }
          case 61: {
            OutputScale = input.ReadFloat();
            break;
          }
          case 64: {
            UseNearestNeighborInterpolation = input.ReadBool();
            break;
          }
          case 72: {
            UseInputFormatForOutput = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OutputWidth = input.ReadInt32();
            break;
          }
          case 16: {
            OutputHeight = input.ReadInt32();
            break;
          }
          case 24: {
            Rotation = input.ReadInt32();
            break;
          }
          case 32: {
            FlipVertical = input.ReadBool();
            break;
          }
          case 40: {
            FlipHorizontal = input.ReadBool();
            break;
          }
          case 48: {
            ScaleMode = (global::Mediapipe.ScaleMode.Types.Mode) input.ReadEnum();
            break;
          }
          case 61: {
            OutputScale = input.ReadFloat();
            break;
          }
          case 64: {
            UseNearestNeighborInterpolation = input.ReadBool();
            break;
          }
          case 72: {
            UseInputFormatForOutput = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Extensions
    /// <summary>Container for extensions for other messages declared in the GlScalerCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Extensions {
      public static readonly pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.GlScalerCalculatorOptions> Ext =
        new pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.GlScalerCalculatorOptions>(166373014, pb::FieldCodec.ForMessage(1330984114, global::Mediapipe.GlScalerCalculatorOptions.Parser));
    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
