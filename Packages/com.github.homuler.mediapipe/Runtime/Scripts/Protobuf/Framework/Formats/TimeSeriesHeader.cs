// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/framework/formats/time_series_header.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/framework/formats/time_series_header.proto</summary>
  public static partial class TimeSeriesHeaderReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/framework/formats/time_series_header.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TimeSeriesHeaderReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjRtZWRpYXBpcGUvZnJhbWV3b3JrL2Zvcm1hdHMvdGltZV9zZXJpZXNfaGVh",
            "ZGVyLnByb3RvEgltZWRpYXBpcGUijgEKEFRpbWVTZXJpZXNIZWFkZXISEwoL",
            "c2FtcGxlX3JhdGUYASABKAESFAoMbnVtX2NoYW5uZWxzGAIgASgFEhMKC251",
            "bV9zYW1wbGVzGAMgASgFEhMKC3BhY2tldF9yYXRlGAQgASgBEhkKEWF1ZGlv",
            "X3NhbXBsZV9yYXRlGAUgASgBKgoIoJwBEICAgIACImsKG011bHRpU3RyZWFt",
            "VGltZVNlcmllc0hlYWRlchI3ChJ0aW1lX3Nlcmllc19oZWFkZXIYASABKAsy",
            "Gy5tZWRpYXBpcGUuVGltZVNlcmllc0hlYWRlchITCgtudW1fc3RyZWFtcxgC",
            "IAEoBQ=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.TimeSeriesHeader), global::Mediapipe.TimeSeriesHeader.Parser, new[]{ "SampleRate", "NumChannels", "NumSamples", "PacketRate", "AudioSampleRate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.MultiStreamTimeSeriesHeader), global::Mediapipe.MultiStreamTimeSeriesHeader.Parser, new[]{ "TimeSeriesHeader", "NumStreams" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Header for a uniformly sampled time series stream. Each Packet in
  /// the stream is a Matrix, and each column is a (vector-valued) sample of
  /// the series, i.e. each column corresponds to a distinct sample in time.
  /// </summary>
  public sealed partial class TimeSeriesHeader : pb::IExtendableMessage<TimeSeriesHeader>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimeSeriesHeader> _parser = new pb::MessageParser<TimeSeriesHeader>(() => new TimeSeriesHeader());
    private pb::UnknownFieldSet _unknownFields;
    private pb::ExtensionSet<TimeSeriesHeader> _extensions;
    private pb::ExtensionSet<TimeSeriesHeader> _Extensions { get { return _extensions; } }
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TimeSeriesHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.TimeSeriesHeaderReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimeSeriesHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimeSeriesHeader(TimeSeriesHeader other) : this() {
      _hasBits0 = other._hasBits0;
      sampleRate_ = other.sampleRate_;
      numChannels_ = other.numChannels_;
      numSamples_ = other.numSamples_;
      packetRate_ = other.packetRate_;
      audioSampleRate_ = other.audioSampleRate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      _extensions = pb::ExtensionSet.Clone(other._extensions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimeSeriesHeader Clone() {
      return new TimeSeriesHeader(this);
    }

    /// <summary>Field number for the "sample_rate" field.</summary>
    public const int SampleRateFieldNumber = 1;
    private readonly static double SampleRateDefaultValue = 0D;

    private double sampleRate_;
    /// <summary>
    /// Number of samples per second (hertz). The sample_rate is the
    /// reciprocal of the period between consecutive samples within a
    /// packet.  Required, and must be greater than zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double SampleRate {
      get { if ((_hasBits0 & 1) != 0) { return sampleRate_; } else { return SampleRateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        sampleRate_ = value;
      }
    }
    /// <summary>Gets whether the "sample_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSampleRate {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "sample_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSampleRate() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "num_channels" field.</summary>
    public const int NumChannelsFieldNumber = 2;
    private readonly static int NumChannelsDefaultValue = 0;

    private int numChannels_;
    /// <summary>
    /// The number of channels in each sample. This is the number of
    /// rows in the matrix.  Required, and must be greater than zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumChannels {
      get { if ((_hasBits0 & 2) != 0) { return numChannels_; } else { return NumChannelsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        numChannels_ = value;
      }
    }
    /// <summary>Gets whether the "num_channels" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumChannels {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "num_channels" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumChannels() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "num_samples" field.</summary>
    public const int NumSamplesFieldNumber = 3;
    private readonly static int NumSamplesDefaultValue = 0;

    private int numSamples_;
    /// <summary>
    /// For streams that output a fixed number of samples per packet.
    /// This field should not be set if the number of samples varies from
    /// packet to packet. This is the number of columns in the matrix.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumSamples {
      get { if ((_hasBits0 & 4) != 0) { return numSamples_; } else { return NumSamplesDefaultValue; } }
      set {
        _hasBits0 |= 4;
        numSamples_ = value;
      }
    }
    /// <summary>Gets whether the "num_samples" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumSamples {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "num_samples" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumSamples() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "packet_rate" field.</summary>
    public const int PacketRateFieldNumber = 4;
    private readonly static double PacketRateDefaultValue = 0D;

    private double packetRate_;
    /// <summary>
    /// For streams that output Packets at a fixed rate, in Packets per
    /// second. In other words, the reciprocal of the difference between
    /// consecutive Packet timestamps.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double PacketRate {
      get { if ((_hasBits0 & 8) != 0) { return packetRate_; } else { return PacketRateDefaultValue; } }
      set {
        _hasBits0 |= 8;
        packetRate_ = value;
      }
    }
    /// <summary>Gets whether the "packet_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPacketRate {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "packet_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPacketRate() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "audio_sample_rate" field.</summary>
    public const int AudioSampleRateFieldNumber = 5;
    private readonly static double AudioSampleRateDefaultValue = 0D;

    private double audioSampleRate_;
    /// <summary>
    /// Spectral representations (e.g. from SpectrogramCalculator) will
    /// have their sample_rate field indicating the frame rate (e.g. 100
    /// Hz), but downstream consumers need to know the sample_rate of the
    /// source time-domain waveform in order to correctly interpret the
    /// spectral bins.  Units are hertz.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double AudioSampleRate {
      get { if ((_hasBits0 & 16) != 0) { return audioSampleRate_; } else { return AudioSampleRateDefaultValue; } }
      set {
        _hasBits0 |= 16;
        audioSampleRate_ = value;
      }
    }
    /// <summary>Gets whether the "audio_sample_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAudioSampleRate {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "audio_sample_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAudioSampleRate() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TimeSeriesHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TimeSeriesHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(SampleRate, other.SampleRate)) return false;
      if (NumChannels != other.NumChannels) return false;
      if (NumSamples != other.NumSamples) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(PacketRate, other.PacketRate)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(AudioSampleRate, other.AudioSampleRate)) return false;
      if (!Equals(_extensions, other._extensions)) {
        return false;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSampleRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(SampleRate);
      if (HasNumChannels) hash ^= NumChannels.GetHashCode();
      if (HasNumSamples) hash ^= NumSamples.GetHashCode();
      if (HasPacketRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(PacketRate);
      if (HasAudioSampleRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(AudioSampleRate);
      if (_extensions != null) {
        hash ^= _extensions.GetHashCode();
      }
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSampleRate) {
        output.WriteRawTag(9);
        output.WriteDouble(SampleRate);
      }
      if (HasNumChannels) {
        output.WriteRawTag(16);
        output.WriteInt32(NumChannels);
      }
      if (HasNumSamples) {
        output.WriteRawTag(24);
        output.WriteInt32(NumSamples);
      }
      if (HasPacketRate) {
        output.WriteRawTag(33);
        output.WriteDouble(PacketRate);
      }
      if (HasAudioSampleRate) {
        output.WriteRawTag(41);
        output.WriteDouble(AudioSampleRate);
      }
      if (_extensions != null) {
        _extensions.WriteTo(output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSampleRate) {
        output.WriteRawTag(9);
        output.WriteDouble(SampleRate);
      }
      if (HasNumChannels) {
        output.WriteRawTag(16);
        output.WriteInt32(NumChannels);
      }
      if (HasNumSamples) {
        output.WriteRawTag(24);
        output.WriteInt32(NumSamples);
      }
      if (HasPacketRate) {
        output.WriteRawTag(33);
        output.WriteDouble(PacketRate);
      }
      if (HasAudioSampleRate) {
        output.WriteRawTag(41);
        output.WriteDouble(AudioSampleRate);
      }
      if (_extensions != null) {
        _extensions.WriteTo(ref output);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSampleRate) {
        size += 1 + 8;
      }
      if (HasNumChannels) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumChannels);
      }
      if (HasNumSamples) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumSamples);
      }
      if (HasPacketRate) {
        size += 1 + 8;
      }
      if (HasAudioSampleRate) {
        size += 1 + 8;
      }
      if (_extensions != null) {
        size += _extensions.CalculateSize();
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TimeSeriesHeader other) {
      if (other == null) {
        return;
      }
      if (other.HasSampleRate) {
        SampleRate = other.SampleRate;
      }
      if (other.HasNumChannels) {
        NumChannels = other.NumChannels;
      }
      if (other.HasNumSamples) {
        NumSamples = other.NumSamples;
      }
      if (other.HasPacketRate) {
        PacketRate = other.PacketRate;
      }
      if (other.HasAudioSampleRate) {
        AudioSampleRate = other.AudioSampleRate;
      }
      pb::ExtensionSet.MergeFrom(ref _extensions, other._extensions);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            }
            break;
          case 9: {
            SampleRate = input.ReadDouble();
            break;
          }
          case 16: {
            NumChannels = input.ReadInt32();
            break;
          }
          case 24: {
            NumSamples = input.ReadInt32();
            break;
          }
          case 33: {
            PacketRate = input.ReadDouble();
            break;
          }
          case 41: {
            AudioSampleRate = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            if (!pb::ExtensionSet.TryMergeFieldFrom(ref _extensions, ref input)) {
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            }
            break;
          case 9: {
            SampleRate = input.ReadDouble();
            break;
          }
          case 16: {
            NumChannels = input.ReadInt32();
            break;
          }
          case 24: {
            NumSamples = input.ReadInt32();
            break;
          }
          case 33: {
            PacketRate = input.ReadDouble();
            break;
          }
          case 41: {
            AudioSampleRate = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

    public TValue GetExtension<TValue>(pb::Extension<TimeSeriesHeader, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetExtension<TValue>(pb::RepeatedExtension<TimeSeriesHeader, TValue> extension) {
      return pb::ExtensionSet.Get(ref _extensions, extension);
    }
    public pbc::RepeatedField<TValue> GetOrInitializeExtension<TValue>(pb::RepeatedExtension<TimeSeriesHeader, TValue> extension) {
      return pb::ExtensionSet.GetOrInitialize(ref _extensions, extension);
    }
    public void SetExtension<TValue>(pb::Extension<TimeSeriesHeader, TValue> extension, TValue value) {
      pb::ExtensionSet.Set(ref _extensions, extension, value);
    }
    public bool HasExtension<TValue>(pb::Extension<TimeSeriesHeader, TValue> extension) {
      return pb::ExtensionSet.Has(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::Extension<TimeSeriesHeader, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }
    public void ClearExtension<TValue>(pb::RepeatedExtension<TimeSeriesHeader, TValue> extension) {
      pb::ExtensionSet.Clear(ref _extensions, extension);
    }

  }

  /// <summary>
  /// Header for a multi-stream time series. Each packet in the
  /// associated stream is a vector&lt;Matrix> of size num_streams. Each
  /// Matrix in the vector is as specified by the time_series_header
  /// field.
  /// </summary>
  public sealed partial class MultiStreamTimeSeriesHeader : pb::IMessage<MultiStreamTimeSeriesHeader>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MultiStreamTimeSeriesHeader> _parser = new pb::MessageParser<MultiStreamTimeSeriesHeader>(() => new MultiStreamTimeSeriesHeader());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MultiStreamTimeSeriesHeader> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.TimeSeriesHeaderReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MultiStreamTimeSeriesHeader() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MultiStreamTimeSeriesHeader(MultiStreamTimeSeriesHeader other) : this() {
      _hasBits0 = other._hasBits0;
      timeSeriesHeader_ = other.timeSeriesHeader_ != null ? other.timeSeriesHeader_.Clone() : null;
      numStreams_ = other.numStreams_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MultiStreamTimeSeriesHeader Clone() {
      return new MultiStreamTimeSeriesHeader(this);
    }

    /// <summary>Field number for the "time_series_header" field.</summary>
    public const int TimeSeriesHeaderFieldNumber = 1;
    private global::Mediapipe.TimeSeriesHeader timeSeriesHeader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.TimeSeriesHeader TimeSeriesHeader {
      get { return timeSeriesHeader_; }
      set {
        timeSeriesHeader_ = value;
      }
    }

    /// <summary>Field number for the "num_streams" field.</summary>
    public const int NumStreamsFieldNumber = 2;
    private readonly static int NumStreamsDefaultValue = 0;

    private int numStreams_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumStreams {
      get { if ((_hasBits0 & 1) != 0) { return numStreams_; } else { return NumStreamsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        numStreams_ = value;
      }
    }
    /// <summary>Gets whether the "num_streams" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumStreams {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "num_streams" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumStreams() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MultiStreamTimeSeriesHeader);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MultiStreamTimeSeriesHeader other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(TimeSeriesHeader, other.TimeSeriesHeader)) return false;
      if (NumStreams != other.NumStreams) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (timeSeriesHeader_ != null) hash ^= TimeSeriesHeader.GetHashCode();
      if (HasNumStreams) hash ^= NumStreams.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (timeSeriesHeader_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TimeSeriesHeader);
      }
      if (HasNumStreams) {
        output.WriteRawTag(16);
        output.WriteInt32(NumStreams);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (timeSeriesHeader_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TimeSeriesHeader);
      }
      if (HasNumStreams) {
        output.WriteRawTag(16);
        output.WriteInt32(NumStreams);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (timeSeriesHeader_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TimeSeriesHeader);
      }
      if (HasNumStreams) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumStreams);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MultiStreamTimeSeriesHeader other) {
      if (other == null) {
        return;
      }
      if (other.timeSeriesHeader_ != null) {
        if (timeSeriesHeader_ == null) {
          TimeSeriesHeader = new global::Mediapipe.TimeSeriesHeader();
        }
        TimeSeriesHeader.MergeFrom(other.TimeSeriesHeader);
      }
      if (other.HasNumStreams) {
        NumStreams = other.NumStreams;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (timeSeriesHeader_ == null) {
              TimeSeriesHeader = new global::Mediapipe.TimeSeriesHeader();
            }
            input.ReadMessage(TimeSeriesHeader);
            break;
          }
          case 16: {
            NumStreams = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (timeSeriesHeader_ == null) {
              TimeSeriesHeader = new global::Mediapipe.TimeSeriesHeader();
            }
            input.ReadMessage(TimeSeriesHeader);
            break;
          }
          case 16: {
            NumStreams = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
