// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/util/render_data.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/util/render_data.proto</summary>
  public static partial class RenderDataReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/util/render_data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RenderDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBtZWRpYXBpcGUvdXRpbC9yZW5kZXJfZGF0YS5wcm90bxIJbWVkaWFwaXBl",
            "GhptZWRpYXBpcGUvdXRpbC9jb2xvci5wcm90byKNAQoKUmVuZGVyRGF0YRI3",
            "ChJyZW5kZXJfYW5ub3RhdGlvbnMYASADKAsyGy5tZWRpYXBpcGUuUmVuZGVy",
            "QW5ub3RhdGlvbhITCgtzY2VuZV9jbGFzcxgCIAEoCRIxCg5zY2VuZV92aWV3",
            "cG9ydBgDIAEoCzIZLm1lZGlhcGlwZS5SZW5kZXJWaWV3cG9ydCLyEgoQUmVu",
            "ZGVyQW5ub3RhdGlvbhI6CglyZWN0YW5nbGUYASABKAsyJS5tZWRpYXBpcGUu",
            "UmVuZGVyQW5ub3RhdGlvbi5SZWN0YW5nbGVIABJHChBmaWxsZWRfcmVjdGFu",
            "Z2xlGAIgASgLMisubWVkaWFwaXBlLlJlbmRlckFubm90YXRpb24uRmlsbGVk",
            "UmVjdGFuZ2xlSAASMAoEb3ZhbBgDIAEoCzIgLm1lZGlhcGlwZS5SZW5kZXJB",
            "bm5vdGF0aW9uLk92YWxIABI9CgtmaWxsZWRfb3ZhbBgEIAEoCzImLm1lZGlh",
            "cGlwZS5SZW5kZXJBbm5vdGF0aW9uLkZpbGxlZE92YWxIABIyCgVwb2ludBgF",
            "IAEoCzIhLm1lZGlhcGlwZS5SZW5kZXJBbm5vdGF0aW9uLlBvaW50SAASMAoE",
            "bGluZRgGIAEoCzIgLm1lZGlhcGlwZS5SZW5kZXJBbm5vdGF0aW9uLkxpbmVI",
            "ABIyCgVhcnJvdxgHIAEoCzIhLm1lZGlhcGlwZS5SZW5kZXJBbm5vdGF0aW9u",
            "LkFycm93SAASMAoEdGV4dBgIIAEoCzIgLm1lZGlhcGlwZS5SZW5kZXJBbm5v",
            "dGF0aW9uLlRleHRIABJJChFyb3VuZGVkX3JlY3RhbmdsZRgJIAEoCzIsLm1l",
            "ZGlhcGlwZS5SZW5kZXJBbm5vdGF0aW9uLlJvdW5kZWRSZWN0YW5nbGVIABJW",
            "ChhmaWxsZWRfcm91bmRlZF9yZWN0YW5nbGUYCiABKAsyMi5tZWRpYXBpcGUu",
            "UmVuZGVyQW5ub3RhdGlvbi5GaWxsZWRSb3VuZGVkUmVjdGFuZ2xlSAASQQoN",
            "Z3JhZGllbnRfbGluZRgOIAEoCzIoLm1lZGlhcGlwZS5SZW5kZXJBbm5vdGF0",
            "aW9uLkdyYWRpZW50TGluZUgAEjgKCHNjcmliYmxlGA8gASgLMiQubWVkaWFw",
            "aXBlLlJlbmRlckFubm90YXRpb24uU2NyaWJibGVIABIUCgl0aGlja25lc3MY",
            "CyABKAE6ATESHwoFY29sb3IYDCABKAsyEC5tZWRpYXBpcGUuQ29sb3ISEQoJ",
            "c2NlbmVfdGFnGA0gASgJGo4BCglSZWN0YW5nbGUSDAoEbGVmdBgBIAEoARIL",
            "CgN0b3AYAiABKAESDQoFcmlnaHQYAyABKAESDgoGYm90dG9tGAQgASgBEhkK",
            "Cm5vcm1hbGl6ZWQYBSABKAg6BWZhbHNlEhAKCHJvdGF0aW9uGAYgASgBEhoK",
            "EnRvcF9sZWZ0X3RoaWNrbmVzcxgHIAEoARpxCg9GaWxsZWRSZWN0YW5nbGUS",
            "OAoJcmVjdGFuZ2xlGAEgASgLMiUubWVkaWFwaXBlLlJlbmRlckFubm90YXRp",
            "b24uUmVjdGFuZ2xlEiQKCmZpbGxfY29sb3IYAiABKAsyEC5tZWRpYXBpcGUu",
            "Q29sb3IafAoQUm91bmRlZFJlY3RhbmdsZRI4CglyZWN0YW5nbGUYASABKAsy",
            "JS5tZWRpYXBpcGUuUmVuZGVyQW5ub3RhdGlvbi5SZWN0YW5nbGUSGAoNY29y",
            "bmVyX3JhZGl1cxgCIAEoBToBMBIUCglsaW5lX3R5cGUYAyABKAU6ATQahwEK",
            "FkZpbGxlZFJvdW5kZWRSZWN0YW5nbGUSRwoRcm91bmRlZF9yZWN0YW5nbGUY",
            "ASABKAsyLC5tZWRpYXBpcGUuUmVuZGVyQW5ub3RhdGlvbi5Sb3VuZGVkUmVj",
            "dGFuZ2xlEiQKCmZpbGxfY29sb3IYAiABKAsyEC5tZWRpYXBpcGUuQ29sb3Ia",
            "QAoET3ZhbBI4CglyZWN0YW5nbGUYASABKAsyJS5tZWRpYXBpcGUuUmVuZGVy",
            "QW5ub3RhdGlvbi5SZWN0YW5nbGUaYgoKRmlsbGVkT3ZhbBIuCgRvdmFsGAEg",
            "ASgLMiAubWVkaWFwaXBlLlJlbmRlckFubm90YXRpb24uT3ZhbBIkCgpmaWxs",
            "X2NvbG9yGAIgASgLMhAubWVkaWFwaXBlLkNvbG9yGjgKBVBvaW50EgkKAXgY",
            "ASABKAESCQoBeRgCIAEoARIZCgpub3JtYWxpemVkGAMgASgIOgVmYWxzZRrW",
            "AQoETGluZRIPCgd4X3N0YXJ0GAEgASgBEg8KB3lfc3RhcnQYAiABKAESDQoF",
            "eF9lbmQYAyABKAESDQoFeV9lbmQYBCABKAESGQoKbm9ybWFsaXplZBgFIAEo",
            "CDoFZmFsc2USQwoJbGluZV90eXBlGAYgASgOMikubWVkaWFwaXBlLlJlbmRl",
            "ckFubm90YXRpb24uTGluZS5MaW5lVHlwZToFU09MSUQiLgoITGluZVR5cGUS",
            "CwoHVU5LTk9XThAAEgkKBVNPTElEEAESCgoGREFTSEVEEAIarQEKDEdyYWRp",
            "ZW50TGluZRIPCgd4X3N0YXJ0GAEgASgBEg8KB3lfc3RhcnQYAiABKAESDQoF",
            "eF9lbmQYAyABKAESDQoFeV9lbmQYBCABKAESGQoKbm9ybWFsaXplZBgFIAEo",
            "CDoFZmFsc2USIAoGY29sb3IxGAYgASgLMhAubWVkaWFwaXBlLkNvbG9yEiAK",
            "BmNvbG9yMhgHIAEoCzIQLm1lZGlhcGlwZS5Db2xvcho8CghTY3JpYmJsZRIw",
            "CgVwb2ludBgBIAMoCzIhLm1lZGlhcGlwZS5SZW5kZXJBbm5vdGF0aW9uLlBv",
            "aW50GmIKBUFycm93Eg8KB3hfc3RhcnQYASABKAESDwoHeV9zdGFydBgCIAEo",
            "ARINCgV4X2VuZBgDIAEoARINCgV5X2VuZBgEIAEoARIZCgpub3JtYWxpemVk",
            "GAUgASgIOgVmYWxzZRqSAgoEVGV4dBIUCgxkaXNwbGF5X3RleHQYASABKAkS",
            "DAoEbGVmdBgCIAEoARIQCghiYXNlbGluZRgDIAEoARIWCgtmb250X2hlaWdo",
            "dBgEIAEoAToBOBIZCgpub3JtYWxpemVkGAUgASgIOgVmYWxzZRIUCglmb250",
            "X2ZhY2UYBiABKAU6ATASIgoTY2VudGVyX2hvcml6b250YWxseRgHIAEoCDoF",
            "ZmFsc2USIAoRY2VudGVyX3ZlcnRpY2FsbHkYCCABKAg6BWZhbHNlEhwKEW91",
            "dGxpbmVfdGhpY2tuZXNzGAsgASgBOgEwEicKDW91dGxpbmVfY29sb3IYDCAB",
            "KAsyEC5tZWRpYXBpcGUuQ29sb3JCBgoEZGF0YSJbCg5SZW5kZXJWaWV3cG9y",
            "dBIKCgJpZBgBIAEoCRIQCgh3aWR0aF9weBgCIAEoBRIRCgloZWlnaHRfcHgY",
            "AyABKAUSGAoQY29tcG9zZV9vbl92aWRlbxgEIAEoCEIyCh9jb20uZ29vZ2xl",
            "Lm1lZGlhcGlwZS51dGlsLnByb3RvQg9SZW5kZXJEYXRhUHJvdG8="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mediapipe.ColorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.RenderData), global::Mediapipe.RenderData.Parser, new[]{ "RenderAnnotations", "SceneClass", "SceneViewport" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.RenderAnnotation), global::Mediapipe.RenderAnnotation.Parser, new[]{ "Rectangle", "FilledRectangle", "Oval", "FilledOval", "Point", "Line", "Arrow", "Text", "RoundedRectangle", "FilledRoundedRectangle", "GradientLine", "Scribble", "Thickness", "Color", "SceneTag" }, new[]{ "Data" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.RenderAnnotation.Types.Rectangle), global::Mediapipe.RenderAnnotation.Types.Rectangle.Parser, new[]{ "Left", "Top", "Right", "Bottom", "Normalized", "Rotation", "TopLeftThickness" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.RenderAnnotation.Types.FilledRectangle), global::Mediapipe.RenderAnnotation.Types.FilledRectangle.Parser, new[]{ "Rectangle", "FillColor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.RenderAnnotation.Types.RoundedRectangle), global::Mediapipe.RenderAnnotation.Types.RoundedRectangle.Parser, new[]{ "Rectangle", "CornerRadius", "LineType" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.RenderAnnotation.Types.FilledRoundedRectangle), global::Mediapipe.RenderAnnotation.Types.FilledRoundedRectangle.Parser, new[]{ "RoundedRectangle", "FillColor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.RenderAnnotation.Types.Oval), global::Mediapipe.RenderAnnotation.Types.Oval.Parser, new[]{ "Rectangle" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.RenderAnnotation.Types.FilledOval), global::Mediapipe.RenderAnnotation.Types.FilledOval.Parser, new[]{ "Oval", "FillColor" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.RenderAnnotation.Types.Point), global::Mediapipe.RenderAnnotation.Types.Point.Parser, new[]{ "X", "Y", "Normalized" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.RenderAnnotation.Types.Line), global::Mediapipe.RenderAnnotation.Types.Line.Parser, new[]{ "XStart", "YStart", "XEnd", "YEnd", "Normalized", "LineType" }, null, new[]{ typeof(global::Mediapipe.RenderAnnotation.Types.Line.Types.LineType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.RenderAnnotation.Types.GradientLine), global::Mediapipe.RenderAnnotation.Types.GradientLine.Parser, new[]{ "XStart", "YStart", "XEnd", "YEnd", "Normalized", "Color1", "Color2" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.RenderAnnotation.Types.Scribble), global::Mediapipe.RenderAnnotation.Types.Scribble.Parser, new[]{ "Point" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.RenderAnnotation.Types.Arrow), global::Mediapipe.RenderAnnotation.Types.Arrow.Parser, new[]{ "XStart", "YStart", "XEnd", "YEnd", "Normalized" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.RenderAnnotation.Types.Text), global::Mediapipe.RenderAnnotation.Types.Text.Parser, new[]{ "DisplayText", "Left", "Baseline", "FontHeight", "Normalized", "FontFace", "CenterHorizontally", "CenterVertically", "OutlineThickness", "OutlineColor" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.RenderViewport), global::Mediapipe.RenderViewport.Parser, new[]{ "Id", "WidthPx", "HeightPx", "ComposeOnVideo" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A RenderData is a collection of multiple RenderAnnotations. For example, a
  /// face can be rendered using a group of annotations: a bounding box around the
  /// face (rectangle) and annotations for various face parts such as eyes, nose
  /// etc (2D points).
  /// </summary>
  public sealed partial class RenderData : pb::IMessage<RenderData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RenderData> _parser = new pb::MessageParser<RenderData>(() => new RenderData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RenderData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.RenderDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RenderData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RenderData(RenderData other) : this() {
      renderAnnotations_ = other.renderAnnotations_.Clone();
      sceneClass_ = other.sceneClass_;
      sceneViewport_ = other.sceneViewport_ != null ? other.sceneViewport_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RenderData Clone() {
      return new RenderData(this);
    }

    /// <summary>Field number for the "render_annotations" field.</summary>
    public const int RenderAnnotationsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Mediapipe.RenderAnnotation> _repeated_renderAnnotations_codec
        = pb::FieldCodec.ForMessage(10, global::Mediapipe.RenderAnnotation.Parser);
    private readonly pbc::RepeatedField<global::Mediapipe.RenderAnnotation> renderAnnotations_ = new pbc::RepeatedField<global::Mediapipe.RenderAnnotation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mediapipe.RenderAnnotation> RenderAnnotations {
      get { return renderAnnotations_; }
    }

    /// <summary>Field number for the "scene_class" field.</summary>
    public const int SceneClassFieldNumber = 2;
    private readonly static string SceneClassDefaultValue = "";

    private string sceneClass_;
    /// <summary>
    /// An optional string that uniquely identifies this class of annotations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SceneClass {
      get { return sceneClass_ ?? SceneClassDefaultValue; }
      set {
        sceneClass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "scene_class" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSceneClass {
      get { return sceneClass_ != null; }
    }
    /// <summary>Clears the value of the "scene_class" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSceneClass() {
      sceneClass_ = null;
    }

    /// <summary>Field number for the "scene_viewport" field.</summary>
    public const int SceneViewportFieldNumber = 3;
    private global::Mediapipe.RenderViewport sceneViewport_;
    /// <summary>
    /// An optional viewport to which this set of annotations are intended to be
    /// rendered. If left unset, the annotations are meant to render overtop of the
    /// existing camera feed in the "main" viewport. If set, the annotations are to
    /// be rendered in a separate viewport.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.RenderViewport SceneViewport {
      get { return sceneViewport_; }
      set {
        sceneViewport_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RenderData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RenderData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!renderAnnotations_.Equals(other.renderAnnotations_)) return false;
      if (SceneClass != other.SceneClass) return false;
      if (!object.Equals(SceneViewport, other.SceneViewport)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= renderAnnotations_.GetHashCode();
      if (HasSceneClass) hash ^= SceneClass.GetHashCode();
      if (sceneViewport_ != null) hash ^= SceneViewport.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      renderAnnotations_.WriteTo(output, _repeated_renderAnnotations_codec);
      if (HasSceneClass) {
        output.WriteRawTag(18);
        output.WriteString(SceneClass);
      }
      if (sceneViewport_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SceneViewport);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      renderAnnotations_.WriteTo(ref output, _repeated_renderAnnotations_codec);
      if (HasSceneClass) {
        output.WriteRawTag(18);
        output.WriteString(SceneClass);
      }
      if (sceneViewport_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(SceneViewport);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += renderAnnotations_.CalculateSize(_repeated_renderAnnotations_codec);
      if (HasSceneClass) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneClass);
      }
      if (sceneViewport_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SceneViewport);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RenderData other) {
      if (other == null) {
        return;
      }
      renderAnnotations_.Add(other.renderAnnotations_);
      if (other.HasSceneClass) {
        SceneClass = other.SceneClass;
      }
      if (other.sceneViewport_ != null) {
        if (sceneViewport_ == null) {
          SceneViewport = new global::Mediapipe.RenderViewport();
        }
        SceneViewport.MergeFrom(other.SceneViewport);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            renderAnnotations_.AddEntriesFrom(input, _repeated_renderAnnotations_codec);
            break;
          }
          case 18: {
            SceneClass = input.ReadString();
            break;
          }
          case 26: {
            if (sceneViewport_ == null) {
              SceneViewport = new global::Mediapipe.RenderViewport();
            }
            input.ReadMessage(SceneViewport);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            renderAnnotations_.AddEntriesFrom(ref input, _repeated_renderAnnotations_codec);
            break;
          }
          case 18: {
            SceneClass = input.ReadString();
            break;
          }
          case 26: {
            if (sceneViewport_ == null) {
              SceneViewport = new global::Mediapipe.RenderViewport();
            }
            input.ReadMessage(SceneViewport);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RenderAnnotation : pb::IMessage<RenderAnnotation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RenderAnnotation> _parser = new pb::MessageParser<RenderAnnotation>(() => new RenderAnnotation());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RenderAnnotation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.RenderDataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RenderAnnotation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RenderAnnotation(RenderAnnotation other) : this() {
      _hasBits0 = other._hasBits0;
      thickness_ = other.thickness_;
      color_ = other.color_ != null ? other.color_.Clone() : null;
      sceneTag_ = other.sceneTag_;
      switch (other.DataCase) {
        case DataOneofCase.Rectangle:
          Rectangle = other.Rectangle.Clone();
          break;
        case DataOneofCase.FilledRectangle:
          FilledRectangle = other.FilledRectangle.Clone();
          break;
        case DataOneofCase.Oval:
          Oval = other.Oval.Clone();
          break;
        case DataOneofCase.FilledOval:
          FilledOval = other.FilledOval.Clone();
          break;
        case DataOneofCase.Point:
          Point = other.Point.Clone();
          break;
        case DataOneofCase.Line:
          Line = other.Line.Clone();
          break;
        case DataOneofCase.Arrow:
          Arrow = other.Arrow.Clone();
          break;
        case DataOneofCase.Text:
          Text = other.Text.Clone();
          break;
        case DataOneofCase.RoundedRectangle:
          RoundedRectangle = other.RoundedRectangle.Clone();
          break;
        case DataOneofCase.FilledRoundedRectangle:
          FilledRoundedRectangle = other.FilledRoundedRectangle.Clone();
          break;
        case DataOneofCase.GradientLine:
          GradientLine = other.GradientLine.Clone();
          break;
        case DataOneofCase.Scribble:
          Scribble = other.Scribble.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RenderAnnotation Clone() {
      return new RenderAnnotation(this);
    }

    /// <summary>Field number for the "rectangle" field.</summary>
    public const int RectangleFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.RenderAnnotation.Types.Rectangle Rectangle {
      get { return dataCase_ == DataOneofCase.Rectangle ? (global::Mediapipe.RenderAnnotation.Types.Rectangle) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Rectangle;
      }
    }

    /// <summary>Field number for the "filled_rectangle" field.</summary>
    public const int FilledRectangleFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.RenderAnnotation.Types.FilledRectangle FilledRectangle {
      get { return dataCase_ == DataOneofCase.FilledRectangle ? (global::Mediapipe.RenderAnnotation.Types.FilledRectangle) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.FilledRectangle;
      }
    }

    /// <summary>Field number for the "oval" field.</summary>
    public const int OvalFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.RenderAnnotation.Types.Oval Oval {
      get { return dataCase_ == DataOneofCase.Oval ? (global::Mediapipe.RenderAnnotation.Types.Oval) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Oval;
      }
    }

    /// <summary>Field number for the "filled_oval" field.</summary>
    public const int FilledOvalFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.RenderAnnotation.Types.FilledOval FilledOval {
      get { return dataCase_ == DataOneofCase.FilledOval ? (global::Mediapipe.RenderAnnotation.Types.FilledOval) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.FilledOval;
      }
    }

    /// <summary>Field number for the "point" field.</summary>
    public const int PointFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.RenderAnnotation.Types.Point Point {
      get { return dataCase_ == DataOneofCase.Point ? (global::Mediapipe.RenderAnnotation.Types.Point) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Point;
      }
    }

    /// <summary>Field number for the "line" field.</summary>
    public const int LineFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.RenderAnnotation.Types.Line Line {
      get { return dataCase_ == DataOneofCase.Line ? (global::Mediapipe.RenderAnnotation.Types.Line) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Line;
      }
    }

    /// <summary>Field number for the "arrow" field.</summary>
    public const int ArrowFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.RenderAnnotation.Types.Arrow Arrow {
      get { return dataCase_ == DataOneofCase.Arrow ? (global::Mediapipe.RenderAnnotation.Types.Arrow) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Arrow;
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.RenderAnnotation.Types.Text Text {
      get { return dataCase_ == DataOneofCase.Text ? (global::Mediapipe.RenderAnnotation.Types.Text) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Text;
      }
    }

    /// <summary>Field number for the "rounded_rectangle" field.</summary>
    public const int RoundedRectangleFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.RenderAnnotation.Types.RoundedRectangle RoundedRectangle {
      get { return dataCase_ == DataOneofCase.RoundedRectangle ? (global::Mediapipe.RenderAnnotation.Types.RoundedRectangle) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.RoundedRectangle;
      }
    }

    /// <summary>Field number for the "filled_rounded_rectangle" field.</summary>
    public const int FilledRoundedRectangleFieldNumber = 10;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.RenderAnnotation.Types.FilledRoundedRectangle FilledRoundedRectangle {
      get { return dataCase_ == DataOneofCase.FilledRoundedRectangle ? (global::Mediapipe.RenderAnnotation.Types.FilledRoundedRectangle) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.FilledRoundedRectangle;
      }
    }

    /// <summary>Field number for the "gradient_line" field.</summary>
    public const int GradientLineFieldNumber = 14;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.RenderAnnotation.Types.GradientLine GradientLine {
      get { return dataCase_ == DataOneofCase.GradientLine ? (global::Mediapipe.RenderAnnotation.Types.GradientLine) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.GradientLine;
      }
    }

    /// <summary>Field number for the "scribble" field.</summary>
    public const int ScribbleFieldNumber = 15;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.RenderAnnotation.Types.Scribble Scribble {
      get { return dataCase_ == DataOneofCase.Scribble ? (global::Mediapipe.RenderAnnotation.Types.Scribble) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.Scribble;
      }
    }

    /// <summary>Field number for the "thickness" field.</summary>
    public const int ThicknessFieldNumber = 11;
    private readonly static double ThicknessDefaultValue = 1D;

    private double thickness_;
    /// <summary>
    /// Thickness for drawing the annotation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Thickness {
      get { if ((_hasBits0 & 1) != 0) { return thickness_; } else { return ThicknessDefaultValue; } }
      set {
        _hasBits0 |= 1;
        thickness_ = value;
      }
    }
    /// <summary>Gets whether the "thickness" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasThickness {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "thickness" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearThickness() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 12;
    private global::Mediapipe.Color color_;
    /// <summary>
    /// Color for drawing the annotation. For FilledRectangle and FilledOval, this
    /// color is used only for drawing the boundary.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "scene_tag" field.</summary>
    public const int SceneTagFieldNumber = 13;
    private readonly static string SceneTagDefaultValue = "";

    private string sceneTag_;
    /// <summary>
    /// A hint regarding what this annotation is for. Should be unique across all
    /// annotation types.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SceneTag {
      get { return sceneTag_ ?? SceneTagDefaultValue; }
      set {
        sceneTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "scene_tag" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSceneTag {
      get { return sceneTag_ != null; }
    }
    /// <summary>Clears the value of the "scene_tag" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSceneTag() {
      sceneTag_ = null;
    }

    private object data_;
    /// <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      Rectangle = 1,
      FilledRectangle = 2,
      Oval = 3,
      FilledOval = 4,
      Point = 5,
      Line = 6,
      Arrow = 7,
      Text = 8,
      RoundedRectangle = 9,
      FilledRoundedRectangle = 10,
      GradientLine = 14,
      Scribble = 15,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RenderAnnotation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RenderAnnotation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Rectangle, other.Rectangle)) return false;
      if (!object.Equals(FilledRectangle, other.FilledRectangle)) return false;
      if (!object.Equals(Oval, other.Oval)) return false;
      if (!object.Equals(FilledOval, other.FilledOval)) return false;
      if (!object.Equals(Point, other.Point)) return false;
      if (!object.Equals(Line, other.Line)) return false;
      if (!object.Equals(Arrow, other.Arrow)) return false;
      if (!object.Equals(Text, other.Text)) return false;
      if (!object.Equals(RoundedRectangle, other.RoundedRectangle)) return false;
      if (!object.Equals(FilledRoundedRectangle, other.FilledRoundedRectangle)) return false;
      if (!object.Equals(GradientLine, other.GradientLine)) return false;
      if (!object.Equals(Scribble, other.Scribble)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Thickness, other.Thickness)) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (SceneTag != other.SceneTag) return false;
      if (DataCase != other.DataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (dataCase_ == DataOneofCase.Rectangle) hash ^= Rectangle.GetHashCode();
      if (dataCase_ == DataOneofCase.FilledRectangle) hash ^= FilledRectangle.GetHashCode();
      if (dataCase_ == DataOneofCase.Oval) hash ^= Oval.GetHashCode();
      if (dataCase_ == DataOneofCase.FilledOval) hash ^= FilledOval.GetHashCode();
      if (dataCase_ == DataOneofCase.Point) hash ^= Point.GetHashCode();
      if (dataCase_ == DataOneofCase.Line) hash ^= Line.GetHashCode();
      if (dataCase_ == DataOneofCase.Arrow) hash ^= Arrow.GetHashCode();
      if (dataCase_ == DataOneofCase.Text) hash ^= Text.GetHashCode();
      if (dataCase_ == DataOneofCase.RoundedRectangle) hash ^= RoundedRectangle.GetHashCode();
      if (dataCase_ == DataOneofCase.FilledRoundedRectangle) hash ^= FilledRoundedRectangle.GetHashCode();
      if (dataCase_ == DataOneofCase.GradientLine) hash ^= GradientLine.GetHashCode();
      if (dataCase_ == DataOneofCase.Scribble) hash ^= Scribble.GetHashCode();
      if (HasThickness) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Thickness);
      if (color_ != null) hash ^= Color.GetHashCode();
      if (HasSceneTag) hash ^= SceneTag.GetHashCode();
      hash ^= (int) dataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (dataCase_ == DataOneofCase.Rectangle) {
        output.WriteRawTag(10);
        output.WriteMessage(Rectangle);
      }
      if (dataCase_ == DataOneofCase.FilledRectangle) {
        output.WriteRawTag(18);
        output.WriteMessage(FilledRectangle);
      }
      if (dataCase_ == DataOneofCase.Oval) {
        output.WriteRawTag(26);
        output.WriteMessage(Oval);
      }
      if (dataCase_ == DataOneofCase.FilledOval) {
        output.WriteRawTag(34);
        output.WriteMessage(FilledOval);
      }
      if (dataCase_ == DataOneofCase.Point) {
        output.WriteRawTag(42);
        output.WriteMessage(Point);
      }
      if (dataCase_ == DataOneofCase.Line) {
        output.WriteRawTag(50);
        output.WriteMessage(Line);
      }
      if (dataCase_ == DataOneofCase.Arrow) {
        output.WriteRawTag(58);
        output.WriteMessage(Arrow);
      }
      if (dataCase_ == DataOneofCase.Text) {
        output.WriteRawTag(66);
        output.WriteMessage(Text);
      }
      if (dataCase_ == DataOneofCase.RoundedRectangle) {
        output.WriteRawTag(74);
        output.WriteMessage(RoundedRectangle);
      }
      if (dataCase_ == DataOneofCase.FilledRoundedRectangle) {
        output.WriteRawTag(82);
        output.WriteMessage(FilledRoundedRectangle);
      }
      if (HasThickness) {
        output.WriteRawTag(89);
        output.WriteDouble(Thickness);
      }
      if (color_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Color);
      }
      if (HasSceneTag) {
        output.WriteRawTag(106);
        output.WriteString(SceneTag);
      }
      if (dataCase_ == DataOneofCase.GradientLine) {
        output.WriteRawTag(114);
        output.WriteMessage(GradientLine);
      }
      if (dataCase_ == DataOneofCase.Scribble) {
        output.WriteRawTag(122);
        output.WriteMessage(Scribble);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (dataCase_ == DataOneofCase.Rectangle) {
        output.WriteRawTag(10);
        output.WriteMessage(Rectangle);
      }
      if (dataCase_ == DataOneofCase.FilledRectangle) {
        output.WriteRawTag(18);
        output.WriteMessage(FilledRectangle);
      }
      if (dataCase_ == DataOneofCase.Oval) {
        output.WriteRawTag(26);
        output.WriteMessage(Oval);
      }
      if (dataCase_ == DataOneofCase.FilledOval) {
        output.WriteRawTag(34);
        output.WriteMessage(FilledOval);
      }
      if (dataCase_ == DataOneofCase.Point) {
        output.WriteRawTag(42);
        output.WriteMessage(Point);
      }
      if (dataCase_ == DataOneofCase.Line) {
        output.WriteRawTag(50);
        output.WriteMessage(Line);
      }
      if (dataCase_ == DataOneofCase.Arrow) {
        output.WriteRawTag(58);
        output.WriteMessage(Arrow);
      }
      if (dataCase_ == DataOneofCase.Text) {
        output.WriteRawTag(66);
        output.WriteMessage(Text);
      }
      if (dataCase_ == DataOneofCase.RoundedRectangle) {
        output.WriteRawTag(74);
        output.WriteMessage(RoundedRectangle);
      }
      if (dataCase_ == DataOneofCase.FilledRoundedRectangle) {
        output.WriteRawTag(82);
        output.WriteMessage(FilledRoundedRectangle);
      }
      if (HasThickness) {
        output.WriteRawTag(89);
        output.WriteDouble(Thickness);
      }
      if (color_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Color);
      }
      if (HasSceneTag) {
        output.WriteRawTag(106);
        output.WriteString(SceneTag);
      }
      if (dataCase_ == DataOneofCase.GradientLine) {
        output.WriteRawTag(114);
        output.WriteMessage(GradientLine);
      }
      if (dataCase_ == DataOneofCase.Scribble) {
        output.WriteRawTag(122);
        output.WriteMessage(Scribble);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (dataCase_ == DataOneofCase.Rectangle) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rectangle);
      }
      if (dataCase_ == DataOneofCase.FilledRectangle) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FilledRectangle);
      }
      if (dataCase_ == DataOneofCase.Oval) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Oval);
      }
      if (dataCase_ == DataOneofCase.FilledOval) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FilledOval);
      }
      if (dataCase_ == DataOneofCase.Point) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Point);
      }
      if (dataCase_ == DataOneofCase.Line) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Line);
      }
      if (dataCase_ == DataOneofCase.Arrow) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Arrow);
      }
      if (dataCase_ == DataOneofCase.Text) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (dataCase_ == DataOneofCase.RoundedRectangle) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoundedRectangle);
      }
      if (dataCase_ == DataOneofCase.FilledRoundedRectangle) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FilledRoundedRectangle);
      }
      if (dataCase_ == DataOneofCase.GradientLine) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GradientLine);
      }
      if (dataCase_ == DataOneofCase.Scribble) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Scribble);
      }
      if (HasThickness) {
        size += 1 + 8;
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (HasSceneTag) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneTag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RenderAnnotation other) {
      if (other == null) {
        return;
      }
      if (other.HasThickness) {
        Thickness = other.Thickness;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::Mediapipe.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.HasSceneTag) {
        SceneTag = other.SceneTag;
      }
      switch (other.DataCase) {
        case DataOneofCase.Rectangle:
          if (Rectangle == null) {
            Rectangle = new global::Mediapipe.RenderAnnotation.Types.Rectangle();
          }
          Rectangle.MergeFrom(other.Rectangle);
          break;
        case DataOneofCase.FilledRectangle:
          if (FilledRectangle == null) {
            FilledRectangle = new global::Mediapipe.RenderAnnotation.Types.FilledRectangle();
          }
          FilledRectangle.MergeFrom(other.FilledRectangle);
          break;
        case DataOneofCase.Oval:
          if (Oval == null) {
            Oval = new global::Mediapipe.RenderAnnotation.Types.Oval();
          }
          Oval.MergeFrom(other.Oval);
          break;
        case DataOneofCase.FilledOval:
          if (FilledOval == null) {
            FilledOval = new global::Mediapipe.RenderAnnotation.Types.FilledOval();
          }
          FilledOval.MergeFrom(other.FilledOval);
          break;
        case DataOneofCase.Point:
          if (Point == null) {
            Point = new global::Mediapipe.RenderAnnotation.Types.Point();
          }
          Point.MergeFrom(other.Point);
          break;
        case DataOneofCase.Line:
          if (Line == null) {
            Line = new global::Mediapipe.RenderAnnotation.Types.Line();
          }
          Line.MergeFrom(other.Line);
          break;
        case DataOneofCase.Arrow:
          if (Arrow == null) {
            Arrow = new global::Mediapipe.RenderAnnotation.Types.Arrow();
          }
          Arrow.MergeFrom(other.Arrow);
          break;
        case DataOneofCase.Text:
          if (Text == null) {
            Text = new global::Mediapipe.RenderAnnotation.Types.Text();
          }
          Text.MergeFrom(other.Text);
          break;
        case DataOneofCase.RoundedRectangle:
          if (RoundedRectangle == null) {
            RoundedRectangle = new global::Mediapipe.RenderAnnotation.Types.RoundedRectangle();
          }
          RoundedRectangle.MergeFrom(other.RoundedRectangle);
          break;
        case DataOneofCase.FilledRoundedRectangle:
          if (FilledRoundedRectangle == null) {
            FilledRoundedRectangle = new global::Mediapipe.RenderAnnotation.Types.FilledRoundedRectangle();
          }
          FilledRoundedRectangle.MergeFrom(other.FilledRoundedRectangle);
          break;
        case DataOneofCase.GradientLine:
          if (GradientLine == null) {
            GradientLine = new global::Mediapipe.RenderAnnotation.Types.GradientLine();
          }
          GradientLine.MergeFrom(other.GradientLine);
          break;
        case DataOneofCase.Scribble:
          if (Scribble == null) {
            Scribble = new global::Mediapipe.RenderAnnotation.Types.Scribble();
          }
          Scribble.MergeFrom(other.Scribble);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Mediapipe.RenderAnnotation.Types.Rectangle subBuilder = new global::Mediapipe.RenderAnnotation.Types.Rectangle();
            if (dataCase_ == DataOneofCase.Rectangle) {
              subBuilder.MergeFrom(Rectangle);
            }
            input.ReadMessage(subBuilder);
            Rectangle = subBuilder;
            break;
          }
          case 18: {
            global::Mediapipe.RenderAnnotation.Types.FilledRectangle subBuilder = new global::Mediapipe.RenderAnnotation.Types.FilledRectangle();
            if (dataCase_ == DataOneofCase.FilledRectangle) {
              subBuilder.MergeFrom(FilledRectangle);
            }
            input.ReadMessage(subBuilder);
            FilledRectangle = subBuilder;
            break;
          }
          case 26: {
            global::Mediapipe.RenderAnnotation.Types.Oval subBuilder = new global::Mediapipe.RenderAnnotation.Types.Oval();
            if (dataCase_ == DataOneofCase.Oval) {
              subBuilder.MergeFrom(Oval);
            }
            input.ReadMessage(subBuilder);
            Oval = subBuilder;
            break;
          }
          case 34: {
            global::Mediapipe.RenderAnnotation.Types.FilledOval subBuilder = new global::Mediapipe.RenderAnnotation.Types.FilledOval();
            if (dataCase_ == DataOneofCase.FilledOval) {
              subBuilder.MergeFrom(FilledOval);
            }
            input.ReadMessage(subBuilder);
            FilledOval = subBuilder;
            break;
          }
          case 42: {
            global::Mediapipe.RenderAnnotation.Types.Point subBuilder = new global::Mediapipe.RenderAnnotation.Types.Point();
            if (dataCase_ == DataOneofCase.Point) {
              subBuilder.MergeFrom(Point);
            }
            input.ReadMessage(subBuilder);
            Point = subBuilder;
            break;
          }
          case 50: {
            global::Mediapipe.RenderAnnotation.Types.Line subBuilder = new global::Mediapipe.RenderAnnotation.Types.Line();
            if (dataCase_ == DataOneofCase.Line) {
              subBuilder.MergeFrom(Line);
            }
            input.ReadMessage(subBuilder);
            Line = subBuilder;
            break;
          }
          case 58: {
            global::Mediapipe.RenderAnnotation.Types.Arrow subBuilder = new global::Mediapipe.RenderAnnotation.Types.Arrow();
            if (dataCase_ == DataOneofCase.Arrow) {
              subBuilder.MergeFrom(Arrow);
            }
            input.ReadMessage(subBuilder);
            Arrow = subBuilder;
            break;
          }
          case 66: {
            global::Mediapipe.RenderAnnotation.Types.Text subBuilder = new global::Mediapipe.RenderAnnotation.Types.Text();
            if (dataCase_ == DataOneofCase.Text) {
              subBuilder.MergeFrom(Text);
            }
            input.ReadMessage(subBuilder);
            Text = subBuilder;
            break;
          }
          case 74: {
            global::Mediapipe.RenderAnnotation.Types.RoundedRectangle subBuilder = new global::Mediapipe.RenderAnnotation.Types.RoundedRectangle();
            if (dataCase_ == DataOneofCase.RoundedRectangle) {
              subBuilder.MergeFrom(RoundedRectangle);
            }
            input.ReadMessage(subBuilder);
            RoundedRectangle = subBuilder;
            break;
          }
          case 82: {
            global::Mediapipe.RenderAnnotation.Types.FilledRoundedRectangle subBuilder = new global::Mediapipe.RenderAnnotation.Types.FilledRoundedRectangle();
            if (dataCase_ == DataOneofCase.FilledRoundedRectangle) {
              subBuilder.MergeFrom(FilledRoundedRectangle);
            }
            input.ReadMessage(subBuilder);
            FilledRoundedRectangle = subBuilder;
            break;
          }
          case 89: {
            Thickness = input.ReadDouble();
            break;
          }
          case 98: {
            if (color_ == null) {
              Color = new global::Mediapipe.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 106: {
            SceneTag = input.ReadString();
            break;
          }
          case 114: {
            global::Mediapipe.RenderAnnotation.Types.GradientLine subBuilder = new global::Mediapipe.RenderAnnotation.Types.GradientLine();
            if (dataCase_ == DataOneofCase.GradientLine) {
              subBuilder.MergeFrom(GradientLine);
            }
            input.ReadMessage(subBuilder);
            GradientLine = subBuilder;
            break;
          }
          case 122: {
            global::Mediapipe.RenderAnnotation.Types.Scribble subBuilder = new global::Mediapipe.RenderAnnotation.Types.Scribble();
            if (dataCase_ == DataOneofCase.Scribble) {
              subBuilder.MergeFrom(Scribble);
            }
            input.ReadMessage(subBuilder);
            Scribble = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Mediapipe.RenderAnnotation.Types.Rectangle subBuilder = new global::Mediapipe.RenderAnnotation.Types.Rectangle();
            if (dataCase_ == DataOneofCase.Rectangle) {
              subBuilder.MergeFrom(Rectangle);
            }
            input.ReadMessage(subBuilder);
            Rectangle = subBuilder;
            break;
          }
          case 18: {
            global::Mediapipe.RenderAnnotation.Types.FilledRectangle subBuilder = new global::Mediapipe.RenderAnnotation.Types.FilledRectangle();
            if (dataCase_ == DataOneofCase.FilledRectangle) {
              subBuilder.MergeFrom(FilledRectangle);
            }
            input.ReadMessage(subBuilder);
            FilledRectangle = subBuilder;
            break;
          }
          case 26: {
            global::Mediapipe.RenderAnnotation.Types.Oval subBuilder = new global::Mediapipe.RenderAnnotation.Types.Oval();
            if (dataCase_ == DataOneofCase.Oval) {
              subBuilder.MergeFrom(Oval);
            }
            input.ReadMessage(subBuilder);
            Oval = subBuilder;
            break;
          }
          case 34: {
            global::Mediapipe.RenderAnnotation.Types.FilledOval subBuilder = new global::Mediapipe.RenderAnnotation.Types.FilledOval();
            if (dataCase_ == DataOneofCase.FilledOval) {
              subBuilder.MergeFrom(FilledOval);
            }
            input.ReadMessage(subBuilder);
            FilledOval = subBuilder;
            break;
          }
          case 42: {
            global::Mediapipe.RenderAnnotation.Types.Point subBuilder = new global::Mediapipe.RenderAnnotation.Types.Point();
            if (dataCase_ == DataOneofCase.Point) {
              subBuilder.MergeFrom(Point);
            }
            input.ReadMessage(subBuilder);
            Point = subBuilder;
            break;
          }
          case 50: {
            global::Mediapipe.RenderAnnotation.Types.Line subBuilder = new global::Mediapipe.RenderAnnotation.Types.Line();
            if (dataCase_ == DataOneofCase.Line) {
              subBuilder.MergeFrom(Line);
            }
            input.ReadMessage(subBuilder);
            Line = subBuilder;
            break;
          }
          case 58: {
            global::Mediapipe.RenderAnnotation.Types.Arrow subBuilder = new global::Mediapipe.RenderAnnotation.Types.Arrow();
            if (dataCase_ == DataOneofCase.Arrow) {
              subBuilder.MergeFrom(Arrow);
            }
            input.ReadMessage(subBuilder);
            Arrow = subBuilder;
            break;
          }
          case 66: {
            global::Mediapipe.RenderAnnotation.Types.Text subBuilder = new global::Mediapipe.RenderAnnotation.Types.Text();
            if (dataCase_ == DataOneofCase.Text) {
              subBuilder.MergeFrom(Text);
            }
            input.ReadMessage(subBuilder);
            Text = subBuilder;
            break;
          }
          case 74: {
            global::Mediapipe.RenderAnnotation.Types.RoundedRectangle subBuilder = new global::Mediapipe.RenderAnnotation.Types.RoundedRectangle();
            if (dataCase_ == DataOneofCase.RoundedRectangle) {
              subBuilder.MergeFrom(RoundedRectangle);
            }
            input.ReadMessage(subBuilder);
            RoundedRectangle = subBuilder;
            break;
          }
          case 82: {
            global::Mediapipe.RenderAnnotation.Types.FilledRoundedRectangle subBuilder = new global::Mediapipe.RenderAnnotation.Types.FilledRoundedRectangle();
            if (dataCase_ == DataOneofCase.FilledRoundedRectangle) {
              subBuilder.MergeFrom(FilledRoundedRectangle);
            }
            input.ReadMessage(subBuilder);
            FilledRoundedRectangle = subBuilder;
            break;
          }
          case 89: {
            Thickness = input.ReadDouble();
            break;
          }
          case 98: {
            if (color_ == null) {
              Color = new global::Mediapipe.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 106: {
            SceneTag = input.ReadString();
            break;
          }
          case 114: {
            global::Mediapipe.RenderAnnotation.Types.GradientLine subBuilder = new global::Mediapipe.RenderAnnotation.Types.GradientLine();
            if (dataCase_ == DataOneofCase.GradientLine) {
              subBuilder.MergeFrom(GradientLine);
            }
            input.ReadMessage(subBuilder);
            GradientLine = subBuilder;
            break;
          }
          case 122: {
            global::Mediapipe.RenderAnnotation.Types.Scribble subBuilder = new global::Mediapipe.RenderAnnotation.Types.Scribble();
            if (dataCase_ == DataOneofCase.Scribble) {
              subBuilder.MergeFrom(Scribble);
            }
            input.ReadMessage(subBuilder);
            Scribble = subBuilder;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the RenderAnnotation message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class Rectangle : pb::IMessage<Rectangle>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Rectangle> _parser = new pb::MessageParser<Rectangle>(() => new Rectangle());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Rectangle> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mediapipe.RenderAnnotation.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rectangle() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rectangle(Rectangle other) : this() {
          _hasBits0 = other._hasBits0;
          left_ = other.left_;
          top_ = other.top_;
          right_ = other.right_;
          bottom_ = other.bottom_;
          normalized_ = other.normalized_;
          rotation_ = other.rotation_;
          topLeftThickness_ = other.topLeftThickness_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Rectangle Clone() {
          return new Rectangle(this);
        }

        /// <summary>Field number for the "left" field.</summary>
        public const int LeftFieldNumber = 1;
        private readonly static double LeftDefaultValue = 0D;

        private double left_;
        /// <summary>
        /// Left and top refer to the x and y coordinates of the top-left corner
        /// of rectangle, whereas right and bottom refer to the x and y coordinates
        /// of the bottom-right corner of rectangle.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Left {
          get { if ((_hasBits0 & 1) != 0) { return left_; } else { return LeftDefaultValue; } }
          set {
            _hasBits0 |= 1;
            left_ = value;
          }
        }
        /// <summary>Gets whether the "left" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasLeft {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "left" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearLeft() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "top" field.</summary>
        public const int TopFieldNumber = 2;
        private readonly static double TopDefaultValue = 0D;

        private double top_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Top {
          get { if ((_hasBits0 & 2) != 0) { return top_; } else { return TopDefaultValue; } }
          set {
            _hasBits0 |= 2;
            top_ = value;
          }
        }
        /// <summary>Gets whether the "top" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasTop {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "top" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearTop() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "right" field.</summary>
        public const int RightFieldNumber = 3;
        private readonly static double RightDefaultValue = 0D;

        private double right_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Right {
          get { if ((_hasBits0 & 4) != 0) { return right_; } else { return RightDefaultValue; } }
          set {
            _hasBits0 |= 4;
            right_ = value;
          }
        }
        /// <summary>Gets whether the "right" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasRight {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "right" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearRight() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "bottom" field.</summary>
        public const int BottomFieldNumber = 4;
        private readonly static double BottomDefaultValue = 0D;

        private double bottom_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Bottom {
          get { if ((_hasBits0 & 8) != 0) { return bottom_; } else { return BottomDefaultValue; } }
          set {
            _hasBits0 |= 8;
            bottom_ = value;
          }
        }
        /// <summary>Gets whether the "bottom" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasBottom {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "bottom" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearBottom() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "normalized" field.</summary>
        public const int NormalizedFieldNumber = 5;
        private readonly static bool NormalizedDefaultValue = false;

        private bool normalized_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Normalized {
          get { if ((_hasBits0 & 16) != 0) { return normalized_; } else { return NormalizedDefaultValue; } }
          set {
            _hasBits0 |= 16;
            normalized_ = value;
          }
        }
        /// <summary>Gets whether the "normalized" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasNormalized {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "normalized" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearNormalized() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "rotation" field.</summary>
        public const int RotationFieldNumber = 6;
        private readonly static double RotationDefaultValue = 0D;

        private double rotation_;
        /// <summary>
        /// Rotation in radians.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Rotation {
          get { if ((_hasBits0 & 32) != 0) { return rotation_; } else { return RotationDefaultValue; } }
          set {
            _hasBits0 |= 32;
            rotation_ = value;
          }
        }
        /// <summary>Gets whether the "rotation" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasRotation {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "rotation" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearRotation() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "top_left_thickness" field.</summary>
        public const int TopLeftThicknessFieldNumber = 7;
        private readonly static double TopLeftThicknessDefaultValue = 0D;

        private double topLeftThickness_;
        /// <summary>
        /// Radius of top left corner circle.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double TopLeftThickness {
          get { if ((_hasBits0 & 64) != 0) { return topLeftThickness_; } else { return TopLeftThicknessDefaultValue; } }
          set {
            _hasBits0 |= 64;
            topLeftThickness_ = value;
          }
        }
        /// <summary>Gets whether the "top_left_thickness" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasTopLeftThickness {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "top_left_thickness" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearTopLeftThickness() {
          _hasBits0 &= ~64;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Rectangle);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Rectangle other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Left, other.Left)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Top, other.Top)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Right, other.Right)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Bottom, other.Bottom)) return false;
          if (Normalized != other.Normalized) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TopLeftThickness, other.TopLeftThickness)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasLeft) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Left);
          if (HasTop) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Top);
          if (HasRight) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Right);
          if (HasBottom) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Bottom);
          if (HasNormalized) hash ^= Normalized.GetHashCode();
          if (HasRotation) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Rotation);
          if (HasTopLeftThickness) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TopLeftThickness);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasLeft) {
            output.WriteRawTag(9);
            output.WriteDouble(Left);
          }
          if (HasTop) {
            output.WriteRawTag(17);
            output.WriteDouble(Top);
          }
          if (HasRight) {
            output.WriteRawTag(25);
            output.WriteDouble(Right);
          }
          if (HasBottom) {
            output.WriteRawTag(33);
            output.WriteDouble(Bottom);
          }
          if (HasNormalized) {
            output.WriteRawTag(40);
            output.WriteBool(Normalized);
          }
          if (HasRotation) {
            output.WriteRawTag(49);
            output.WriteDouble(Rotation);
          }
          if (HasTopLeftThickness) {
            output.WriteRawTag(57);
            output.WriteDouble(TopLeftThickness);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasLeft) {
            output.WriteRawTag(9);
            output.WriteDouble(Left);
          }
          if (HasTop) {
            output.WriteRawTag(17);
            output.WriteDouble(Top);
          }
          if (HasRight) {
            output.WriteRawTag(25);
            output.WriteDouble(Right);
          }
          if (HasBottom) {
            output.WriteRawTag(33);
            output.WriteDouble(Bottom);
          }
          if (HasNormalized) {
            output.WriteRawTag(40);
            output.WriteBool(Normalized);
          }
          if (HasRotation) {
            output.WriteRawTag(49);
            output.WriteDouble(Rotation);
          }
          if (HasTopLeftThickness) {
            output.WriteRawTag(57);
            output.WriteDouble(TopLeftThickness);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasLeft) {
            size += 1 + 8;
          }
          if (HasTop) {
            size += 1 + 8;
          }
          if (HasRight) {
            size += 1 + 8;
          }
          if (HasBottom) {
            size += 1 + 8;
          }
          if (HasNormalized) {
            size += 1 + 1;
          }
          if (HasRotation) {
            size += 1 + 8;
          }
          if (HasTopLeftThickness) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Rectangle other) {
          if (other == null) {
            return;
          }
          if (other.HasLeft) {
            Left = other.Left;
          }
          if (other.HasTop) {
            Top = other.Top;
          }
          if (other.HasRight) {
            Right = other.Right;
          }
          if (other.HasBottom) {
            Bottom = other.Bottom;
          }
          if (other.HasNormalized) {
            Normalized = other.Normalized;
          }
          if (other.HasRotation) {
            Rotation = other.Rotation;
          }
          if (other.HasTopLeftThickness) {
            TopLeftThickness = other.TopLeftThickness;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Left = input.ReadDouble();
                break;
              }
              case 17: {
                Top = input.ReadDouble();
                break;
              }
              case 25: {
                Right = input.ReadDouble();
                break;
              }
              case 33: {
                Bottom = input.ReadDouble();
                break;
              }
              case 40: {
                Normalized = input.ReadBool();
                break;
              }
              case 49: {
                Rotation = input.ReadDouble();
                break;
              }
              case 57: {
                TopLeftThickness = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                Left = input.ReadDouble();
                break;
              }
              case 17: {
                Top = input.ReadDouble();
                break;
              }
              case 25: {
                Right = input.ReadDouble();
                break;
              }
              case 33: {
                Bottom = input.ReadDouble();
                break;
              }
              case 40: {
                Normalized = input.ReadBool();
                break;
              }
              case 49: {
                Rotation = input.ReadDouble();
                break;
              }
              case 57: {
                TopLeftThickness = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class FilledRectangle : pb::IMessage<FilledRectangle>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<FilledRectangle> _parser = new pb::MessageParser<FilledRectangle>(() => new FilledRectangle());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<FilledRectangle> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mediapipe.RenderAnnotation.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public FilledRectangle() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public FilledRectangle(FilledRectangle other) : this() {
          rectangle_ = other.rectangle_ != null ? other.rectangle_.Clone() : null;
          fillColor_ = other.fillColor_ != null ? other.fillColor_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public FilledRectangle Clone() {
          return new FilledRectangle(this);
        }

        /// <summary>Field number for the "rectangle" field.</summary>
        public const int RectangleFieldNumber = 1;
        private global::Mediapipe.RenderAnnotation.Types.Rectangle rectangle_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mediapipe.RenderAnnotation.Types.Rectangle Rectangle {
          get { return rectangle_; }
          set {
            rectangle_ = value;
          }
        }

        /// <summary>Field number for the "fill_color" field.</summary>
        public const int FillColorFieldNumber = 2;
        private global::Mediapipe.Color fillColor_;
        /// <summary>
        /// Color to fill in the rectangle.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mediapipe.Color FillColor {
          get { return fillColor_; }
          set {
            fillColor_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as FilledRectangle);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(FilledRectangle other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Rectangle, other.Rectangle)) return false;
          if (!object.Equals(FillColor, other.FillColor)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (rectangle_ != null) hash ^= Rectangle.GetHashCode();
          if (fillColor_ != null) hash ^= FillColor.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (rectangle_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Rectangle);
          }
          if (fillColor_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(FillColor);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (rectangle_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Rectangle);
          }
          if (fillColor_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(FillColor);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (rectangle_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rectangle);
          }
          if (fillColor_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FillColor);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(FilledRectangle other) {
          if (other == null) {
            return;
          }
          if (other.rectangle_ != null) {
            if (rectangle_ == null) {
              Rectangle = new global::Mediapipe.RenderAnnotation.Types.Rectangle();
            }
            Rectangle.MergeFrom(other.Rectangle);
          }
          if (other.fillColor_ != null) {
            if (fillColor_ == null) {
              FillColor = new global::Mediapipe.Color();
            }
            FillColor.MergeFrom(other.FillColor);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (rectangle_ == null) {
                  Rectangle = new global::Mediapipe.RenderAnnotation.Types.Rectangle();
                }
                input.ReadMessage(Rectangle);
                break;
              }
              case 18: {
                if (fillColor_ == null) {
                  FillColor = new global::Mediapipe.Color();
                }
                input.ReadMessage(FillColor);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (rectangle_ == null) {
                  Rectangle = new global::Mediapipe.RenderAnnotation.Types.Rectangle();
                }
                input.ReadMessage(Rectangle);
                break;
              }
              case 18: {
                if (fillColor_ == null) {
                  FillColor = new global::Mediapipe.Color();
                }
                input.ReadMessage(FillColor);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class RoundedRectangle : pb::IMessage<RoundedRectangle>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<RoundedRectangle> _parser = new pb::MessageParser<RoundedRectangle>(() => new RoundedRectangle());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<RoundedRectangle> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mediapipe.RenderAnnotation.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public RoundedRectangle() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public RoundedRectangle(RoundedRectangle other) : this() {
          _hasBits0 = other._hasBits0;
          rectangle_ = other.rectangle_ != null ? other.rectangle_.Clone() : null;
          cornerRadius_ = other.cornerRadius_;
          lineType_ = other.lineType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public RoundedRectangle Clone() {
          return new RoundedRectangle(this);
        }

        /// <summary>Field number for the "rectangle" field.</summary>
        public const int RectangleFieldNumber = 1;
        private global::Mediapipe.RenderAnnotation.Types.Rectangle rectangle_;
        /// <summary>
        /// A rounded rectangle is specified by a rectangle and a corner radius to
        /// round each corner by. A corner radius of 0 implies a standard non-rounded
        /// rectangle (i.e. sharp edges) but as the radius increases proportionally
        /// to the width and height of the overall rectangle size, the corners
        /// increasingly round.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mediapipe.RenderAnnotation.Types.Rectangle Rectangle {
          get { return rectangle_; }
          set {
            rectangle_ = value;
          }
        }

        /// <summary>Field number for the "corner_radius" field.</summary>
        public const int CornerRadiusFieldNumber = 2;
        private readonly static int CornerRadiusDefaultValue = 0;

        private int cornerRadius_;
        /// <summary>
        /// The radius of the round corners.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CornerRadius {
          get { if ((_hasBits0 & 1) != 0) { return cornerRadius_; } else { return CornerRadiusDefaultValue; } }
          set {
            _hasBits0 |= 1;
            cornerRadius_ = value;
          }
        }
        /// <summary>Gets whether the "corner_radius" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasCornerRadius {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "corner_radius" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearCornerRadius() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "line_type" field.</summary>
        public const int LineTypeFieldNumber = 3;
        private readonly static int LineTypeDefaultValue = 4;

        private int lineType_;
        /// <summary>
        /// Use one of the following:
        /// -1: a filled line (FILLED)
        ///  4: a 4-connected line (LINE_4)
        ///  8: a 8-connected line (LINE_8)
        /// 16: an antialiased line (LINE_AA).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int LineType {
          get { if ((_hasBits0 & 2) != 0) { return lineType_; } else { return LineTypeDefaultValue; } }
          set {
            _hasBits0 |= 2;
            lineType_ = value;
          }
        }
        /// <summary>Gets whether the "line_type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasLineType {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "line_type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearLineType() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as RoundedRectangle);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(RoundedRectangle other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Rectangle, other.Rectangle)) return false;
          if (CornerRadius != other.CornerRadius) return false;
          if (LineType != other.LineType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (rectangle_ != null) hash ^= Rectangle.GetHashCode();
          if (HasCornerRadius) hash ^= CornerRadius.GetHashCode();
          if (HasLineType) hash ^= LineType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (rectangle_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Rectangle);
          }
          if (HasCornerRadius) {
            output.WriteRawTag(16);
            output.WriteInt32(CornerRadius);
          }
          if (HasLineType) {
            output.WriteRawTag(24);
            output.WriteInt32(LineType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (rectangle_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Rectangle);
          }
          if (HasCornerRadius) {
            output.WriteRawTag(16);
            output.WriteInt32(CornerRadius);
          }
          if (HasLineType) {
            output.WriteRawTag(24);
            output.WriteInt32(LineType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (rectangle_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rectangle);
          }
          if (HasCornerRadius) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CornerRadius);
          }
          if (HasLineType) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(LineType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(RoundedRectangle other) {
          if (other == null) {
            return;
          }
          if (other.rectangle_ != null) {
            if (rectangle_ == null) {
              Rectangle = new global::Mediapipe.RenderAnnotation.Types.Rectangle();
            }
            Rectangle.MergeFrom(other.Rectangle);
          }
          if (other.HasCornerRadius) {
            CornerRadius = other.CornerRadius;
          }
          if (other.HasLineType) {
            LineType = other.LineType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (rectangle_ == null) {
                  Rectangle = new global::Mediapipe.RenderAnnotation.Types.Rectangle();
                }
                input.ReadMessage(Rectangle);
                break;
              }
              case 16: {
                CornerRadius = input.ReadInt32();
                break;
              }
              case 24: {
                LineType = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (rectangle_ == null) {
                  Rectangle = new global::Mediapipe.RenderAnnotation.Types.Rectangle();
                }
                input.ReadMessage(Rectangle);
                break;
              }
              case 16: {
                CornerRadius = input.ReadInt32();
                break;
              }
              case 24: {
                LineType = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class FilledRoundedRectangle : pb::IMessage<FilledRoundedRectangle>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<FilledRoundedRectangle> _parser = new pb::MessageParser<FilledRoundedRectangle>(() => new FilledRoundedRectangle());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<FilledRoundedRectangle> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mediapipe.RenderAnnotation.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public FilledRoundedRectangle() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public FilledRoundedRectangle(FilledRoundedRectangle other) : this() {
          roundedRectangle_ = other.roundedRectangle_ != null ? other.roundedRectangle_.Clone() : null;
          fillColor_ = other.fillColor_ != null ? other.fillColor_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public FilledRoundedRectangle Clone() {
          return new FilledRoundedRectangle(this);
        }

        /// <summary>Field number for the "rounded_rectangle" field.</summary>
        public const int RoundedRectangleFieldNumber = 1;
        private global::Mediapipe.RenderAnnotation.Types.RoundedRectangle roundedRectangle_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mediapipe.RenderAnnotation.Types.RoundedRectangle RoundedRectangle {
          get { return roundedRectangle_; }
          set {
            roundedRectangle_ = value;
          }
        }

        /// <summary>Field number for the "fill_color" field.</summary>
        public const int FillColorFieldNumber = 2;
        private global::Mediapipe.Color fillColor_;
        /// <summary>
        /// Color to fill in the rounded rectangle.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mediapipe.Color FillColor {
          get { return fillColor_; }
          set {
            fillColor_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as FilledRoundedRectangle);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(FilledRoundedRectangle other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(RoundedRectangle, other.RoundedRectangle)) return false;
          if (!object.Equals(FillColor, other.FillColor)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (roundedRectangle_ != null) hash ^= RoundedRectangle.GetHashCode();
          if (fillColor_ != null) hash ^= FillColor.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (roundedRectangle_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(RoundedRectangle);
          }
          if (fillColor_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(FillColor);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (roundedRectangle_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(RoundedRectangle);
          }
          if (fillColor_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(FillColor);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (roundedRectangle_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoundedRectangle);
          }
          if (fillColor_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FillColor);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(FilledRoundedRectangle other) {
          if (other == null) {
            return;
          }
          if (other.roundedRectangle_ != null) {
            if (roundedRectangle_ == null) {
              RoundedRectangle = new global::Mediapipe.RenderAnnotation.Types.RoundedRectangle();
            }
            RoundedRectangle.MergeFrom(other.RoundedRectangle);
          }
          if (other.fillColor_ != null) {
            if (fillColor_ == null) {
              FillColor = new global::Mediapipe.Color();
            }
            FillColor.MergeFrom(other.FillColor);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (roundedRectangle_ == null) {
                  RoundedRectangle = new global::Mediapipe.RenderAnnotation.Types.RoundedRectangle();
                }
                input.ReadMessage(RoundedRectangle);
                break;
              }
              case 18: {
                if (fillColor_ == null) {
                  FillColor = new global::Mediapipe.Color();
                }
                input.ReadMessage(FillColor);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (roundedRectangle_ == null) {
                  RoundedRectangle = new global::Mediapipe.RenderAnnotation.Types.RoundedRectangle();
                }
                input.ReadMessage(RoundedRectangle);
                break;
              }
              case 18: {
                if (fillColor_ == null) {
                  FillColor = new global::Mediapipe.Color();
                }
                input.ReadMessage(FillColor);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Oval : pb::IMessage<Oval>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Oval> _parser = new pb::MessageParser<Oval>(() => new Oval());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Oval> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mediapipe.RenderAnnotation.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Oval() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Oval(Oval other) : this() {
          rectangle_ = other.rectangle_ != null ? other.rectangle_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Oval Clone() {
          return new Oval(this);
        }

        /// <summary>Field number for the "rectangle" field.</summary>
        public const int RectangleFieldNumber = 1;
        private global::Mediapipe.RenderAnnotation.Types.Rectangle rectangle_;
        /// <summary>
        /// An oval is specified by the rectangle that encloses the oval. For
        /// example, a circle with center at (x,y) and radius r can be specified as a
        /// Rectangle with left = x - r, right = y - r, and width = height = 2 * r.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mediapipe.RenderAnnotation.Types.Rectangle Rectangle {
          get { return rectangle_; }
          set {
            rectangle_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Oval);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Oval other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Rectangle, other.Rectangle)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (rectangle_ != null) hash ^= Rectangle.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (rectangle_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Rectangle);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (rectangle_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Rectangle);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (rectangle_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rectangle);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Oval other) {
          if (other == null) {
            return;
          }
          if (other.rectangle_ != null) {
            if (rectangle_ == null) {
              Rectangle = new global::Mediapipe.RenderAnnotation.Types.Rectangle();
            }
            Rectangle.MergeFrom(other.Rectangle);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (rectangle_ == null) {
                  Rectangle = new global::Mediapipe.RenderAnnotation.Types.Rectangle();
                }
                input.ReadMessage(Rectangle);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (rectangle_ == null) {
                  Rectangle = new global::Mediapipe.RenderAnnotation.Types.Rectangle();
                }
                input.ReadMessage(Rectangle);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class FilledOval : pb::IMessage<FilledOval>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<FilledOval> _parser = new pb::MessageParser<FilledOval>(() => new FilledOval());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<FilledOval> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mediapipe.RenderAnnotation.Descriptor.NestedTypes[5]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public FilledOval() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public FilledOval(FilledOval other) : this() {
          oval_ = other.oval_ != null ? other.oval_.Clone() : null;
          fillColor_ = other.fillColor_ != null ? other.fillColor_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public FilledOval Clone() {
          return new FilledOval(this);
        }

        /// <summary>Field number for the "oval" field.</summary>
        public const int OvalFieldNumber = 1;
        private global::Mediapipe.RenderAnnotation.Types.Oval oval_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mediapipe.RenderAnnotation.Types.Oval Oval {
          get { return oval_; }
          set {
            oval_ = value;
          }
        }

        /// <summary>Field number for the "fill_color" field.</summary>
        public const int FillColorFieldNumber = 2;
        private global::Mediapipe.Color fillColor_;
        /// <summary>
        /// Color to fill in the oval.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mediapipe.Color FillColor {
          get { return fillColor_; }
          set {
            fillColor_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as FilledOval);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(FilledOval other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Oval, other.Oval)) return false;
          if (!object.Equals(FillColor, other.FillColor)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (oval_ != null) hash ^= Oval.GetHashCode();
          if (fillColor_ != null) hash ^= FillColor.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (oval_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Oval);
          }
          if (fillColor_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(FillColor);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (oval_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Oval);
          }
          if (fillColor_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(FillColor);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (oval_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Oval);
          }
          if (fillColor_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(FillColor);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(FilledOval other) {
          if (other == null) {
            return;
          }
          if (other.oval_ != null) {
            if (oval_ == null) {
              Oval = new global::Mediapipe.RenderAnnotation.Types.Oval();
            }
            Oval.MergeFrom(other.Oval);
          }
          if (other.fillColor_ != null) {
            if (fillColor_ == null) {
              FillColor = new global::Mediapipe.Color();
            }
            FillColor.MergeFrom(other.FillColor);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (oval_ == null) {
                  Oval = new global::Mediapipe.RenderAnnotation.Types.Oval();
                }
                input.ReadMessage(Oval);
                break;
              }
              case 18: {
                if (fillColor_ == null) {
                  FillColor = new global::Mediapipe.Color();
                }
                input.ReadMessage(FillColor);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (oval_ == null) {
                  Oval = new global::Mediapipe.RenderAnnotation.Types.Oval();
                }
                input.ReadMessage(Oval);
                break;
              }
              case 18: {
                if (fillColor_ == null) {
                  FillColor = new global::Mediapipe.Color();
                }
                input.ReadMessage(FillColor);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Point : pb::IMessage<Point>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Point> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mediapipe.RenderAnnotation.Descriptor.NestedTypes[6]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Point() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Point(Point other) : this() {
          _hasBits0 = other._hasBits0;
          x_ = other.x_;
          y_ = other.y_;
          normalized_ = other.normalized_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Point Clone() {
          return new Point(this);
        }

        /// <summary>Field number for the "x" field.</summary>
        public const int XFieldNumber = 1;
        private readonly static double XDefaultValue = 0D;

        private double x_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double X {
          get { if ((_hasBits0 & 1) != 0) { return x_; } else { return XDefaultValue; } }
          set {
            _hasBits0 |= 1;
            x_ = value;
          }
        }
        /// <summary>Gets whether the "x" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasX {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "x" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearX() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "y" field.</summary>
        public const int YFieldNumber = 2;
        private readonly static double YDefaultValue = 0D;

        private double y_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Y {
          get { if ((_hasBits0 & 2) != 0) { return y_; } else { return YDefaultValue; } }
          set {
            _hasBits0 |= 2;
            y_ = value;
          }
        }
        /// <summary>Gets whether the "y" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasY {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "y" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearY() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "normalized" field.</summary>
        public const int NormalizedFieldNumber = 3;
        private readonly static bool NormalizedDefaultValue = false;

        private bool normalized_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Normalized {
          get { if ((_hasBits0 & 4) != 0) { return normalized_; } else { return NormalizedDefaultValue; } }
          set {
            _hasBits0 |= 4;
            normalized_ = value;
          }
        }
        /// <summary>Gets whether the "normalized" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasNormalized {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "normalized" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearNormalized() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Point);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Point other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(X, other.X)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Y, other.Y)) return false;
          if (Normalized != other.Normalized) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasX) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(X);
          if (HasY) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Y);
          if (HasNormalized) hash ^= Normalized.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasX) {
            output.WriteRawTag(9);
            output.WriteDouble(X);
          }
          if (HasY) {
            output.WriteRawTag(17);
            output.WriteDouble(Y);
          }
          if (HasNormalized) {
            output.WriteRawTag(24);
            output.WriteBool(Normalized);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasX) {
            output.WriteRawTag(9);
            output.WriteDouble(X);
          }
          if (HasY) {
            output.WriteRawTag(17);
            output.WriteDouble(Y);
          }
          if (HasNormalized) {
            output.WriteRawTag(24);
            output.WriteBool(Normalized);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasX) {
            size += 1 + 8;
          }
          if (HasY) {
            size += 1 + 8;
          }
          if (HasNormalized) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Point other) {
          if (other == null) {
            return;
          }
          if (other.HasX) {
            X = other.X;
          }
          if (other.HasY) {
            Y = other.Y;
          }
          if (other.HasNormalized) {
            Normalized = other.Normalized;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                X = input.ReadDouble();
                break;
              }
              case 17: {
                Y = input.ReadDouble();
                break;
              }
              case 24: {
                Normalized = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                X = input.ReadDouble();
                break;
              }
              case 17: {
                Y = input.ReadDouble();
                break;
              }
              case 24: {
                Normalized = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Line : pb::IMessage<Line>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Line> _parser = new pb::MessageParser<Line>(() => new Line());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Line> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mediapipe.RenderAnnotation.Descriptor.NestedTypes[7]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Line() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Line(Line other) : this() {
          _hasBits0 = other._hasBits0;
          xStart_ = other.xStart_;
          yStart_ = other.yStart_;
          xEnd_ = other.xEnd_;
          yEnd_ = other.yEnd_;
          normalized_ = other.normalized_;
          lineType_ = other.lineType_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Line Clone() {
          return new Line(this);
        }

        /// <summary>Field number for the "x_start" field.</summary>
        public const int XStartFieldNumber = 1;
        private readonly static double XStartDefaultValue = 0D;

        private double xStart_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double XStart {
          get { if ((_hasBits0 & 1) != 0) { return xStart_; } else { return XStartDefaultValue; } }
          set {
            _hasBits0 |= 1;
            xStart_ = value;
          }
        }
        /// <summary>Gets whether the "x_start" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasXStart {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "x_start" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearXStart() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "y_start" field.</summary>
        public const int YStartFieldNumber = 2;
        private readonly static double YStartDefaultValue = 0D;

        private double yStart_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double YStart {
          get { if ((_hasBits0 & 2) != 0) { return yStart_; } else { return YStartDefaultValue; } }
          set {
            _hasBits0 |= 2;
            yStart_ = value;
          }
        }
        /// <summary>Gets whether the "y_start" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasYStart {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "y_start" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearYStart() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "x_end" field.</summary>
        public const int XEndFieldNumber = 3;
        private readonly static double XEndDefaultValue = 0D;

        private double xEnd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double XEnd {
          get { if ((_hasBits0 & 4) != 0) { return xEnd_; } else { return XEndDefaultValue; } }
          set {
            _hasBits0 |= 4;
            xEnd_ = value;
          }
        }
        /// <summary>Gets whether the "x_end" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasXEnd {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "x_end" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearXEnd() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "y_end" field.</summary>
        public const int YEndFieldNumber = 4;
        private readonly static double YEndDefaultValue = 0D;

        private double yEnd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double YEnd {
          get { if ((_hasBits0 & 8) != 0) { return yEnd_; } else { return YEndDefaultValue; } }
          set {
            _hasBits0 |= 8;
            yEnd_ = value;
          }
        }
        /// <summary>Gets whether the "y_end" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasYEnd {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "y_end" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearYEnd() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "normalized" field.</summary>
        public const int NormalizedFieldNumber = 5;
        private readonly static bool NormalizedDefaultValue = false;

        private bool normalized_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Normalized {
          get { if ((_hasBits0 & 16) != 0) { return normalized_; } else { return NormalizedDefaultValue; } }
          set {
            _hasBits0 |= 16;
            normalized_ = value;
          }
        }
        /// <summary>Gets whether the "normalized" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasNormalized {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "normalized" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearNormalized() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "line_type" field.</summary>
        public const int LineTypeFieldNumber = 6;
        private readonly static global::Mediapipe.RenderAnnotation.Types.Line.Types.LineType LineTypeDefaultValue = global::Mediapipe.RenderAnnotation.Types.Line.Types.LineType.Solid;

        private global::Mediapipe.RenderAnnotation.Types.Line.Types.LineType lineType_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mediapipe.RenderAnnotation.Types.Line.Types.LineType LineType {
          get { if ((_hasBits0 & 32) != 0) { return lineType_; } else { return LineTypeDefaultValue; } }
          set {
            _hasBits0 |= 32;
            lineType_ = value;
          }
        }
        /// <summary>Gets whether the "line_type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasLineType {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "line_type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearLineType() {
          _hasBits0 &= ~32;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Line);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Line other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(XStart, other.XStart)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(YStart, other.YStart)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(XEnd, other.XEnd)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(YEnd, other.YEnd)) return false;
          if (Normalized != other.Normalized) return false;
          if (LineType != other.LineType) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasXStart) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(XStart);
          if (HasYStart) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(YStart);
          if (HasXEnd) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(XEnd);
          if (HasYEnd) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(YEnd);
          if (HasNormalized) hash ^= Normalized.GetHashCode();
          if (HasLineType) hash ^= LineType.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasXStart) {
            output.WriteRawTag(9);
            output.WriteDouble(XStart);
          }
          if (HasYStart) {
            output.WriteRawTag(17);
            output.WriteDouble(YStart);
          }
          if (HasXEnd) {
            output.WriteRawTag(25);
            output.WriteDouble(XEnd);
          }
          if (HasYEnd) {
            output.WriteRawTag(33);
            output.WriteDouble(YEnd);
          }
          if (HasNormalized) {
            output.WriteRawTag(40);
            output.WriteBool(Normalized);
          }
          if (HasLineType) {
            output.WriteRawTag(48);
            output.WriteEnum((int) LineType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasXStart) {
            output.WriteRawTag(9);
            output.WriteDouble(XStart);
          }
          if (HasYStart) {
            output.WriteRawTag(17);
            output.WriteDouble(YStart);
          }
          if (HasXEnd) {
            output.WriteRawTag(25);
            output.WriteDouble(XEnd);
          }
          if (HasYEnd) {
            output.WriteRawTag(33);
            output.WriteDouble(YEnd);
          }
          if (HasNormalized) {
            output.WriteRawTag(40);
            output.WriteBool(Normalized);
          }
          if (HasLineType) {
            output.WriteRawTag(48);
            output.WriteEnum((int) LineType);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasXStart) {
            size += 1 + 8;
          }
          if (HasYStart) {
            size += 1 + 8;
          }
          if (HasXEnd) {
            size += 1 + 8;
          }
          if (HasYEnd) {
            size += 1 + 8;
          }
          if (HasNormalized) {
            size += 1 + 1;
          }
          if (HasLineType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LineType);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Line other) {
          if (other == null) {
            return;
          }
          if (other.HasXStart) {
            XStart = other.XStart;
          }
          if (other.HasYStart) {
            YStart = other.YStart;
          }
          if (other.HasXEnd) {
            XEnd = other.XEnd;
          }
          if (other.HasYEnd) {
            YEnd = other.YEnd;
          }
          if (other.HasNormalized) {
            Normalized = other.Normalized;
          }
          if (other.HasLineType) {
            LineType = other.LineType;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                XStart = input.ReadDouble();
                break;
              }
              case 17: {
                YStart = input.ReadDouble();
                break;
              }
              case 25: {
                XEnd = input.ReadDouble();
                break;
              }
              case 33: {
                YEnd = input.ReadDouble();
                break;
              }
              case 40: {
                Normalized = input.ReadBool();
                break;
              }
              case 48: {
                LineType = (global::Mediapipe.RenderAnnotation.Types.Line.Types.LineType) input.ReadEnum();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                XStart = input.ReadDouble();
                break;
              }
              case 17: {
                YStart = input.ReadDouble();
                break;
              }
              case 25: {
                XEnd = input.ReadDouble();
                break;
              }
              case 33: {
                YEnd = input.ReadDouble();
                break;
              }
              case 40: {
                Normalized = input.ReadBool();
                break;
              }
              case 48: {
                LineType = (global::Mediapipe.RenderAnnotation.Types.Line.Types.LineType) input.ReadEnum();
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Line message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          public enum LineType {
            [pbr::OriginalName("UNKNOWN")] Unknown = 0,
            [pbr::OriginalName("SOLID")] Solid = 1,
            [pbr::OriginalName("DASHED")] Dashed = 2,
          }

        }
        #endregion

      }

      public sealed partial class GradientLine : pb::IMessage<GradientLine>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<GradientLine> _parser = new pb::MessageParser<GradientLine>(() => new GradientLine());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<GradientLine> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mediapipe.RenderAnnotation.Descriptor.NestedTypes[8]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public GradientLine() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public GradientLine(GradientLine other) : this() {
          _hasBits0 = other._hasBits0;
          xStart_ = other.xStart_;
          yStart_ = other.yStart_;
          xEnd_ = other.xEnd_;
          yEnd_ = other.yEnd_;
          normalized_ = other.normalized_;
          color1_ = other.color1_ != null ? other.color1_.Clone() : null;
          color2_ = other.color2_ != null ? other.color2_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public GradientLine Clone() {
          return new GradientLine(this);
        }

        /// <summary>Field number for the "x_start" field.</summary>
        public const int XStartFieldNumber = 1;
        private readonly static double XStartDefaultValue = 0D;

        private double xStart_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double XStart {
          get { if ((_hasBits0 & 1) != 0) { return xStart_; } else { return XStartDefaultValue; } }
          set {
            _hasBits0 |= 1;
            xStart_ = value;
          }
        }
        /// <summary>Gets whether the "x_start" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasXStart {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "x_start" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearXStart() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "y_start" field.</summary>
        public const int YStartFieldNumber = 2;
        private readonly static double YStartDefaultValue = 0D;

        private double yStart_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double YStart {
          get { if ((_hasBits0 & 2) != 0) { return yStart_; } else { return YStartDefaultValue; } }
          set {
            _hasBits0 |= 2;
            yStart_ = value;
          }
        }
        /// <summary>Gets whether the "y_start" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasYStart {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "y_start" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearYStart() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "x_end" field.</summary>
        public const int XEndFieldNumber = 3;
        private readonly static double XEndDefaultValue = 0D;

        private double xEnd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double XEnd {
          get { if ((_hasBits0 & 4) != 0) { return xEnd_; } else { return XEndDefaultValue; } }
          set {
            _hasBits0 |= 4;
            xEnd_ = value;
          }
        }
        /// <summary>Gets whether the "x_end" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasXEnd {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "x_end" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearXEnd() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "y_end" field.</summary>
        public const int YEndFieldNumber = 4;
        private readonly static double YEndDefaultValue = 0D;

        private double yEnd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double YEnd {
          get { if ((_hasBits0 & 8) != 0) { return yEnd_; } else { return YEndDefaultValue; } }
          set {
            _hasBits0 |= 8;
            yEnd_ = value;
          }
        }
        /// <summary>Gets whether the "y_end" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasYEnd {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "y_end" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearYEnd() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "normalized" field.</summary>
        public const int NormalizedFieldNumber = 5;
        private readonly static bool NormalizedDefaultValue = false;

        private bool normalized_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Normalized {
          get { if ((_hasBits0 & 16) != 0) { return normalized_; } else { return NormalizedDefaultValue; } }
          set {
            _hasBits0 |= 16;
            normalized_ = value;
          }
        }
        /// <summary>Gets whether the "normalized" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasNormalized {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "normalized" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearNormalized() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "color1" field.</summary>
        public const int Color1FieldNumber = 6;
        private global::Mediapipe.Color color1_;
        /// <summary>
        /// Linearly interpolate between color1 and color2 along the line.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mediapipe.Color Color1 {
          get { return color1_; }
          set {
            color1_ = value;
          }
        }

        /// <summary>Field number for the "color2" field.</summary>
        public const int Color2FieldNumber = 7;
        private global::Mediapipe.Color color2_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mediapipe.Color Color2 {
          get { return color2_; }
          set {
            color2_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as GradientLine);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(GradientLine other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(XStart, other.XStart)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(YStart, other.YStart)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(XEnd, other.XEnd)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(YEnd, other.YEnd)) return false;
          if (Normalized != other.Normalized) return false;
          if (!object.Equals(Color1, other.Color1)) return false;
          if (!object.Equals(Color2, other.Color2)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasXStart) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(XStart);
          if (HasYStart) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(YStart);
          if (HasXEnd) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(XEnd);
          if (HasYEnd) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(YEnd);
          if (HasNormalized) hash ^= Normalized.GetHashCode();
          if (color1_ != null) hash ^= Color1.GetHashCode();
          if (color2_ != null) hash ^= Color2.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasXStart) {
            output.WriteRawTag(9);
            output.WriteDouble(XStart);
          }
          if (HasYStart) {
            output.WriteRawTag(17);
            output.WriteDouble(YStart);
          }
          if (HasXEnd) {
            output.WriteRawTag(25);
            output.WriteDouble(XEnd);
          }
          if (HasYEnd) {
            output.WriteRawTag(33);
            output.WriteDouble(YEnd);
          }
          if (HasNormalized) {
            output.WriteRawTag(40);
            output.WriteBool(Normalized);
          }
          if (color1_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Color1);
          }
          if (color2_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(Color2);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasXStart) {
            output.WriteRawTag(9);
            output.WriteDouble(XStart);
          }
          if (HasYStart) {
            output.WriteRawTag(17);
            output.WriteDouble(YStart);
          }
          if (HasXEnd) {
            output.WriteRawTag(25);
            output.WriteDouble(XEnd);
          }
          if (HasYEnd) {
            output.WriteRawTag(33);
            output.WriteDouble(YEnd);
          }
          if (HasNormalized) {
            output.WriteRawTag(40);
            output.WriteBool(Normalized);
          }
          if (color1_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Color1);
          }
          if (color2_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(Color2);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasXStart) {
            size += 1 + 8;
          }
          if (HasYStart) {
            size += 1 + 8;
          }
          if (HasXEnd) {
            size += 1 + 8;
          }
          if (HasYEnd) {
            size += 1 + 8;
          }
          if (HasNormalized) {
            size += 1 + 1;
          }
          if (color1_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color1);
          }
          if (color2_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color2);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(GradientLine other) {
          if (other == null) {
            return;
          }
          if (other.HasXStart) {
            XStart = other.XStart;
          }
          if (other.HasYStart) {
            YStart = other.YStart;
          }
          if (other.HasXEnd) {
            XEnd = other.XEnd;
          }
          if (other.HasYEnd) {
            YEnd = other.YEnd;
          }
          if (other.HasNormalized) {
            Normalized = other.Normalized;
          }
          if (other.color1_ != null) {
            if (color1_ == null) {
              Color1 = new global::Mediapipe.Color();
            }
            Color1.MergeFrom(other.Color1);
          }
          if (other.color2_ != null) {
            if (color2_ == null) {
              Color2 = new global::Mediapipe.Color();
            }
            Color2.MergeFrom(other.Color2);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                XStart = input.ReadDouble();
                break;
              }
              case 17: {
                YStart = input.ReadDouble();
                break;
              }
              case 25: {
                XEnd = input.ReadDouble();
                break;
              }
              case 33: {
                YEnd = input.ReadDouble();
                break;
              }
              case 40: {
                Normalized = input.ReadBool();
                break;
              }
              case 50: {
                if (color1_ == null) {
                  Color1 = new global::Mediapipe.Color();
                }
                input.ReadMessage(Color1);
                break;
              }
              case 58: {
                if (color2_ == null) {
                  Color2 = new global::Mediapipe.Color();
                }
                input.ReadMessage(Color2);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                XStart = input.ReadDouble();
                break;
              }
              case 17: {
                YStart = input.ReadDouble();
                break;
              }
              case 25: {
                XEnd = input.ReadDouble();
                break;
              }
              case 33: {
                YEnd = input.ReadDouble();
                break;
              }
              case 40: {
                Normalized = input.ReadBool();
                break;
              }
              case 50: {
                if (color1_ == null) {
                  Color1 = new global::Mediapipe.Color();
                }
                input.ReadMessage(Color1);
                break;
              }
              case 58: {
                if (color2_ == null) {
                  Color2 = new global::Mediapipe.Color();
                }
                input.ReadMessage(Color2);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Scribble : pb::IMessage<Scribble>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Scribble> _parser = new pb::MessageParser<Scribble>(() => new Scribble());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Scribble> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mediapipe.RenderAnnotation.Descriptor.NestedTypes[9]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Scribble() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Scribble(Scribble other) : this() {
          point_ = other.point_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Scribble Clone() {
          return new Scribble(this);
        }

        /// <summary>Field number for the "point" field.</summary>
        public const int PointFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Mediapipe.RenderAnnotation.Types.Point> _repeated_point_codec
            = pb::FieldCodec.ForMessage(10, global::Mediapipe.RenderAnnotation.Types.Point.Parser);
        private readonly pbc::RepeatedField<global::Mediapipe.RenderAnnotation.Types.Point> point_ = new pbc::RepeatedField<global::Mediapipe.RenderAnnotation.Types.Point>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Mediapipe.RenderAnnotation.Types.Point> Point {
          get { return point_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Scribble);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Scribble other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!point_.Equals(other.point_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= point_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          point_.WriteTo(output, _repeated_point_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          point_.WriteTo(ref output, _repeated_point_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          size += point_.CalculateSize(_repeated_point_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Scribble other) {
          if (other == null) {
            return;
          }
          point_.Add(other.point_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                point_.AddEntriesFrom(input, _repeated_point_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                point_.AddEntriesFrom(ref input, _repeated_point_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Arrow : pb::IMessage<Arrow>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Arrow> _parser = new pb::MessageParser<Arrow>(() => new Arrow());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Arrow> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mediapipe.RenderAnnotation.Descriptor.NestedTypes[10]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Arrow() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Arrow(Arrow other) : this() {
          _hasBits0 = other._hasBits0;
          xStart_ = other.xStart_;
          yStart_ = other.yStart_;
          xEnd_ = other.xEnd_;
          yEnd_ = other.yEnd_;
          normalized_ = other.normalized_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Arrow Clone() {
          return new Arrow(this);
        }

        /// <summary>Field number for the "x_start" field.</summary>
        public const int XStartFieldNumber = 1;
        private readonly static double XStartDefaultValue = 0D;

        private double xStart_;
        /// <summary>
        /// The arrow head will be drawn at (x_end, y_end).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double XStart {
          get { if ((_hasBits0 & 1) != 0) { return xStart_; } else { return XStartDefaultValue; } }
          set {
            _hasBits0 |= 1;
            xStart_ = value;
          }
        }
        /// <summary>Gets whether the "x_start" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasXStart {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "x_start" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearXStart() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "y_start" field.</summary>
        public const int YStartFieldNumber = 2;
        private readonly static double YStartDefaultValue = 0D;

        private double yStart_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double YStart {
          get { if ((_hasBits0 & 2) != 0) { return yStart_; } else { return YStartDefaultValue; } }
          set {
            _hasBits0 |= 2;
            yStart_ = value;
          }
        }
        /// <summary>Gets whether the "y_start" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasYStart {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "y_start" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearYStart() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "x_end" field.</summary>
        public const int XEndFieldNumber = 3;
        private readonly static double XEndDefaultValue = 0D;

        private double xEnd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double XEnd {
          get { if ((_hasBits0 & 4) != 0) { return xEnd_; } else { return XEndDefaultValue; } }
          set {
            _hasBits0 |= 4;
            xEnd_ = value;
          }
        }
        /// <summary>Gets whether the "x_end" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasXEnd {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "x_end" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearXEnd() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "y_end" field.</summary>
        public const int YEndFieldNumber = 4;
        private readonly static double YEndDefaultValue = 0D;

        private double yEnd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double YEnd {
          get { if ((_hasBits0 & 8) != 0) { return yEnd_; } else { return YEndDefaultValue; } }
          set {
            _hasBits0 |= 8;
            yEnd_ = value;
          }
        }
        /// <summary>Gets whether the "y_end" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasYEnd {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "y_end" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearYEnd() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "normalized" field.</summary>
        public const int NormalizedFieldNumber = 5;
        private readonly static bool NormalizedDefaultValue = false;

        private bool normalized_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Normalized {
          get { if ((_hasBits0 & 16) != 0) { return normalized_; } else { return NormalizedDefaultValue; } }
          set {
            _hasBits0 |= 16;
            normalized_ = value;
          }
        }
        /// <summary>Gets whether the "normalized" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasNormalized {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "normalized" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearNormalized() {
          _hasBits0 &= ~16;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Arrow);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Arrow other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(XStart, other.XStart)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(YStart, other.YStart)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(XEnd, other.XEnd)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(YEnd, other.YEnd)) return false;
          if (Normalized != other.Normalized) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasXStart) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(XStart);
          if (HasYStart) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(YStart);
          if (HasXEnd) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(XEnd);
          if (HasYEnd) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(YEnd);
          if (HasNormalized) hash ^= Normalized.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasXStart) {
            output.WriteRawTag(9);
            output.WriteDouble(XStart);
          }
          if (HasYStart) {
            output.WriteRawTag(17);
            output.WriteDouble(YStart);
          }
          if (HasXEnd) {
            output.WriteRawTag(25);
            output.WriteDouble(XEnd);
          }
          if (HasYEnd) {
            output.WriteRawTag(33);
            output.WriteDouble(YEnd);
          }
          if (HasNormalized) {
            output.WriteRawTag(40);
            output.WriteBool(Normalized);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasXStart) {
            output.WriteRawTag(9);
            output.WriteDouble(XStart);
          }
          if (HasYStart) {
            output.WriteRawTag(17);
            output.WriteDouble(YStart);
          }
          if (HasXEnd) {
            output.WriteRawTag(25);
            output.WriteDouble(XEnd);
          }
          if (HasYEnd) {
            output.WriteRawTag(33);
            output.WriteDouble(YEnd);
          }
          if (HasNormalized) {
            output.WriteRawTag(40);
            output.WriteBool(Normalized);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasXStart) {
            size += 1 + 8;
          }
          if (HasYStart) {
            size += 1 + 8;
          }
          if (HasXEnd) {
            size += 1 + 8;
          }
          if (HasYEnd) {
            size += 1 + 8;
          }
          if (HasNormalized) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Arrow other) {
          if (other == null) {
            return;
          }
          if (other.HasXStart) {
            XStart = other.XStart;
          }
          if (other.HasYStart) {
            YStart = other.YStart;
          }
          if (other.HasXEnd) {
            XEnd = other.XEnd;
          }
          if (other.HasYEnd) {
            YEnd = other.YEnd;
          }
          if (other.HasNormalized) {
            Normalized = other.Normalized;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                XStart = input.ReadDouble();
                break;
              }
              case 17: {
                YStart = input.ReadDouble();
                break;
              }
              case 25: {
                XEnd = input.ReadDouble();
                break;
              }
              case 33: {
                YEnd = input.ReadDouble();
                break;
              }
              case 40: {
                Normalized = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                XStart = input.ReadDouble();
                break;
              }
              case 17: {
                YStart = input.ReadDouble();
                break;
              }
              case 25: {
                XEnd = input.ReadDouble();
                break;
              }
              case 33: {
                YEnd = input.ReadDouble();
                break;
              }
              case 40: {
                Normalized = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

      public sealed partial class Text : pb::IMessage<Text>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Text> _parser = new pb::MessageParser<Text>(() => new Text());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Text> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mediapipe.RenderAnnotation.Descriptor.NestedTypes[11]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Text() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Text(Text other) : this() {
          _hasBits0 = other._hasBits0;
          displayText_ = other.displayText_;
          left_ = other.left_;
          baseline_ = other.baseline_;
          fontHeight_ = other.fontHeight_;
          normalized_ = other.normalized_;
          fontFace_ = other.fontFace_;
          centerHorizontally_ = other.centerHorizontally_;
          centerVertically_ = other.centerVertically_;
          outlineThickness_ = other.outlineThickness_;
          outlineColor_ = other.outlineColor_ != null ? other.outlineColor_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Text Clone() {
          return new Text(this);
        }

        /// <summary>Field number for the "display_text" field.</summary>
        public const int DisplayTextFieldNumber = 1;
        private readonly static string DisplayTextDefaultValue = "";

        private string displayText_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string DisplayText {
          get { return displayText_ ?? DisplayTextDefaultValue; }
          set {
            displayText_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "display_text" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasDisplayText {
          get { return displayText_ != null; }
        }
        /// <summary>Clears the value of the "display_text" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearDisplayText() {
          displayText_ = null;
        }

        /// <summary>Field number for the "left" field.</summary>
        public const int LeftFieldNumber = 2;
        private readonly static double LeftDefaultValue = 0D;

        private double left_;
        /// <summary>
        /// The location to render the text. Left and baseline refer to the x and y
        /// coordinates of the start location of text respectively.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Left {
          get { if ((_hasBits0 & 1) != 0) { return left_; } else { return LeftDefaultValue; } }
          set {
            _hasBits0 |= 1;
            left_ = value;
          }
        }
        /// <summary>Gets whether the "left" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasLeft {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "left" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearLeft() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "baseline" field.</summary>
        public const int BaselineFieldNumber = 3;
        private readonly static double BaselineDefaultValue = 0D;

        private double baseline_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Baseline {
          get { if ((_hasBits0 & 2) != 0) { return baseline_; } else { return BaselineDefaultValue; } }
          set {
            _hasBits0 |= 2;
            baseline_ = value;
          }
        }
        /// <summary>Gets whether the "baseline" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasBaseline {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "baseline" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearBaseline() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "font_height" field.</summary>
        public const int FontHeightFieldNumber = 4;
        private readonly static double FontHeightDefaultValue = 8D;

        private double fontHeight_;
        /// <summary>
        /// The height of the text from top to baseline. When normalized=true, font
        /// height is specified wrt the image height.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double FontHeight {
          get { if ((_hasBits0 & 4) != 0) { return fontHeight_; } else { return FontHeightDefaultValue; } }
          set {
            _hasBits0 |= 4;
            fontHeight_ = value;
          }
        }
        /// <summary>Gets whether the "font_height" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasFontHeight {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "font_height" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearFontHeight() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "normalized" field.</summary>
        public const int NormalizedFieldNumber = 5;
        private readonly static bool NormalizedDefaultValue = false;

        private bool normalized_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Normalized {
          get { if ((_hasBits0 & 8) != 0) { return normalized_; } else { return NormalizedDefaultValue; } }
          set {
            _hasBits0 |= 8;
            normalized_ = value;
          }
        }
        /// <summary>Gets whether the "normalized" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasNormalized {
          get { return (_hasBits0 & 8) != 0; }
        }
        /// <summary>Clears the value of the "normalized" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearNormalized() {
          _hasBits0 &= ~8;
        }

        /// <summary>Field number for the "font_face" field.</summary>
        public const int FontFaceFieldNumber = 6;
        private readonly static int FontFaceDefaultValue = 0;

        private int fontFace_;
        /// <summary>
        /// Specifies the font for the text. Font must be one of the following from
        /// OpenCV:
        /// cv::FONT_HERSHEY_SIMPLEX (0)
        /// cv::FONT_HERSHEY_PLAIN (1)
        /// cv::FONT_HERSHEY_DUPLEX (2)
        /// cv::FONT_HERSHEY_COMPLEX (3)
        /// cv::FONT_HERSHEY_TRIPLEX (4)
        /// cv::FONT_HERSHEY_COMPLEX_SMALL (5)
        /// cv::FONT_HERSHEY_SCRIPT_SIMPLEX (6)
        /// cv::FONT_HERSHEY_SCRIPT_COMPLEX (7)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int FontFace {
          get { if ((_hasBits0 & 16) != 0) { return fontFace_; } else { return FontFaceDefaultValue; } }
          set {
            _hasBits0 |= 16;
            fontFace_ = value;
          }
        }
        /// <summary>Gets whether the "font_face" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasFontFace {
          get { return (_hasBits0 & 16) != 0; }
        }
        /// <summary>Clears the value of the "font_face" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearFontFace() {
          _hasBits0 &= ~16;
        }

        /// <summary>Field number for the "center_horizontally" field.</summary>
        public const int CenterHorizontallyFieldNumber = 7;
        private readonly static bool CenterHorizontallyDefaultValue = false;

        private bool centerHorizontally_;
        /// <summary>
        /// Options to center text around the anchor point (left, baseline) by
        /// taking into account font shape, size and text length (e.g.,
        /// [left, baseline] represent  [center_x, center_y].
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool CenterHorizontally {
          get { if ((_hasBits0 & 32) != 0) { return centerHorizontally_; } else { return CenterHorizontallyDefaultValue; } }
          set {
            _hasBits0 |= 32;
            centerHorizontally_ = value;
          }
        }
        /// <summary>Gets whether the "center_horizontally" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasCenterHorizontally {
          get { return (_hasBits0 & 32) != 0; }
        }
        /// <summary>Clears the value of the "center_horizontally" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearCenterHorizontally() {
          _hasBits0 &= ~32;
        }

        /// <summary>Field number for the "center_vertically" field.</summary>
        public const int CenterVerticallyFieldNumber = 8;
        private readonly static bool CenterVerticallyDefaultValue = false;

        private bool centerVertically_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool CenterVertically {
          get { if ((_hasBits0 & 64) != 0) { return centerVertically_; } else { return CenterVerticallyDefaultValue; } }
          set {
            _hasBits0 |= 64;
            centerVertically_ = value;
          }
        }
        /// <summary>Gets whether the "center_vertically" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasCenterVertically {
          get { return (_hasBits0 & 64) != 0; }
        }
        /// <summary>Clears the value of the "center_vertically" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearCenterVertically() {
          _hasBits0 &= ~64;
        }

        /// <summary>Field number for the "outline_thickness" field.</summary>
        public const int OutlineThicknessFieldNumber = 11;
        private readonly static double OutlineThicknessDefaultValue = 0D;

        private double outlineThickness_;
        /// <summary>
        /// Thickness of the text outline.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double OutlineThickness {
          get { if ((_hasBits0 & 128) != 0) { return outlineThickness_; } else { return OutlineThicknessDefaultValue; } }
          set {
            _hasBits0 |= 128;
            outlineThickness_ = value;
          }
        }
        /// <summary>Gets whether the "outline_thickness" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasOutlineThickness {
          get { return (_hasBits0 & 128) != 0; }
        }
        /// <summary>Clears the value of the "outline_thickness" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearOutlineThickness() {
          _hasBits0 &= ~128;
        }

        /// <summary>Field number for the "outline_color" field.</summary>
        public const int OutlineColorFieldNumber = 12;
        private global::Mediapipe.Color outlineColor_;
        /// <summary>
        /// Color of the text outline.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mediapipe.Color OutlineColor {
          get { return outlineColor_; }
          set {
            outlineColor_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Text);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Text other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DisplayText != other.DisplayText) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Left, other.Left)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Baseline, other.Baseline)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FontHeight, other.FontHeight)) return false;
          if (Normalized != other.Normalized) return false;
          if (FontFace != other.FontFace) return false;
          if (CenterHorizontally != other.CenterHorizontally) return false;
          if (CenterVertically != other.CenterVertically) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OutlineThickness, other.OutlineThickness)) return false;
          if (!object.Equals(OutlineColor, other.OutlineColor)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasDisplayText) hash ^= DisplayText.GetHashCode();
          if (HasLeft) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Left);
          if (HasBaseline) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Baseline);
          if (HasFontHeight) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FontHeight);
          if (HasNormalized) hash ^= Normalized.GetHashCode();
          if (HasFontFace) hash ^= FontFace.GetHashCode();
          if (HasCenterHorizontally) hash ^= CenterHorizontally.GetHashCode();
          if (HasCenterVertically) hash ^= CenterVertically.GetHashCode();
          if (HasOutlineThickness) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OutlineThickness);
          if (outlineColor_ != null) hash ^= OutlineColor.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasDisplayText) {
            output.WriteRawTag(10);
            output.WriteString(DisplayText);
          }
          if (HasLeft) {
            output.WriteRawTag(17);
            output.WriteDouble(Left);
          }
          if (HasBaseline) {
            output.WriteRawTag(25);
            output.WriteDouble(Baseline);
          }
          if (HasFontHeight) {
            output.WriteRawTag(33);
            output.WriteDouble(FontHeight);
          }
          if (HasNormalized) {
            output.WriteRawTag(40);
            output.WriteBool(Normalized);
          }
          if (HasFontFace) {
            output.WriteRawTag(48);
            output.WriteInt32(FontFace);
          }
          if (HasCenterHorizontally) {
            output.WriteRawTag(56);
            output.WriteBool(CenterHorizontally);
          }
          if (HasCenterVertically) {
            output.WriteRawTag(64);
            output.WriteBool(CenterVertically);
          }
          if (HasOutlineThickness) {
            output.WriteRawTag(89);
            output.WriteDouble(OutlineThickness);
          }
          if (outlineColor_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(OutlineColor);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasDisplayText) {
            output.WriteRawTag(10);
            output.WriteString(DisplayText);
          }
          if (HasLeft) {
            output.WriteRawTag(17);
            output.WriteDouble(Left);
          }
          if (HasBaseline) {
            output.WriteRawTag(25);
            output.WriteDouble(Baseline);
          }
          if (HasFontHeight) {
            output.WriteRawTag(33);
            output.WriteDouble(FontHeight);
          }
          if (HasNormalized) {
            output.WriteRawTag(40);
            output.WriteBool(Normalized);
          }
          if (HasFontFace) {
            output.WriteRawTag(48);
            output.WriteInt32(FontFace);
          }
          if (HasCenterHorizontally) {
            output.WriteRawTag(56);
            output.WriteBool(CenterHorizontally);
          }
          if (HasCenterVertically) {
            output.WriteRawTag(64);
            output.WriteBool(CenterVertically);
          }
          if (HasOutlineThickness) {
            output.WriteRawTag(89);
            output.WriteDouble(OutlineThickness);
          }
          if (outlineColor_ != null) {
            output.WriteRawTag(98);
            output.WriteMessage(OutlineColor);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasDisplayText) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayText);
          }
          if (HasLeft) {
            size += 1 + 8;
          }
          if (HasBaseline) {
            size += 1 + 8;
          }
          if (HasFontHeight) {
            size += 1 + 8;
          }
          if (HasNormalized) {
            size += 1 + 1;
          }
          if (HasFontFace) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FontFace);
          }
          if (HasCenterHorizontally) {
            size += 1 + 1;
          }
          if (HasCenterVertically) {
            size += 1 + 1;
          }
          if (HasOutlineThickness) {
            size += 1 + 8;
          }
          if (outlineColor_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutlineColor);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Text other) {
          if (other == null) {
            return;
          }
          if (other.HasDisplayText) {
            DisplayText = other.DisplayText;
          }
          if (other.HasLeft) {
            Left = other.Left;
          }
          if (other.HasBaseline) {
            Baseline = other.Baseline;
          }
          if (other.HasFontHeight) {
            FontHeight = other.FontHeight;
          }
          if (other.HasNormalized) {
            Normalized = other.Normalized;
          }
          if (other.HasFontFace) {
            FontFace = other.FontFace;
          }
          if (other.HasCenterHorizontally) {
            CenterHorizontally = other.CenterHorizontally;
          }
          if (other.HasCenterVertically) {
            CenterVertically = other.CenterVertically;
          }
          if (other.HasOutlineThickness) {
            OutlineThickness = other.OutlineThickness;
          }
          if (other.outlineColor_ != null) {
            if (outlineColor_ == null) {
              OutlineColor = new global::Mediapipe.Color();
            }
            OutlineColor.MergeFrom(other.OutlineColor);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                DisplayText = input.ReadString();
                break;
              }
              case 17: {
                Left = input.ReadDouble();
                break;
              }
              case 25: {
                Baseline = input.ReadDouble();
                break;
              }
              case 33: {
                FontHeight = input.ReadDouble();
                break;
              }
              case 40: {
                Normalized = input.ReadBool();
                break;
              }
              case 48: {
                FontFace = input.ReadInt32();
                break;
              }
              case 56: {
                CenterHorizontally = input.ReadBool();
                break;
              }
              case 64: {
                CenterVertically = input.ReadBool();
                break;
              }
              case 89: {
                OutlineThickness = input.ReadDouble();
                break;
              }
              case 98: {
                if (outlineColor_ == null) {
                  OutlineColor = new global::Mediapipe.Color();
                }
                input.ReadMessage(OutlineColor);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                DisplayText = input.ReadString();
                break;
              }
              case 17: {
                Left = input.ReadDouble();
                break;
              }
              case 25: {
                Baseline = input.ReadDouble();
                break;
              }
              case 33: {
                FontHeight = input.ReadDouble();
                break;
              }
              case 40: {
                Normalized = input.ReadBool();
                break;
              }
              case 48: {
                FontFace = input.ReadInt32();
                break;
              }
              case 56: {
                CenterHorizontally = input.ReadBool();
                break;
              }
              case 64: {
                CenterVertically = input.ReadBool();
                break;
              }
              case 89: {
                OutlineThickness = input.ReadDouble();
                break;
              }
              case 98: {
                if (outlineColor_ == null) {
                  OutlineColor = new global::Mediapipe.Color();
                }
                input.ReadMessage(OutlineColor);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// Represents a destination viewport to render annotations into, when specified
  /// in RenderData.
  /// </summary>
  public sealed partial class RenderViewport : pb::IMessage<RenderViewport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RenderViewport> _parser = new pb::MessageParser<RenderViewport>(() => new RenderViewport());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RenderViewport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.RenderDataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RenderViewport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RenderViewport(RenderViewport other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      widthPx_ = other.widthPx_;
      heightPx_ = other.heightPx_;
      composeOnVideo_ = other.composeOnVideo_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RenderViewport Clone() {
      return new RenderViewport(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static string IdDefaultValue = "";

    private string id_;
    /// <summary>
    /// A unique identifier for this viewport.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_ ?? IdDefaultValue; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasId {
      get { return id_ != null; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearId() {
      id_ = null;
    }

    /// <summary>Field number for the "width_px" field.</summary>
    public const int WidthPxFieldNumber = 2;
    private readonly static int WidthPxDefaultValue = 0;

    private int widthPx_;
    /// <summary>
    /// The width and height of this viewport in absolute pixels.
    /// Normalized coordinates on annotations destined for this viewport as
    /// normalized relative to these absolute pixel dimensions.
    /// Camera feeds destined for this viewport will be rescaled to match these
    /// dimensions.
    /// Note: It is not expected that mid-stream resizing should be possible --
    /// the visualizer is epxected to use the first dimensions it sees for a given
    /// viewport and ignore any ignore subsequent changes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WidthPx {
      get { if ((_hasBits0 & 1) != 0) { return widthPx_; } else { return WidthPxDefaultValue; } }
      set {
        _hasBits0 |= 1;
        widthPx_ = value;
      }
    }
    /// <summary>Gets whether the "width_px" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWidthPx {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "width_px" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWidthPx() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "height_px" field.</summary>
    public const int HeightPxFieldNumber = 3;
    private readonly static int HeightPxDefaultValue = 0;

    private int heightPx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HeightPx {
      get { if ((_hasBits0 & 2) != 0) { return heightPx_; } else { return HeightPxDefaultValue; } }
      set {
        _hasBits0 |= 2;
        heightPx_ = value;
      }
    }
    /// <summary>Gets whether the "height_px" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHeightPx {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "height_px" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHeightPx() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "compose_on_video" field.</summary>
    public const int ComposeOnVideoFieldNumber = 4;
    private readonly static bool ComposeOnVideoDefaultValue = false;

    private bool composeOnVideo_;
    /// <summary>
    /// Set to true if this viewport should render its annotations overtop of a
    /// (rescaled to width/height) copy of the camera feed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ComposeOnVideo {
      get { if ((_hasBits0 & 4) != 0) { return composeOnVideo_; } else { return ComposeOnVideoDefaultValue; } }
      set {
        _hasBits0 |= 4;
        composeOnVideo_ = value;
      }
    }
    /// <summary>Gets whether the "compose_on_video" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasComposeOnVideo {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "compose_on_video" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearComposeOnVideo() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RenderViewport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RenderViewport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (WidthPx != other.WidthPx) return false;
      if (HeightPx != other.HeightPx) return false;
      if (ComposeOnVideo != other.ComposeOnVideo) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasWidthPx) hash ^= WidthPx.GetHashCode();
      if (HasHeightPx) hash ^= HeightPx.GetHashCode();
      if (HasComposeOnVideo) hash ^= ComposeOnVideo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasWidthPx) {
        output.WriteRawTag(16);
        output.WriteInt32(WidthPx);
      }
      if (HasHeightPx) {
        output.WriteRawTag(24);
        output.WriteInt32(HeightPx);
      }
      if (HasComposeOnVideo) {
        output.WriteRawTag(32);
        output.WriteBool(ComposeOnVideo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (HasWidthPx) {
        output.WriteRawTag(16);
        output.WriteInt32(WidthPx);
      }
      if (HasHeightPx) {
        output.WriteRawTag(24);
        output.WriteInt32(HeightPx);
      }
      if (HasComposeOnVideo) {
        output.WriteRawTag(32);
        output.WriteBool(ComposeOnVideo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (HasWidthPx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WidthPx);
      }
      if (HasHeightPx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeightPx);
      }
      if (HasComposeOnVideo) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RenderViewport other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasWidthPx) {
        WidthPx = other.WidthPx;
      }
      if (other.HasHeightPx) {
        HeightPx = other.HeightPx;
      }
      if (other.HasComposeOnVideo) {
        ComposeOnVideo = other.ComposeOnVideo;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            WidthPx = input.ReadInt32();
            break;
          }
          case 24: {
            HeightPx = input.ReadInt32();
            break;
          }
          case 32: {
            ComposeOnVideo = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            WidthPx = input.ReadInt32();
            break;
          }
          case 24: {
            HeightPx = input.ReadInt32();
            break;
          }
          case 32: {
            ComposeOnVideo = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
