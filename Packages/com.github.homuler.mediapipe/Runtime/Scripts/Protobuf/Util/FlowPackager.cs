// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/util/tracking/flow_packager.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/util/tracking/flow_packager.proto</summary>
  public static partial class FlowPackagerReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/util/tracking/flow_packager.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FlowPackagerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CittZWRpYXBpcGUvdXRpbC90cmFja2luZy9mbG93X3BhY2thZ2VyLnByb3Rv",
            "EgltZWRpYXBpcGUaK21lZGlhcGlwZS91dGlsL3RyYWNraW5nL21vdGlvbl9t",
            "b2RlbHMucHJvdG8aKW1lZGlhcGlwZS91dGlsL3RyYWNraW5nL3JlZ2lvbl9m",
            "bG93LnByb3RvIrEFCgxUcmFja2luZ0RhdGESFgoLZnJhbWVfZmxhZ3MYASAB",
            "KAU6ATASFAoMZG9tYWluX3dpZHRoGAIgASgFEhUKDWRvbWFpbl9oZWlnaHQY",
            "AyABKAUSFwoMZnJhbWVfYXNwZWN0GAYgASgCOgExEi8KEGJhY2tncm91bmRf",
            "bW9kZWwYBCABKAsyFS5tZWRpYXBpcGUuSG9tb2dyYXBoeRI3Cgttb3Rpb25f",
            "ZGF0YRgFIAEoCzIiLm1lZGlhcGlwZS5UcmFja2luZ0RhdGEuTW90aW9uRGF0",
            "YRIcChRnbG9iYWxfZmVhdHVyZV9jb3VudBgHIAEoDRIgChhhdmVyYWdlX21v",
            "dGlvbl9tYWduaXR1ZGUYCCABKAIa6wEKCk1vdGlvbkRhdGESFAoMbnVtX2Vs",
            "ZW1lbnRzGAEgASgFEhcKC3ZlY3Rvcl9kYXRhGAIgAygCQgIQARIUCgh0cmFj",
            "a19pZBgDIAMoBUICEAESFwoLcm93X2luZGljZXMYBCADKAVCAhABEhYKCmNv",
            "bF9zdGFydHMYBSADKAVCAhABEj8KE2ZlYXR1cmVfZGVzY3JpcHRvcnMYBiAD",
            "KAsyIi5tZWRpYXBpcGUuQmluYXJ5RmVhdHVyZURlc2NyaXB0b3ISJgoeYWN0",
            "aXZlbHlfZGlzY2FyZGVkX3RyYWNrZWRfaWRzGAcgAygFIqoBCgpGcmFtZUZs",
            "YWdzEhkKFUZMQUdfUFJPRklMRV9CQVNFTElORRAAEhUKEUZMQUdfUFJPRklM",
            "RV9ISUdIEAESHgoaRkxBR19ISUdIX0ZJREVMSVRZX1ZFQ1RPUlMQAhIcChhG",
            "TEFHX0JBQ0tHUk9VTkRfVU5TVEFCTEUQBBITCg9GTEFHX0RVUExJQ0FURUQQ",
            "CBIXChNGTEFHX0NIVU5LX0JPVU5EQVJZEBAi+wEKEVRyYWNraW5nRGF0YUNo",
            "dW5rEi8KBGl0ZW0YASADKAsyIS5tZWRpYXBpcGUuVHJhY2tpbmdEYXRhQ2h1",
            "bmsuSXRlbRIZCgpsYXN0X2NodW5rGAIgASgIOgVmYWxzZRIaCgtmaXJzdF9j",
            "aHVuaxgDIAEoCDoFZmFsc2UafgoESXRlbRIuCg10cmFja2luZ19kYXRhGAEg",
            "ASgLMhcubWVkaWFwaXBlLlRyYWNraW5nRGF0YRIRCglmcmFtZV9pZHgYAiAB",
            "KAUSFgoOdGltZXN0YW1wX3VzZWMYAyABKAMSGwoTcHJldl90aW1lc3RhbXBf",
            "dXNlYxgEIAEoAyIiChJCaW5hcnlUcmFja2luZ0RhdGESDAoEZGF0YRgBIAEo",
            "DCKKAQoITWV0YURhdGESEgoKbnVtX2ZyYW1lcxgCIAEoBxI2Cg10cmFja19v",
            "ZmZzZXRzGAMgAygLMh8ubWVkaWFwaXBlLk1ldGFEYXRhLlRyYWNrT2Zmc2V0",
            "GjIKC1RyYWNrT2Zmc2V0EgwKBG1zZWMYASABKAcSFQoNc3RyZWFtX29mZnNl",
            "dBgCIAEoByJTChFUcmFja2luZ0NvbnRhaW5lchIOCgZoZWFkZXIYASABKAkS",
            "EgoHdmVyc2lvbhgCIAEoBzoBMRIMCgRzaXplGAMgASgHEgwKBGRhdGEYBCAB",
            "KAwirQEKF1RyYWNraW5nQ29udGFpbmVyRm9ybWF0Ei8KCW1ldGFfZGF0YRgB",
            "IAEoCzIcLm1lZGlhcGlwZS5UcmFja2luZ0NvbnRhaW5lchIwCgp0cmFja19k",
            "YXRhGAIgAygLMhwubWVkaWFwaXBlLlRyYWNraW5nQ29udGFpbmVyEi8KCXRl",
            "cm1fZGF0YRgDIAEoCzIcLm1lZGlhcGlwZS5UcmFja2luZ0NvbnRhaW5lciJz",
            "ChZUcmFja2luZ0NvbnRhaW5lclByb3RvEiYKCW1ldGFfZGF0YRgBIAEoCzIT",
            "Lm1lZGlhcGlwZS5NZXRhRGF0YRIxCgp0cmFja19kYXRhGAIgAygLMh0ubWVk",
            "aWFwaXBlLkJpbmFyeVRyYWNraW5nRGF0YSLBAgoTRmxvd1BhY2thZ2VyT3B0",
            "aW9ucxIZCgxkb21haW5fd2lkdGgYASABKAU6AzI1NhIaCg1kb21haW5faGVp",
            "Z2h0GAIgASgFOgMxOTISKgocYmluYXJ5X3RyYWNraW5nX2RhdGFfc3VwcG9y",
            "dBgGIAEoCDoEdHJ1ZRIfChB1c2VfaGlnaF9wcm9maWxlGAMgASgIOgVmYWxz",
            "ZRIoChpoaWdoX2ZpZGVsaXR5XzE2Yml0X2VuY29kZRgEIAEoCDoEdHJ1ZRIp",
            "ChxoaWdoX3Byb2ZpbGVfcmV1c2VfdGhyZXNob2xkGAUgASgCOgMwLjUiUQoT",
            "SGlnaFByb2ZpbGVFbmNvZGluZxIRCgxBRFZBTkNFX0ZMQUcQgAESFwoTRE9V",
            "QkxFX0lOREVYX0VOQ09ERRBAEg4KCklOREVYX01BU0sQPw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mediapipe.MotionModelsReflection.Descriptor, global::Mediapipe.RegionFlowReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.TrackingData), global::Mediapipe.TrackingData.Parser, new[]{ "FrameFlags", "DomainWidth", "DomainHeight", "FrameAspect", "BackgroundModel", "MotionData", "GlobalFeatureCount", "AverageMotionMagnitude" }, null, new[]{ typeof(global::Mediapipe.TrackingData.Types.FrameFlags) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.TrackingData.Types.MotionData), global::Mediapipe.TrackingData.Types.MotionData.Parser, new[]{ "NumElements", "VectorData", "TrackId", "RowIndices", "ColStarts", "FeatureDescriptors", "ActivelyDiscardedTrackedIds" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.TrackingDataChunk), global::Mediapipe.TrackingDataChunk.Parser, new[]{ "Item", "LastChunk", "FirstChunk" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.TrackingDataChunk.Types.Item), global::Mediapipe.TrackingDataChunk.Types.Item.Parser, new[]{ "TrackingData", "FrameIdx", "TimestampUsec", "PrevTimestampUsec" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.BinaryTrackingData), global::Mediapipe.BinaryTrackingData.Parser, new[]{ "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.MetaData), global::Mediapipe.MetaData.Parser, new[]{ "NumFrames", "TrackOffsets" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.MetaData.Types.TrackOffset), global::Mediapipe.MetaData.Types.TrackOffset.Parser, new[]{ "Msec", "StreamOffset" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.TrackingContainer), global::Mediapipe.TrackingContainer.Parser, new[]{ "Header", "Version", "Size", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.TrackingContainerFormat), global::Mediapipe.TrackingContainerFormat.Parser, new[]{ "MetaData", "TrackData", "TermData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.TrackingContainerProto), global::Mediapipe.TrackingContainerProto.Parser, new[]{ "MetaData", "TrackData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.FlowPackagerOptions), global::Mediapipe.FlowPackagerOptions.Parser, new[]{ "DomainWidth", "DomainHeight", "BinaryTrackingDataSupport", "UseHighProfile", "HighFidelity16BitEncode", "HighProfileReuseThreshold" }, null, new[]{ typeof(global::Mediapipe.FlowPackagerOptions.Types.HighProfileEncoding) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Next flag: 9
  /// </summary>
  public sealed partial class TrackingData : pb::IMessage<TrackingData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrackingData> _parser = new pb::MessageParser<TrackingData>(() => new TrackingData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TrackingData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.FlowPackagerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrackingData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrackingData(TrackingData other) : this() {
      _hasBits0 = other._hasBits0;
      frameFlags_ = other.frameFlags_;
      domainWidth_ = other.domainWidth_;
      domainHeight_ = other.domainHeight_;
      frameAspect_ = other.frameAspect_;
      backgroundModel_ = other.backgroundModel_ != null ? other.backgroundModel_.Clone() : null;
      motionData_ = other.motionData_ != null ? other.motionData_.Clone() : null;
      globalFeatureCount_ = other.globalFeatureCount_;
      averageMotionMagnitude_ = other.averageMotionMagnitude_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrackingData Clone() {
      return new TrackingData(this);
    }

    /// <summary>Field number for the "frame_flags" field.</summary>
    public const int FrameFlagsFieldNumber = 1;
    private readonly static int FrameFlagsDefaultValue = 0;

    private int frameFlags_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FrameFlags {
      get { if ((_hasBits0 & 1) != 0) { return frameFlags_; } else { return FrameFlagsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        frameFlags_ = value;
      }
    }
    /// <summary>Gets whether the "frame_flags" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFrameFlags {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "frame_flags" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFrameFlags() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "domain_width" field.</summary>
    public const int DomainWidthFieldNumber = 2;
    private readonly static int DomainWidthDefaultValue = 0;

    private int domainWidth_;
    /// <summary>
    /// Tracking data is resolution independent specified w.r.t.
    /// specified domain.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DomainWidth {
      get { if ((_hasBits0 & 2) != 0) { return domainWidth_; } else { return DomainWidthDefaultValue; } }
      set {
        _hasBits0 |= 2;
        domainWidth_ = value;
      }
    }
    /// <summary>Gets whether the "domain_width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDomainWidth {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "domain_width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDomainWidth() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "domain_height" field.</summary>
    public const int DomainHeightFieldNumber = 3;
    private readonly static int DomainHeightDefaultValue = 0;

    private int domainHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DomainHeight {
      get { if ((_hasBits0 & 4) != 0) { return domainHeight_; } else { return DomainHeightDefaultValue; } }
      set {
        _hasBits0 |= 4;
        domainHeight_ = value;
      }
    }
    /// <summary>Gets whether the "domain_height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDomainHeight {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "domain_height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDomainHeight() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "frame_aspect" field.</summary>
    public const int FrameAspectFieldNumber = 6;
    private readonly static float FrameAspectDefaultValue = 1F;

    private float frameAspect_;
    /// <summary>
    /// Aspect ratio (w/h) of the original frame tracking data was computed from.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float FrameAspect {
      get { if ((_hasBits0 & 8) != 0) { return frameAspect_; } else { return FrameAspectDefaultValue; } }
      set {
        _hasBits0 |= 8;
        frameAspect_ = value;
      }
    }
    /// <summary>Gets whether the "frame_aspect" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFrameAspect {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "frame_aspect" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFrameAspect() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "background_model" field.</summary>
    public const int BackgroundModelFieldNumber = 4;
    private global::Mediapipe.Homography backgroundModel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.Homography BackgroundModel {
      get { return backgroundModel_; }
      set {
        backgroundModel_ = value;
      }
    }

    /// <summary>Field number for the "motion_data" field.</summary>
    public const int MotionDataFieldNumber = 5;
    private global::Mediapipe.TrackingData.Types.MotionData motionData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.TrackingData.Types.MotionData MotionData {
      get { return motionData_; }
      set {
        motionData_ = value;
      }
    }

    /// <summary>Field number for the "global_feature_count" field.</summary>
    public const int GlobalFeatureCountFieldNumber = 7;
    private readonly static uint GlobalFeatureCountDefaultValue = 0;

    private uint globalFeatureCount_;
    /// <summary>
    /// Total number of features in our analysis
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint GlobalFeatureCount {
      get { if ((_hasBits0 & 16) != 0) { return globalFeatureCount_; } else { return GlobalFeatureCountDefaultValue; } }
      set {
        _hasBits0 |= 16;
        globalFeatureCount_ = value;
      }
    }
    /// <summary>Gets whether the "global_feature_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGlobalFeatureCount {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "global_feature_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGlobalFeatureCount() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "average_motion_magnitude" field.</summary>
    public const int AverageMotionMagnitudeFieldNumber = 8;
    private readonly static float AverageMotionMagnitudeDefaultValue = 0F;

    private float averageMotionMagnitude_;
    /// <summary>
    /// Average of all motion vector magnitudes (without accounting for any motion
    /// model), within 10th to 90th percentile (to remove outliers).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AverageMotionMagnitude {
      get { if ((_hasBits0 & 32) != 0) { return averageMotionMagnitude_; } else { return AverageMotionMagnitudeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        averageMotionMagnitude_ = value;
      }
    }
    /// <summary>Gets whether the "average_motion_magnitude" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAverageMotionMagnitude {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "average_motion_magnitude" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAverageMotionMagnitude() {
      _hasBits0 &= ~32;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TrackingData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TrackingData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FrameFlags != other.FrameFlags) return false;
      if (DomainWidth != other.DomainWidth) return false;
      if (DomainHeight != other.DomainHeight) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FrameAspect, other.FrameAspect)) return false;
      if (!object.Equals(BackgroundModel, other.BackgroundModel)) return false;
      if (!object.Equals(MotionData, other.MotionData)) return false;
      if (GlobalFeatureCount != other.GlobalFeatureCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AverageMotionMagnitude, other.AverageMotionMagnitude)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFrameFlags) hash ^= FrameFlags.GetHashCode();
      if (HasDomainWidth) hash ^= DomainWidth.GetHashCode();
      if (HasDomainHeight) hash ^= DomainHeight.GetHashCode();
      if (HasFrameAspect) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FrameAspect);
      if (backgroundModel_ != null) hash ^= BackgroundModel.GetHashCode();
      if (motionData_ != null) hash ^= MotionData.GetHashCode();
      if (HasGlobalFeatureCount) hash ^= GlobalFeatureCount.GetHashCode();
      if (HasAverageMotionMagnitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AverageMotionMagnitude);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFrameFlags) {
        output.WriteRawTag(8);
        output.WriteInt32(FrameFlags);
      }
      if (HasDomainWidth) {
        output.WriteRawTag(16);
        output.WriteInt32(DomainWidth);
      }
      if (HasDomainHeight) {
        output.WriteRawTag(24);
        output.WriteInt32(DomainHeight);
      }
      if (backgroundModel_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BackgroundModel);
      }
      if (motionData_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(MotionData);
      }
      if (HasFrameAspect) {
        output.WriteRawTag(53);
        output.WriteFloat(FrameAspect);
      }
      if (HasGlobalFeatureCount) {
        output.WriteRawTag(56);
        output.WriteUInt32(GlobalFeatureCount);
      }
      if (HasAverageMotionMagnitude) {
        output.WriteRawTag(69);
        output.WriteFloat(AverageMotionMagnitude);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFrameFlags) {
        output.WriteRawTag(8);
        output.WriteInt32(FrameFlags);
      }
      if (HasDomainWidth) {
        output.WriteRawTag(16);
        output.WriteInt32(DomainWidth);
      }
      if (HasDomainHeight) {
        output.WriteRawTag(24);
        output.WriteInt32(DomainHeight);
      }
      if (backgroundModel_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BackgroundModel);
      }
      if (motionData_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(MotionData);
      }
      if (HasFrameAspect) {
        output.WriteRawTag(53);
        output.WriteFloat(FrameAspect);
      }
      if (HasGlobalFeatureCount) {
        output.WriteRawTag(56);
        output.WriteUInt32(GlobalFeatureCount);
      }
      if (HasAverageMotionMagnitude) {
        output.WriteRawTag(69);
        output.WriteFloat(AverageMotionMagnitude);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasFrameFlags) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameFlags);
      }
      if (HasDomainWidth) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DomainWidth);
      }
      if (HasDomainHeight) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DomainHeight);
      }
      if (HasFrameAspect) {
        size += 1 + 4;
      }
      if (backgroundModel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BackgroundModel);
      }
      if (motionData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MotionData);
      }
      if (HasGlobalFeatureCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GlobalFeatureCount);
      }
      if (HasAverageMotionMagnitude) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TrackingData other) {
      if (other == null) {
        return;
      }
      if (other.HasFrameFlags) {
        FrameFlags = other.FrameFlags;
      }
      if (other.HasDomainWidth) {
        DomainWidth = other.DomainWidth;
      }
      if (other.HasDomainHeight) {
        DomainHeight = other.DomainHeight;
      }
      if (other.HasFrameAspect) {
        FrameAspect = other.FrameAspect;
      }
      if (other.backgroundModel_ != null) {
        if (backgroundModel_ == null) {
          BackgroundModel = new global::Mediapipe.Homography();
        }
        BackgroundModel.MergeFrom(other.BackgroundModel);
      }
      if (other.motionData_ != null) {
        if (motionData_ == null) {
          MotionData = new global::Mediapipe.TrackingData.Types.MotionData();
        }
        MotionData.MergeFrom(other.MotionData);
      }
      if (other.HasGlobalFeatureCount) {
        GlobalFeatureCount = other.GlobalFeatureCount;
      }
      if (other.HasAverageMotionMagnitude) {
        AverageMotionMagnitude = other.AverageMotionMagnitude;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            FrameFlags = input.ReadInt32();
            break;
          }
          case 16: {
            DomainWidth = input.ReadInt32();
            break;
          }
          case 24: {
            DomainHeight = input.ReadInt32();
            break;
          }
          case 34: {
            if (backgroundModel_ == null) {
              BackgroundModel = new global::Mediapipe.Homography();
            }
            input.ReadMessage(BackgroundModel);
            break;
          }
          case 42: {
            if (motionData_ == null) {
              MotionData = new global::Mediapipe.TrackingData.Types.MotionData();
            }
            input.ReadMessage(MotionData);
            break;
          }
          case 53: {
            FrameAspect = input.ReadFloat();
            break;
          }
          case 56: {
            GlobalFeatureCount = input.ReadUInt32();
            break;
          }
          case 69: {
            AverageMotionMagnitude = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            FrameFlags = input.ReadInt32();
            break;
          }
          case 16: {
            DomainWidth = input.ReadInt32();
            break;
          }
          case 24: {
            DomainHeight = input.ReadInt32();
            break;
          }
          case 34: {
            if (backgroundModel_ == null) {
              BackgroundModel = new global::Mediapipe.Homography();
            }
            input.ReadMessage(BackgroundModel);
            break;
          }
          case 42: {
            if (motionData_ == null) {
              MotionData = new global::Mediapipe.TrackingData.Types.MotionData();
            }
            input.ReadMessage(MotionData);
            break;
          }
          case 53: {
            FrameAspect = input.ReadFloat();
            break;
          }
          case 56: {
            GlobalFeatureCount = input.ReadUInt32();
            break;
          }
          case 69: {
            AverageMotionMagnitude = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TrackingData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum FrameFlags {
        [pbr::OriginalName("FLAG_PROFILE_BASELINE")] FlagProfileBaseline = 0,
        [pbr::OriginalName("FLAG_PROFILE_HIGH")] FlagProfileHigh = 1,
        [pbr::OriginalName("FLAG_HIGH_FIDELITY_VECTORS")] FlagHighFidelityVectors = 2,
        /// <summary>
        /// Background model could not be estimated.
        /// </summary>
        [pbr::OriginalName("FLAG_BACKGROUND_UNSTABLE")] FlagBackgroundUnstable = 4,
        /// <summary>
        /// Frame is duplicated, i.e. identical to
        /// </summary>
        [pbr::OriginalName("FLAG_DUPLICATED")] FlagDuplicated = 8,
        /// <summary>
        /// previous one.
        /// Indicates the beginning of a new chunk. In this case the track_id's
        /// are not compatible w.r.t. previous one.
        /// </summary>
        [pbr::OriginalName("FLAG_CHUNK_BOUNDARY")] FlagChunkBoundary = 16,
      }

      /// <summary>
      /// Stores num_elements vectors of motion data. (x,y) position encoded via
      /// row_indices and col_starts, as compressed sparse column matrix storage
      /// format:
      /// (https://en.wikipedia.org/wiki/Sparse_matrix#Compressed_sparse_column_.28CSC_or_CCS.29),
      /// Vector data is stored as (dx, dy) position. Optionally we store the fitting
      /// error and track id for each feature.
      /// </summary>
      public sealed partial class MotionData : pb::IMessage<MotionData>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<MotionData> _parser = new pb::MessageParser<MotionData>(() => new MotionData());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<MotionData> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mediapipe.TrackingData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public MotionData() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public MotionData(MotionData other) : this() {
          _hasBits0 = other._hasBits0;
          numElements_ = other.numElements_;
          vectorData_ = other.vectorData_.Clone();
          trackId_ = other.trackId_.Clone();
          rowIndices_ = other.rowIndices_.Clone();
          colStarts_ = other.colStarts_.Clone();
          featureDescriptors_ = other.featureDescriptors_.Clone();
          activelyDiscardedTrackedIds_ = other.activelyDiscardedTrackedIds_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public MotionData Clone() {
          return new MotionData(this);
        }

        /// <summary>Field number for the "num_elements" field.</summary>
        public const int NumElementsFieldNumber = 1;
        private readonly static int NumElementsDefaultValue = 0;

        private int numElements_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int NumElements {
          get { if ((_hasBits0 & 1) != 0) { return numElements_; } else { return NumElementsDefaultValue; } }
          set {
            _hasBits0 |= 1;
            numElements_ = value;
          }
        }
        /// <summary>Gets whether the "num_elements" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasNumElements {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "num_elements" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearNumElements() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "vector_data" field.</summary>
        public const int VectorDataFieldNumber = 2;
        private static readonly pb::FieldCodec<float> _repeated_vectorData_codec
            = pb::FieldCodec.ForFloat(18);
        private readonly pbc::RepeatedField<float> vectorData_ = new pbc::RepeatedField<float>();
        /// <summary>
        /// #num_elements pairs (flow_x, flow_y) densely packed.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<float> VectorData {
          get { return vectorData_; }
        }

        /// <summary>Field number for the "track_id" field.</summary>
        public const int TrackIdFieldNumber = 3;
        private static readonly pb::FieldCodec<int> _repeated_trackId_codec
            = pb::FieldCodec.ForInt32(26);
        private readonly pbc::RepeatedField<int> trackId_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// Stores corresponding track index for each feature. Features belonging
        /// to the same track over time are assigned the same id.
        /// NOTE: Due to size, tracking ids are never stored as compressed binary
        /// tracking data.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<int> TrackId {
          get { return trackId_; }
        }

        /// <summary>Field number for the "row_indices" field.</summary>
        public const int RowIndicesFieldNumber = 4;
        private static readonly pb::FieldCodec<int> _repeated_rowIndices_codec
            = pb::FieldCodec.ForInt32(34);
        private readonly pbc::RepeatedField<int> rowIndices_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// # num_elements row indices.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<int> RowIndices {
          get { return rowIndices_; }
        }

        /// <summary>Field number for the "col_starts" field.</summary>
        public const int ColStartsFieldNumber = 5;
        private static readonly pb::FieldCodec<int> _repeated_colStarts_codec
            = pb::FieldCodec.ForInt32(42);
        private readonly pbc::RepeatedField<int> colStarts_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// Start index in above array for each column (#domain_width + 1 entries).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<int> ColStarts {
          get { return colStarts_; }
        }

        /// <summary>Field number for the "feature_descriptors" field.</summary>
        public const int FeatureDescriptorsFieldNumber = 6;
        private static readonly pb::FieldCodec<global::Mediapipe.BinaryFeatureDescriptor> _repeated_featureDescriptors_codec
            = pb::FieldCodec.ForMessage(50, global::Mediapipe.BinaryFeatureDescriptor.Parser);
        private readonly pbc::RepeatedField<global::Mediapipe.BinaryFeatureDescriptor> featureDescriptors_ = new pbc::RepeatedField<global::Mediapipe.BinaryFeatureDescriptor>();
        /// <summary>
        /// Feature descriptors for num_elements feature points.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Mediapipe.BinaryFeatureDescriptor> FeatureDescriptors {
          get { return featureDescriptors_; }
        }

        /// <summary>Field number for the "actively_discarded_tracked_ids" field.</summary>
        public const int ActivelyDiscardedTrackedIdsFieldNumber = 7;
        private static readonly pb::FieldCodec<int> _repeated_activelyDiscardedTrackedIds_codec
            = pb::FieldCodec.ForInt32(56);
        private readonly pbc::RepeatedField<int> activelyDiscardedTrackedIds_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// Stores all the tracked ids that have been discarded actively. This
        /// information will be used by downstreaming to avoid misjudgement on
        /// tracking continuity.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<int> ActivelyDiscardedTrackedIds {
          get { return activelyDiscardedTrackedIds_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as MotionData);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(MotionData other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (NumElements != other.NumElements) return false;
          if(!vectorData_.Equals(other.vectorData_)) return false;
          if(!trackId_.Equals(other.trackId_)) return false;
          if(!rowIndices_.Equals(other.rowIndices_)) return false;
          if(!colStarts_.Equals(other.colStarts_)) return false;
          if(!featureDescriptors_.Equals(other.featureDescriptors_)) return false;
          if(!activelyDiscardedTrackedIds_.Equals(other.activelyDiscardedTrackedIds_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasNumElements) hash ^= NumElements.GetHashCode();
          hash ^= vectorData_.GetHashCode();
          hash ^= trackId_.GetHashCode();
          hash ^= rowIndices_.GetHashCode();
          hash ^= colStarts_.GetHashCode();
          hash ^= featureDescriptors_.GetHashCode();
          hash ^= activelyDiscardedTrackedIds_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasNumElements) {
            output.WriteRawTag(8);
            output.WriteInt32(NumElements);
          }
          vectorData_.WriteTo(output, _repeated_vectorData_codec);
          trackId_.WriteTo(output, _repeated_trackId_codec);
          rowIndices_.WriteTo(output, _repeated_rowIndices_codec);
          colStarts_.WriteTo(output, _repeated_colStarts_codec);
          featureDescriptors_.WriteTo(output, _repeated_featureDescriptors_codec);
          activelyDiscardedTrackedIds_.WriteTo(output, _repeated_activelyDiscardedTrackedIds_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasNumElements) {
            output.WriteRawTag(8);
            output.WriteInt32(NumElements);
          }
          vectorData_.WriteTo(ref output, _repeated_vectorData_codec);
          trackId_.WriteTo(ref output, _repeated_trackId_codec);
          rowIndices_.WriteTo(ref output, _repeated_rowIndices_codec);
          colStarts_.WriteTo(ref output, _repeated_colStarts_codec);
          featureDescriptors_.WriteTo(ref output, _repeated_featureDescriptors_codec);
          activelyDiscardedTrackedIds_.WriteTo(ref output, _repeated_activelyDiscardedTrackedIds_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasNumElements) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumElements);
          }
          size += vectorData_.CalculateSize(_repeated_vectorData_codec);
          size += trackId_.CalculateSize(_repeated_trackId_codec);
          size += rowIndices_.CalculateSize(_repeated_rowIndices_codec);
          size += colStarts_.CalculateSize(_repeated_colStarts_codec);
          size += featureDescriptors_.CalculateSize(_repeated_featureDescriptors_codec);
          size += activelyDiscardedTrackedIds_.CalculateSize(_repeated_activelyDiscardedTrackedIds_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(MotionData other) {
          if (other == null) {
            return;
          }
          if (other.HasNumElements) {
            NumElements = other.NumElements;
          }
          vectorData_.Add(other.vectorData_);
          trackId_.Add(other.trackId_);
          rowIndices_.Add(other.rowIndices_);
          colStarts_.Add(other.colStarts_);
          featureDescriptors_.Add(other.featureDescriptors_);
          activelyDiscardedTrackedIds_.Add(other.activelyDiscardedTrackedIds_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                NumElements = input.ReadInt32();
                break;
              }
              case 18:
              case 21: {
                vectorData_.AddEntriesFrom(input, _repeated_vectorData_codec);
                break;
              }
              case 26:
              case 24: {
                trackId_.AddEntriesFrom(input, _repeated_trackId_codec);
                break;
              }
              case 34:
              case 32: {
                rowIndices_.AddEntriesFrom(input, _repeated_rowIndices_codec);
                break;
              }
              case 42:
              case 40: {
                colStarts_.AddEntriesFrom(input, _repeated_colStarts_codec);
                break;
              }
              case 50: {
                featureDescriptors_.AddEntriesFrom(input, _repeated_featureDescriptors_codec);
                break;
              }
              case 58:
              case 56: {
                activelyDiscardedTrackedIds_.AddEntriesFrom(input, _repeated_activelyDiscardedTrackedIds_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                NumElements = input.ReadInt32();
                break;
              }
              case 18:
              case 21: {
                vectorData_.AddEntriesFrom(ref input, _repeated_vectorData_codec);
                break;
              }
              case 26:
              case 24: {
                trackId_.AddEntriesFrom(ref input, _repeated_trackId_codec);
                break;
              }
              case 34:
              case 32: {
                rowIndices_.AddEntriesFrom(ref input, _repeated_rowIndices_codec);
                break;
              }
              case 42:
              case 40: {
                colStarts_.AddEntriesFrom(ref input, _repeated_colStarts_codec);
                break;
              }
              case 50: {
                featureDescriptors_.AddEntriesFrom(ref input, _repeated_featureDescriptors_codec);
                break;
              }
              case 58:
              case 56: {
                activelyDiscardedTrackedIds_.AddEntriesFrom(ref input, _repeated_activelyDiscardedTrackedIds_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  public sealed partial class TrackingDataChunk : pb::IMessage<TrackingDataChunk>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrackingDataChunk> _parser = new pb::MessageParser<TrackingDataChunk>(() => new TrackingDataChunk());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TrackingDataChunk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.FlowPackagerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrackingDataChunk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrackingDataChunk(TrackingDataChunk other) : this() {
      _hasBits0 = other._hasBits0;
      item_ = other.item_.Clone();
      lastChunk_ = other.lastChunk_;
      firstChunk_ = other.firstChunk_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrackingDataChunk Clone() {
      return new TrackingDataChunk(this);
    }

    /// <summary>Field number for the "item" field.</summary>
    public const int ItemFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Mediapipe.TrackingDataChunk.Types.Item> _repeated_item_codec
        = pb::FieldCodec.ForMessage(10, global::Mediapipe.TrackingDataChunk.Types.Item.Parser);
    private readonly pbc::RepeatedField<global::Mediapipe.TrackingDataChunk.Types.Item> item_ = new pbc::RepeatedField<global::Mediapipe.TrackingDataChunk.Types.Item>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mediapipe.TrackingDataChunk.Types.Item> Item {
      get { return item_; }
    }

    /// <summary>Field number for the "last_chunk" field.</summary>
    public const int LastChunkFieldNumber = 2;
    private readonly static bool LastChunkDefaultValue = false;

    private bool lastChunk_;
    /// <summary>
    /// Set as marker for last chunk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool LastChunk {
      get { if ((_hasBits0 & 1) != 0) { return lastChunk_; } else { return LastChunkDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lastChunk_ = value;
      }
    }
    /// <summary>Gets whether the "last_chunk" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLastChunk {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "last_chunk" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLastChunk() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "first_chunk" field.</summary>
    public const int FirstChunkFieldNumber = 3;
    private readonly static bool FirstChunkDefaultValue = false;

    private bool firstChunk_;
    /// <summary>
    /// Set as marker for first chunk.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FirstChunk {
      get { if ((_hasBits0 & 2) != 0) { return firstChunk_; } else { return FirstChunkDefaultValue; } }
      set {
        _hasBits0 |= 2;
        firstChunk_ = value;
      }
    }
    /// <summary>Gets whether the "first_chunk" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFirstChunk {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "first_chunk" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFirstChunk() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TrackingDataChunk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TrackingDataChunk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!item_.Equals(other.item_)) return false;
      if (LastChunk != other.LastChunk) return false;
      if (FirstChunk != other.FirstChunk) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= item_.GetHashCode();
      if (HasLastChunk) hash ^= LastChunk.GetHashCode();
      if (HasFirstChunk) hash ^= FirstChunk.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      item_.WriteTo(output, _repeated_item_codec);
      if (HasLastChunk) {
        output.WriteRawTag(16);
        output.WriteBool(LastChunk);
      }
      if (HasFirstChunk) {
        output.WriteRawTag(24);
        output.WriteBool(FirstChunk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      item_.WriteTo(ref output, _repeated_item_codec);
      if (HasLastChunk) {
        output.WriteRawTag(16);
        output.WriteBool(LastChunk);
      }
      if (HasFirstChunk) {
        output.WriteRawTag(24);
        output.WriteBool(FirstChunk);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += item_.CalculateSize(_repeated_item_codec);
      if (HasLastChunk) {
        size += 1 + 1;
      }
      if (HasFirstChunk) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TrackingDataChunk other) {
      if (other == null) {
        return;
      }
      item_.Add(other.item_);
      if (other.HasLastChunk) {
        LastChunk = other.LastChunk;
      }
      if (other.HasFirstChunk) {
        FirstChunk = other.FirstChunk;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
          case 16: {
            LastChunk = input.ReadBool();
            break;
          }
          case 24: {
            FirstChunk = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            item_.AddEntriesFrom(ref input, _repeated_item_codec);
            break;
          }
          case 16: {
            LastChunk = input.ReadBool();
            break;
          }
          case 24: {
            FirstChunk = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TrackingDataChunk message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class Item : pb::IMessage<Item>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Item> _parser = new pb::MessageParser<Item>(() => new Item());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Item> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mediapipe.TrackingDataChunk.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Item() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Item(Item other) : this() {
          _hasBits0 = other._hasBits0;
          trackingData_ = other.trackingData_ != null ? other.trackingData_.Clone() : null;
          frameIdx_ = other.frameIdx_;
          timestampUsec_ = other.timestampUsec_;
          prevTimestampUsec_ = other.prevTimestampUsec_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Item Clone() {
          return new Item(this);
        }

        /// <summary>Field number for the "tracking_data" field.</summary>
        public const int TrackingDataFieldNumber = 1;
        private global::Mediapipe.TrackingData trackingData_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mediapipe.TrackingData TrackingData {
          get { return trackingData_; }
          set {
            trackingData_ = value;
          }
        }

        /// <summary>Field number for the "frame_idx" field.</summary>
        public const int FrameIdxFieldNumber = 2;
        private readonly static int FrameIdxDefaultValue = 0;

        private int frameIdx_;
        /// <summary>
        /// Global frame index.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int FrameIdx {
          get { if ((_hasBits0 & 1) != 0) { return frameIdx_; } else { return FrameIdxDefaultValue; } }
          set {
            _hasBits0 |= 1;
            frameIdx_ = value;
          }
        }
        /// <summary>Gets whether the "frame_idx" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasFrameIdx {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "frame_idx" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearFrameIdx() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "timestamp_usec" field.</summary>
        public const int TimestampUsecFieldNumber = 3;
        private readonly static long TimestampUsecDefaultValue = 0L;

        private long timestampUsec_;
        /// <summary>
        /// Corresponding timestamp.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long TimestampUsec {
          get { if ((_hasBits0 & 2) != 0) { return timestampUsec_; } else { return TimestampUsecDefaultValue; } }
          set {
            _hasBits0 |= 2;
            timestampUsec_ = value;
          }
        }
        /// <summary>Gets whether the "timestamp_usec" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasTimestampUsec {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "timestamp_usec" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearTimestampUsec() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "prev_timestamp_usec" field.</summary>
        public const int PrevTimestampUsecFieldNumber = 4;
        private readonly static long PrevTimestampUsecDefaultValue = 0L;

        private long prevTimestampUsec_;
        /// <summary>
        /// Previous frame timestamp.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long PrevTimestampUsec {
          get { if ((_hasBits0 & 4) != 0) { return prevTimestampUsec_; } else { return PrevTimestampUsecDefaultValue; } }
          set {
            _hasBits0 |= 4;
            prevTimestampUsec_ = value;
          }
        }
        /// <summary>Gets whether the "prev_timestamp_usec" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasPrevTimestampUsec {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "prev_timestamp_usec" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearPrevTimestampUsec() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Item);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Item other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(TrackingData, other.TrackingData)) return false;
          if (FrameIdx != other.FrameIdx) return false;
          if (TimestampUsec != other.TimestampUsec) return false;
          if (PrevTimestampUsec != other.PrevTimestampUsec) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (trackingData_ != null) hash ^= TrackingData.GetHashCode();
          if (HasFrameIdx) hash ^= FrameIdx.GetHashCode();
          if (HasTimestampUsec) hash ^= TimestampUsec.GetHashCode();
          if (HasPrevTimestampUsec) hash ^= PrevTimestampUsec.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (trackingData_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(TrackingData);
          }
          if (HasFrameIdx) {
            output.WriteRawTag(16);
            output.WriteInt32(FrameIdx);
          }
          if (HasTimestampUsec) {
            output.WriteRawTag(24);
            output.WriteInt64(TimestampUsec);
          }
          if (HasPrevTimestampUsec) {
            output.WriteRawTag(32);
            output.WriteInt64(PrevTimestampUsec);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (trackingData_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(TrackingData);
          }
          if (HasFrameIdx) {
            output.WriteRawTag(16);
            output.WriteInt32(FrameIdx);
          }
          if (HasTimestampUsec) {
            output.WriteRawTag(24);
            output.WriteInt64(TimestampUsec);
          }
          if (HasPrevTimestampUsec) {
            output.WriteRawTag(32);
            output.WriteInt64(PrevTimestampUsec);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (trackingData_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrackingData);
          }
          if (HasFrameIdx) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameIdx);
          }
          if (HasTimestampUsec) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimestampUsec);
          }
          if (HasPrevTimestampUsec) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(PrevTimestampUsec);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Item other) {
          if (other == null) {
            return;
          }
          if (other.trackingData_ != null) {
            if (trackingData_ == null) {
              TrackingData = new global::Mediapipe.TrackingData();
            }
            TrackingData.MergeFrom(other.TrackingData);
          }
          if (other.HasFrameIdx) {
            FrameIdx = other.FrameIdx;
          }
          if (other.HasTimestampUsec) {
            TimestampUsec = other.TimestampUsec;
          }
          if (other.HasPrevTimestampUsec) {
            PrevTimestampUsec = other.PrevTimestampUsec;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (trackingData_ == null) {
                  TrackingData = new global::Mediapipe.TrackingData();
                }
                input.ReadMessage(TrackingData);
                break;
              }
              case 16: {
                FrameIdx = input.ReadInt32();
                break;
              }
              case 24: {
                TimestampUsec = input.ReadInt64();
                break;
              }
              case 32: {
                PrevTimestampUsec = input.ReadInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (trackingData_ == null) {
                  TrackingData = new global::Mediapipe.TrackingData();
                }
                input.ReadMessage(TrackingData);
                break;
              }
              case 16: {
                FrameIdx = input.ReadInt32();
                break;
              }
              case 24: {
                TimestampUsec = input.ReadInt64();
                break;
              }
              case 32: {
                PrevTimestampUsec = input.ReadInt64();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// TrackingData in compressed binary format. Obtainable via
  /// FlowPackager::EncodeTrackingData. Details of binary encode are below.
  /// </summary>
  public sealed partial class BinaryTrackingData : pb::IMessage<BinaryTrackingData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BinaryTrackingData> _parser = new pb::MessageParser<BinaryTrackingData>(() => new BinaryTrackingData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BinaryTrackingData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.FlowPackagerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BinaryTrackingData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BinaryTrackingData(BinaryTrackingData other) : this() {
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BinaryTrackingData Clone() {
      return new BinaryTrackingData(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private readonly static pb::ByteString DataDefaultValue = pb::ByteString.Empty;

    private pb::ByteString data_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Data {
      get { return data_ ?? DataDefaultValue; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasData {
      get { return data_ != null; }
    }
    /// <summary>Clears the value of the "data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearData() {
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BinaryTrackingData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BinaryTrackingData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasData) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasData) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasData) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasData) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BinaryTrackingData other) {
      if (other == null) {
        return;
      }
      if (other.HasData) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Stores offsets for random seek and time offsets for each frame of
  /// TrackingData. Stream offsets are specified relative w.r.t. end of metadata
  /// blob.
  /// Offsets specify start of the corresponding binary encoded TrackingContainer
  /// (for TrackingContainerFormat) or BinaryTrackingData proto (for
  /// TrackingContainerProto).
  /// </summary>
  public sealed partial class MetaData : pb::IMessage<MetaData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MetaData> _parser = new pb::MessageParser<MetaData>(() => new MetaData());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MetaData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.FlowPackagerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MetaData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MetaData(MetaData other) : this() {
      _hasBits0 = other._hasBits0;
      numFrames_ = other.numFrames_;
      trackOffsets_ = other.trackOffsets_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MetaData Clone() {
      return new MetaData(this);
    }

    /// <summary>Field number for the "num_frames" field.</summary>
    public const int NumFramesFieldNumber = 2;
    private readonly static uint NumFramesDefaultValue = 0;

    private uint numFrames_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint NumFrames {
      get { if ((_hasBits0 & 1) != 0) { return numFrames_; } else { return NumFramesDefaultValue; } }
      set {
        _hasBits0 |= 1;
        numFrames_ = value;
      }
    }
    /// <summary>Gets whether the "num_frames" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumFrames {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "num_frames" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumFrames() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "track_offsets" field.</summary>
    public const int TrackOffsetsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Mediapipe.MetaData.Types.TrackOffset> _repeated_trackOffsets_codec
        = pb::FieldCodec.ForMessage(26, global::Mediapipe.MetaData.Types.TrackOffset.Parser);
    private readonly pbc::RepeatedField<global::Mediapipe.MetaData.Types.TrackOffset> trackOffsets_ = new pbc::RepeatedField<global::Mediapipe.MetaData.Types.TrackOffset>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mediapipe.MetaData.Types.TrackOffset> TrackOffsets {
      get { return trackOffsets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MetaData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MetaData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumFrames != other.NumFrames) return false;
      if(!trackOffsets_.Equals(other.trackOffsets_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNumFrames) hash ^= NumFrames.GetHashCode();
      hash ^= trackOffsets_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasNumFrames) {
        output.WriteRawTag(21);
        output.WriteFixed32(NumFrames);
      }
      trackOffsets_.WriteTo(output, _repeated_trackOffsets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasNumFrames) {
        output.WriteRawTag(21);
        output.WriteFixed32(NumFrames);
      }
      trackOffsets_.WriteTo(ref output, _repeated_trackOffsets_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasNumFrames) {
        size += 1 + 4;
      }
      size += trackOffsets_.CalculateSize(_repeated_trackOffsets_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MetaData other) {
      if (other == null) {
        return;
      }
      if (other.HasNumFrames) {
        NumFrames = other.NumFrames;
      }
      trackOffsets_.Add(other.trackOffsets_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 21: {
            NumFrames = input.ReadFixed32();
            break;
          }
          case 26: {
            trackOffsets_.AddEntriesFrom(input, _repeated_trackOffsets_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 21: {
            NumFrames = input.ReadFixed32();
            break;
          }
          case 26: {
            trackOffsets_.AddEntriesFrom(ref input, _repeated_trackOffsets_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the MetaData message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class TrackOffset : pb::IMessage<TrackOffset>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<TrackOffset> _parser = new pb::MessageParser<TrackOffset>(() => new TrackOffset());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<TrackOffset> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mediapipe.MetaData.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TrackOffset() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TrackOffset(TrackOffset other) : this() {
          _hasBits0 = other._hasBits0;
          msec_ = other.msec_;
          streamOffset_ = other.streamOffset_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public TrackOffset Clone() {
          return new TrackOffset(this);
        }

        /// <summary>Field number for the "msec" field.</summary>
        public const int MsecFieldNumber = 1;
        private readonly static uint MsecDefaultValue = 0;

        private uint msec_;
        /// <summary>
        /// Time offset of the metadata in msec.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint Msec {
          get { if ((_hasBits0 & 1) != 0) { return msec_; } else { return MsecDefaultValue; } }
          set {
            _hasBits0 |= 1;
            msec_ = value;
          }
        }
        /// <summary>Gets whether the "msec" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasMsec {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "msec" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearMsec() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "stream_offset" field.</summary>
        public const int StreamOffsetFieldNumber = 2;
        private readonly static uint StreamOffsetDefaultValue = 0;

        private uint streamOffset_;
        /// <summary>
        /// Offset of TrackingContainer or
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint StreamOffset {
          get { if ((_hasBits0 & 2) != 0) { return streamOffset_; } else { return StreamOffsetDefaultValue; } }
          set {
            _hasBits0 |= 2;
            streamOffset_ = value;
          }
        }
        /// <summary>Gets whether the "stream_offset" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasStreamOffset {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "stream_offset" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearStreamOffset() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as TrackOffset);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(TrackOffset other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Msec != other.Msec) return false;
          if (StreamOffset != other.StreamOffset) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasMsec) hash ^= Msec.GetHashCode();
          if (HasStreamOffset) hash ^= StreamOffset.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasMsec) {
            output.WriteRawTag(13);
            output.WriteFixed32(Msec);
          }
          if (HasStreamOffset) {
            output.WriteRawTag(21);
            output.WriteFixed32(StreamOffset);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasMsec) {
            output.WriteRawTag(13);
            output.WriteFixed32(Msec);
          }
          if (HasStreamOffset) {
            output.WriteRawTag(21);
            output.WriteFixed32(StreamOffset);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasMsec) {
            size += 1 + 4;
          }
          if (HasStreamOffset) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(TrackOffset other) {
          if (other == null) {
            return;
          }
          if (other.HasMsec) {
            Msec = other.Msec;
          }
          if (other.HasStreamOffset) {
            StreamOffset = other.StreamOffset;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                Msec = input.ReadFixed32();
                break;
              }
              case 21: {
                StreamOffset = input.ReadFixed32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 13: {
                Msec = input.ReadFixed32();
                break;
              }
              case 21: {
                StreamOffset = input.ReadFixed32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  /// <summary>
  /// TrackingContainer is self-describing container format to store arbitrary
  /// chunks of binary data. Each container is typed via its 4 character header,
  /// versioned via an int, and followed by the size of the binary data and the
  /// actual data. Designed for clients without availability of protobuffer
  /// support.
  /// Note: This message is mainly used for documentation purposes and uses custom
  /// encoding as specified by FlowPackager::TrackingContainerFormatToBinary.
  /// Default binary size of a TrackingContainer (DO NOT CHANGE!):
  /// header:    4 byte +
  /// version:   4 byte +
  /// size:      4 byte +
  /// data       #size
  /// SUM:       12 + #size.
  /// </summary>
  public sealed partial class TrackingContainer : pb::IMessage<TrackingContainer>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrackingContainer> _parser = new pb::MessageParser<TrackingContainer>(() => new TrackingContainer());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TrackingContainer> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.FlowPackagerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrackingContainer() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrackingContainer(TrackingContainer other) : this() {
      _hasBits0 = other._hasBits0;
      header_ = other.header_;
      version_ = other.version_;
      size_ = other.size_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrackingContainer Clone() {
      return new TrackingContainer(this);
    }

    /// <summary>Field number for the "header" field.</summary>
    public const int HeaderFieldNumber = 1;
    private readonly static string HeaderDefaultValue = "";

    private string header_;
    /// <summary>
    /// 4 character header.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Header {
      get { return header_ ?? HeaderDefaultValue; }
      set {
        header_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "header" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHeader {
      get { return header_ != null; }
    }
    /// <summary>Clears the value of the "header" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHeader() {
      header_ = null;
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private readonly static uint VersionDefaultValue = 1;

    private uint version_;
    /// <summary>
    /// Version information.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Version {
      get { if ((_hasBits0 & 1) != 0) { return version_; } else { return VersionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        version_ = value;
      }
    }
    /// <summary>Gets whether the "version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVersion {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVersion() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 3;
    private readonly static uint SizeDefaultValue = 0;

    private uint size_;
    /// <summary>
    /// Size of binary data held by container
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Size {
      get { if ((_hasBits0 & 2) != 0) { return size_; } else { return SizeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        size_ = value;
      }
    }
    /// <summary>Gets whether the "size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSize {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSize() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private readonly static pb::ByteString DataDefaultValue = pb::ByteString.Empty;

    private pb::ByteString data_;
    /// <summary>
    /// Binary data encoded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Data {
      get { return data_ ?? DataDefaultValue; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasData {
      get { return data_ != null; }
    }
    /// <summary>Clears the value of the "data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearData() {
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TrackingContainer);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TrackingContainer other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Header != other.Header) return false;
      if (Version != other.Version) return false;
      if (Size != other.Size) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasHeader) hash ^= Header.GetHashCode();
      if (HasVersion) hash ^= Version.GetHashCode();
      if (HasSize) hash ^= Size.GetHashCode();
      if (HasData) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasHeader) {
        output.WriteRawTag(10);
        output.WriteString(Header);
      }
      if (HasVersion) {
        output.WriteRawTag(21);
        output.WriteFixed32(Version);
      }
      if (HasSize) {
        output.WriteRawTag(29);
        output.WriteFixed32(Size);
      }
      if (HasData) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasHeader) {
        output.WriteRawTag(10);
        output.WriteString(Header);
      }
      if (HasVersion) {
        output.WriteRawTag(21);
        output.WriteFixed32(Version);
      }
      if (HasSize) {
        output.WriteRawTag(29);
        output.WriteFixed32(Size);
      }
      if (HasData) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasHeader) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Header);
      }
      if (HasVersion) {
        size += 1 + 4;
      }
      if (HasSize) {
        size += 1 + 4;
      }
      if (HasData) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TrackingContainer other) {
      if (other == null) {
        return;
      }
      if (other.HasHeader) {
        Header = other.Header;
      }
      if (other.HasVersion) {
        Version = other.Version;
      }
      if (other.HasSize) {
        Size = other.Size;
      }
      if (other.HasData) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Header = input.ReadString();
            break;
          }
          case 21: {
            Version = input.ReadFixed32();
            break;
          }
          case 29: {
            Size = input.ReadFixed32();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Header = input.ReadString();
            break;
          }
          case 21: {
            Version = input.ReadFixed32();
            break;
          }
          case 29: {
            Size = input.ReadFixed32();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Container format for clients without proto support (written via
  /// FlowPackager::TrackingContainerFormatToBinary and read via
  /// FlowPackager::TrackingContainerFormatFromBinary).
  /// Proto here is intermediate format for documentationa and internal use.
  /// Stores multiple TrackingContainers of different types.
  /// Meta data is storred first, to facilitate random seek (via stream offset
  /// positions) to arbitrary binary TrackinData. Termination container signals end
  /// of stream.
  /// </summary>
  public sealed partial class TrackingContainerFormat : pb::IMessage<TrackingContainerFormat>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrackingContainerFormat> _parser = new pb::MessageParser<TrackingContainerFormat>(() => new TrackingContainerFormat());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TrackingContainerFormat> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.FlowPackagerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrackingContainerFormat() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrackingContainerFormat(TrackingContainerFormat other) : this() {
      metaData_ = other.metaData_ != null ? other.metaData_.Clone() : null;
      trackData_ = other.trackData_.Clone();
      termData_ = other.termData_ != null ? other.termData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrackingContainerFormat Clone() {
      return new TrackingContainerFormat(this);
    }

    /// <summary>Field number for the "meta_data" field.</summary>
    public const int MetaDataFieldNumber = 1;
    private global::Mediapipe.TrackingContainer metaData_;
    /// <summary>
    /// Wraps binary meta data, via
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.TrackingContainer MetaData {
      get { return metaData_; }
      set {
        metaData_ = value;
      }
    }

    /// <summary>Field number for the "track_data" field.</summary>
    public const int TrackDataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Mediapipe.TrackingContainer> _repeated_trackData_codec
        = pb::FieldCodec.ForMessage(18, global::Mediapipe.TrackingContainer.Parser);
    private readonly pbc::RepeatedField<global::Mediapipe.TrackingContainer> trackData_ = new pbc::RepeatedField<global::Mediapipe.TrackingContainer>();
    /// <summary>
    /// custom encode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mediapipe.TrackingContainer> TrackData {
      get { return trackData_; }
    }

    /// <summary>Field number for the "term_data" field.</summary>
    public const int TermDataFieldNumber = 3;
    private global::Mediapipe.TrackingContainer termData_;
    /// <summary>
    /// Add new TrackingContainers above before end of stream indicator.
    /// Zero sized termination container with TrackingContainer::header = "TERM".
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.TrackingContainer TermData {
      get { return termData_; }
      set {
        termData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TrackingContainerFormat);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TrackingContainerFormat other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MetaData, other.MetaData)) return false;
      if(!trackData_.Equals(other.trackData_)) return false;
      if (!object.Equals(TermData, other.TermData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (metaData_ != null) hash ^= MetaData.GetHashCode();
      hash ^= trackData_.GetHashCode();
      if (termData_ != null) hash ^= TermData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (metaData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MetaData);
      }
      trackData_.WriteTo(output, _repeated_trackData_codec);
      if (termData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TermData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (metaData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MetaData);
      }
      trackData_.WriteTo(ref output, _repeated_trackData_codec);
      if (termData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(TermData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (metaData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MetaData);
      }
      size += trackData_.CalculateSize(_repeated_trackData_codec);
      if (termData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TermData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TrackingContainerFormat other) {
      if (other == null) {
        return;
      }
      if (other.metaData_ != null) {
        if (metaData_ == null) {
          MetaData = new global::Mediapipe.TrackingContainer();
        }
        MetaData.MergeFrom(other.MetaData);
      }
      trackData_.Add(other.trackData_);
      if (other.termData_ != null) {
        if (termData_ == null) {
          TermData = new global::Mediapipe.TrackingContainer();
        }
        TermData.MergeFrom(other.TermData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metaData_ == null) {
              MetaData = new global::Mediapipe.TrackingContainer();
            }
            input.ReadMessage(MetaData);
            break;
          }
          case 18: {
            trackData_.AddEntriesFrom(input, _repeated_trackData_codec);
            break;
          }
          case 26: {
            if (termData_ == null) {
              TermData = new global::Mediapipe.TrackingContainer();
            }
            input.ReadMessage(TermData);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (metaData_ == null) {
              MetaData = new global::Mediapipe.TrackingContainer();
            }
            input.ReadMessage(MetaData);
            break;
          }
          case 18: {
            trackData_.AddEntriesFrom(ref input, _repeated_trackData_codec);
            break;
          }
          case 26: {
            if (termData_ == null) {
              TermData = new global::Mediapipe.TrackingContainer();
            }
            input.ReadMessage(TermData);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Simplified proto format of above TrackingContainerFormat. Instead of using
  /// self-describing TrackingContainer's, we simply use the proto wire format for
  /// encoding and decoding (proto format is typed and versioned via ids).
  /// </summary>
  public sealed partial class TrackingContainerProto : pb::IMessage<TrackingContainerProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrackingContainerProto> _parser = new pb::MessageParser<TrackingContainerProto>(() => new TrackingContainerProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TrackingContainerProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.FlowPackagerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrackingContainerProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrackingContainerProto(TrackingContainerProto other) : this() {
      metaData_ = other.metaData_ != null ? other.metaData_.Clone() : null;
      trackData_ = other.trackData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrackingContainerProto Clone() {
      return new TrackingContainerProto(this);
    }

    /// <summary>Field number for the "meta_data" field.</summary>
    public const int MetaDataFieldNumber = 1;
    private global::Mediapipe.MetaData metaData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.MetaData MetaData {
      get { return metaData_; }
      set {
        metaData_ = value;
      }
    }

    /// <summary>Field number for the "track_data" field.</summary>
    public const int TrackDataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Mediapipe.BinaryTrackingData> _repeated_trackData_codec
        = pb::FieldCodec.ForMessage(18, global::Mediapipe.BinaryTrackingData.Parser);
    private readonly pbc::RepeatedField<global::Mediapipe.BinaryTrackingData> trackData_ = new pbc::RepeatedField<global::Mediapipe.BinaryTrackingData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mediapipe.BinaryTrackingData> TrackData {
      get { return trackData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TrackingContainerProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TrackingContainerProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MetaData, other.MetaData)) return false;
      if(!trackData_.Equals(other.trackData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (metaData_ != null) hash ^= MetaData.GetHashCode();
      hash ^= trackData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (metaData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MetaData);
      }
      trackData_.WriteTo(output, _repeated_trackData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (metaData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MetaData);
      }
      trackData_.WriteTo(ref output, _repeated_trackData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (metaData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MetaData);
      }
      size += trackData_.CalculateSize(_repeated_trackData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TrackingContainerProto other) {
      if (other == null) {
        return;
      }
      if (other.metaData_ != null) {
        if (metaData_ == null) {
          MetaData = new global::Mediapipe.MetaData();
        }
        MetaData.MergeFrom(other.MetaData);
      }
      trackData_.Add(other.trackData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metaData_ == null) {
              MetaData = new global::Mediapipe.MetaData();
            }
            input.ReadMessage(MetaData);
            break;
          }
          case 18: {
            trackData_.AddEntriesFrom(input, _repeated_trackData_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (metaData_ == null) {
              MetaData = new global::Mediapipe.MetaData();
            }
            input.ReadMessage(MetaData);
            break;
          }
          case 18: {
            trackData_.AddEntriesFrom(ref input, _repeated_trackData_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Options controlling compression and encoding.
  /// </summary>
  public sealed partial class FlowPackagerOptions : pb::IMessage<FlowPackagerOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FlowPackagerOptions> _parser = new pb::MessageParser<FlowPackagerOptions>(() => new FlowPackagerOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FlowPackagerOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.FlowPackagerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FlowPackagerOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FlowPackagerOptions(FlowPackagerOptions other) : this() {
      _hasBits0 = other._hasBits0;
      domainWidth_ = other.domainWidth_;
      domainHeight_ = other.domainHeight_;
      binaryTrackingDataSupport_ = other.binaryTrackingDataSupport_;
      useHighProfile_ = other.useHighProfile_;
      highFidelity16BitEncode_ = other.highFidelity16BitEncode_;
      highProfileReuseThreshold_ = other.highProfileReuseThreshold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FlowPackagerOptions Clone() {
      return new FlowPackagerOptions(this);
    }

    /// <summary>Field number for the "domain_width" field.</summary>
    public const int DomainWidthFieldNumber = 1;
    private readonly static int DomainWidthDefaultValue = 256;

    private int domainWidth_;
    /// <summary>
    /// Tracking data is resolution independent specified w.r.t.
    /// specified domain. Only values &lt;= 256 are supported if binary tracking data
    /// is requested to be supported (see below).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DomainWidth {
      get { if ((_hasBits0 & 1) != 0) { return domainWidth_; } else { return DomainWidthDefaultValue; } }
      set {
        _hasBits0 |= 1;
        domainWidth_ = value;
      }
    }
    /// <summary>Gets whether the "domain_width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDomainWidth {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "domain_width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDomainWidth() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "domain_height" field.</summary>
    public const int DomainHeightFieldNumber = 2;
    private readonly static int DomainHeightDefaultValue = 192;

    private int domainHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DomainHeight {
      get { if ((_hasBits0 & 2) != 0) { return domainHeight_; } else { return DomainHeightDefaultValue; } }
      set {
        _hasBits0 |= 2;
        domainHeight_ = value;
      }
    }
    /// <summary>Gets whether the "domain_height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDomainHeight {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "domain_height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDomainHeight() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "binary_tracking_data_support" field.</summary>
    public const int BinaryTrackingDataSupportFieldNumber = 6;
    private readonly static bool BinaryTrackingDataSupportDefaultValue = true;

    private bool binaryTrackingDataSupport_;
    /// <summary>
    /// Needs to be set for calls to FlowPackager::EncodeTrackingData. If encoding
    /// is not required, can be set to false in which case a higher domain_width
    /// can be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool BinaryTrackingDataSupport {
      get { if ((_hasBits0 & 32) != 0) { return binaryTrackingDataSupport_; } else { return BinaryTrackingDataSupportDefaultValue; } }
      set {
        _hasBits0 |= 32;
        binaryTrackingDataSupport_ = value;
      }
    }
    /// <summary>Gets whether the "binary_tracking_data_support" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBinaryTrackingDataSupport {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "binary_tracking_data_support" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBinaryTrackingDataSupport() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "use_high_profile" field.</summary>
    public const int UseHighProfileFieldNumber = 3;
    private readonly static bool UseHighProfileDefaultValue = false;

    private bool useHighProfile_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UseHighProfile {
      get { if ((_hasBits0 & 4) != 0) { return useHighProfile_; } else { return UseHighProfileDefaultValue; } }
      set {
        _hasBits0 |= 4;
        useHighProfile_ = value;
      }
    }
    /// <summary>Gets whether the "use_high_profile" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUseHighProfile {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "use_high_profile" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUseHighProfile() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "high_fidelity_16bit_encode" field.</summary>
    public const int HighFidelity16BitEncodeFieldNumber = 4;
    private readonly static bool HighFidelity16BitEncodeDefaultValue = true;

    private bool highFidelity16BitEncode_;
    /// <summary>
    /// If set uses 16 bit encode for vector data, in BinaryTrackingData,
    /// otherwise only 8 bits are used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HighFidelity16BitEncode {
      get { if ((_hasBits0 & 8) != 0) { return highFidelity16BitEncode_; } else { return HighFidelity16BitEncodeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        highFidelity16BitEncode_ = value;
      }
    }
    /// <summary>Gets whether the "high_fidelity_16bit_encode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHighFidelity16BitEncode {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "high_fidelity_16bit_encode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHighFidelity16BitEncode() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "high_profile_reuse_threshold" field.</summary>
    public const int HighProfileReuseThresholdFieldNumber = 5;
    private readonly static float HighProfileReuseThresholdDefaultValue = 0.5F;

    private float highProfileReuseThreshold_;
    /// <summary>
    /// In high profile encode, re-use previously encoded vector when absolute
    /// difference to current vector is below threshold.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HighProfileReuseThreshold {
      get { if ((_hasBits0 & 16) != 0) { return highProfileReuseThreshold_; } else { return HighProfileReuseThresholdDefaultValue; } }
      set {
        _hasBits0 |= 16;
        highProfileReuseThreshold_ = value;
      }
    }
    /// <summary>Gets whether the "high_profile_reuse_threshold" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHighProfileReuseThreshold {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "high_profile_reuse_threshold" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHighProfileReuseThreshold() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FlowPackagerOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FlowPackagerOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DomainWidth != other.DomainWidth) return false;
      if (DomainHeight != other.DomainHeight) return false;
      if (BinaryTrackingDataSupport != other.BinaryTrackingDataSupport) return false;
      if (UseHighProfile != other.UseHighProfile) return false;
      if (HighFidelity16BitEncode != other.HighFidelity16BitEncode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HighProfileReuseThreshold, other.HighProfileReuseThreshold)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasDomainWidth) hash ^= DomainWidth.GetHashCode();
      if (HasDomainHeight) hash ^= DomainHeight.GetHashCode();
      if (HasBinaryTrackingDataSupport) hash ^= BinaryTrackingDataSupport.GetHashCode();
      if (HasUseHighProfile) hash ^= UseHighProfile.GetHashCode();
      if (HasHighFidelity16BitEncode) hash ^= HighFidelity16BitEncode.GetHashCode();
      if (HasHighProfileReuseThreshold) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HighProfileReuseThreshold);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasDomainWidth) {
        output.WriteRawTag(8);
        output.WriteInt32(DomainWidth);
      }
      if (HasDomainHeight) {
        output.WriteRawTag(16);
        output.WriteInt32(DomainHeight);
      }
      if (HasUseHighProfile) {
        output.WriteRawTag(24);
        output.WriteBool(UseHighProfile);
      }
      if (HasHighFidelity16BitEncode) {
        output.WriteRawTag(32);
        output.WriteBool(HighFidelity16BitEncode);
      }
      if (HasHighProfileReuseThreshold) {
        output.WriteRawTag(45);
        output.WriteFloat(HighProfileReuseThreshold);
      }
      if (HasBinaryTrackingDataSupport) {
        output.WriteRawTag(48);
        output.WriteBool(BinaryTrackingDataSupport);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasDomainWidth) {
        output.WriteRawTag(8);
        output.WriteInt32(DomainWidth);
      }
      if (HasDomainHeight) {
        output.WriteRawTag(16);
        output.WriteInt32(DomainHeight);
      }
      if (HasUseHighProfile) {
        output.WriteRawTag(24);
        output.WriteBool(UseHighProfile);
      }
      if (HasHighFidelity16BitEncode) {
        output.WriteRawTag(32);
        output.WriteBool(HighFidelity16BitEncode);
      }
      if (HasHighProfileReuseThreshold) {
        output.WriteRawTag(45);
        output.WriteFloat(HighProfileReuseThreshold);
      }
      if (HasBinaryTrackingDataSupport) {
        output.WriteRawTag(48);
        output.WriteBool(BinaryTrackingDataSupport);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasDomainWidth) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DomainWidth);
      }
      if (HasDomainHeight) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DomainHeight);
      }
      if (HasBinaryTrackingDataSupport) {
        size += 1 + 1;
      }
      if (HasUseHighProfile) {
        size += 1 + 1;
      }
      if (HasHighFidelity16BitEncode) {
        size += 1 + 1;
      }
      if (HasHighProfileReuseThreshold) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FlowPackagerOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasDomainWidth) {
        DomainWidth = other.DomainWidth;
      }
      if (other.HasDomainHeight) {
        DomainHeight = other.DomainHeight;
      }
      if (other.HasBinaryTrackingDataSupport) {
        BinaryTrackingDataSupport = other.BinaryTrackingDataSupport;
      }
      if (other.HasUseHighProfile) {
        UseHighProfile = other.UseHighProfile;
      }
      if (other.HasHighFidelity16BitEncode) {
        HighFidelity16BitEncode = other.HighFidelity16BitEncode;
      }
      if (other.HasHighProfileReuseThreshold) {
        HighProfileReuseThreshold = other.HighProfileReuseThreshold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DomainWidth = input.ReadInt32();
            break;
          }
          case 16: {
            DomainHeight = input.ReadInt32();
            break;
          }
          case 24: {
            UseHighProfile = input.ReadBool();
            break;
          }
          case 32: {
            HighFidelity16BitEncode = input.ReadBool();
            break;
          }
          case 45: {
            HighProfileReuseThreshold = input.ReadFloat();
            break;
          }
          case 48: {
            BinaryTrackingDataSupport = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            DomainWidth = input.ReadInt32();
            break;
          }
          case 16: {
            DomainHeight = input.ReadInt32();
            break;
          }
          case 24: {
            UseHighProfile = input.ReadBool();
            break;
          }
          case 32: {
            HighFidelity16BitEncode = input.ReadBool();
            break;
          }
          case 45: {
            HighProfileReuseThreshold = input.ReadFloat();
            break;
          }
          case 48: {
            BinaryTrackingDataSupport = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the FlowPackagerOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// High profile encoding flags.
      /// </summary>
      public enum HighProfileEncoding {
        [pbr::OriginalName("ADVANCE_FLAG")] AdvanceFlag = 128,
        [pbr::OriginalName("DOUBLE_INDEX_ENCODE")] DoubleIndexEncode = 64,
        [pbr::OriginalName("INDEX_MASK")] IndexMask = 63,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
