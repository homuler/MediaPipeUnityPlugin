// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/util/tracking/frame_selection.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/util/tracking/frame_selection.proto</summary>
  public static partial class FrameSelectionReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/util/tracking/frame_selection.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FrameSelectionReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ci1tZWRpYXBpcGUvdXRpbC90cmFja2luZy9mcmFtZV9zZWxlY3Rpb24ucHJv",
            "dG8SCW1lZGlhcGlwZRorbWVkaWFwaXBlL3V0aWwvdHJhY2tpbmcvY2FtZXJh",
            "X21vdGlvbi5wcm90bxpAbWVkaWFwaXBlL3V0aWwvdHJhY2tpbmcvZnJhbWVf",
            "c2VsZWN0aW9uX3NvbHV0aW9uX2V2YWx1YXRvci5wcm90bxopbWVkaWFwaXBl",
            "L3V0aWwvdHJhY2tpbmcvcmVnaW9uX2Zsb3cucHJvdG8iZQoXRnJhbWVTZWxl",
            "Y3Rpb25UaW1lc3RhbXASEQoJdGltZXN0YW1wGAEgASgDEhEKCWZyYW1lX2lk",
            "eBgCIAEoBRIkChhwcm9jZXNzZWRfZnJvbV90aW1lc3RhbXAYAyABKAM6Ai0x",
            "IsYBChRGcmFtZVNlbGVjdGlvblJlc3VsdBIRCgl0aW1lc3RhbXAYASABKAMS",
            "EQoJZnJhbWVfaWR4GAIgASgFEi4KDWNhbWVyYV9tb3Rpb24YAyABKAsyFy5t",
            "ZWRpYXBpcGUuQ2FtZXJhTW90aW9uEjIKCGZlYXR1cmVzGAQgASgLMiAubWVk",
            "aWFwaXBlLlJlZ2lvbkZsb3dGZWF0dXJlTGlzdBIkChhwcm9jZXNzZWRfZnJv",
            "bV90aW1lc3RhbXAYBSABKAM6Ai0xItwBChdGcmFtZVNlbGVjdGlvbkNyaXRl",
            "cmlvbhIYCg1zYW1wbGluZ19yYXRlGAEgASgFOgEwEhwKEGJhbmR3aWR0aF9m",
            "cmFtZXMYAiABKAI6AjUwEh8KFHNlYXJjaF9yYWRpdXNfZnJhbWVzGAMgASgF",
            "OgExEkoKEnNvbHV0aW9uX2V2YWx1YXRvchgEIAEoCzIuLm1lZGlhcGlwZS5G",
            "cmFtZVNlbGVjdGlvblNvbHV0aW9uRXZhbHVhdG9yVHlwZRIcChFtYXhfb3V0",
            "cHV0X2ZyYW1lcxgFIAEoBToBMCJnChVGcmFtZVNlbGVjdGlvbk9wdGlvbnMS",
            "NQoJY3JpdGVyaW9uGAEgAygLMiIubWVkaWFwaXBlLkZyYW1lU2VsZWN0aW9u",
            "Q3JpdGVyaW9uEhcKCmNodW5rX3NpemUYAiABKAU6AzEwMA=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mediapipe.CameraMotionReflection.Descriptor, global::Mediapipe.FrameSelectionSolutionEvaluatorReflection.Descriptor, global::Mediapipe.RegionFlowReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.FrameSelectionTimestamp), global::Mediapipe.FrameSelectionTimestamp.Parser, new[]{ "Timestamp", "FrameIdx", "ProcessedFromTimestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.FrameSelectionResult), global::Mediapipe.FrameSelectionResult.Parser, new[]{ "Timestamp", "FrameIdx", "CameraMotion", "Features", "ProcessedFromTimestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.FrameSelectionCriterion), global::Mediapipe.FrameSelectionCriterion.Parser, new[]{ "SamplingRate", "BandwidthFrames", "SearchRadiusFrames", "SolutionEvaluator", "MaxOutputFrames" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.FrameSelectionOptions), global::Mediapipe.FrameSelectionOptions.Parser, new[]{ "Criterion", "ChunkSize" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Stores selected timestamps and corresponding frame index.
  /// </summary>
  public sealed partial class FrameSelectionTimestamp : pb::IMessage<FrameSelectionTimestamp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FrameSelectionTimestamp> _parser = new pb::MessageParser<FrameSelectionTimestamp>(() => new FrameSelectionTimestamp());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FrameSelectionTimestamp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.FrameSelectionReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FrameSelectionTimestamp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FrameSelectionTimestamp(FrameSelectionTimestamp other) : this() {
      _hasBits0 = other._hasBits0;
      timestamp_ = other.timestamp_;
      frameIdx_ = other.frameIdx_;
      processedFromTimestamp_ = other.processedFromTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FrameSelectionTimestamp Clone() {
      return new FrameSelectionTimestamp(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private readonly static long TimestampDefaultValue = 0L;

    private long timestamp_;
    /// <summary>
    /// Timestamp of the selected frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Timestamp {
      get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "frame_idx" field.</summary>
    public const int FrameIdxFieldNumber = 2;
    private readonly static int FrameIdxDefaultValue = 0;

    private int frameIdx_;
    /// <summary>
    /// Frame index of the selected frame in the initial video stream.  If this
    /// timestamp was manufactured, this will be the index of the initial frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FrameIdx {
      get { if ((_hasBits0 & 2) != 0) { return frameIdx_; } else { return FrameIdxDefaultValue; } }
      set {
        _hasBits0 |= 2;
        frameIdx_ = value;
      }
    }
    /// <summary>Gets whether the "frame_idx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFrameIdx {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "frame_idx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFrameIdx() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "processed_from_timestamp" field.</summary>
    public const int ProcessedFromTimestampFieldNumber = 3;
    private readonly static long ProcessedFromTimestampDefaultValue = -1L;

    private long processedFromTimestamp_;
    /// <summary>
    /// If this timestamp was manufactured, the timestamp of the original frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ProcessedFromTimestamp {
      get { if ((_hasBits0 & 4) != 0) { return processedFromTimestamp_; } else { return ProcessedFromTimestampDefaultValue; } }
      set {
        _hasBits0 |= 4;
        processedFromTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "processed_from_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProcessedFromTimestamp {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "processed_from_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProcessedFromTimestamp() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FrameSelectionTimestamp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FrameSelectionTimestamp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (FrameIdx != other.FrameIdx) return false;
      if (ProcessedFromTimestamp != other.ProcessedFromTimestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasFrameIdx) hash ^= FrameIdx.GetHashCode();
      if (HasProcessedFromTimestamp) hash ^= ProcessedFromTimestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTimestamp) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (HasFrameIdx) {
        output.WriteRawTag(16);
        output.WriteInt32(FrameIdx);
      }
      if (HasProcessedFromTimestamp) {
        output.WriteRawTag(24);
        output.WriteInt64(ProcessedFromTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTimestamp) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (HasFrameIdx) {
        output.WriteRawTag(16);
        output.WriteInt32(FrameIdx);
      }
      if (HasProcessedFromTimestamp) {
        output.WriteRawTag(24);
        output.WriteInt64(ProcessedFromTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (HasFrameIdx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameIdx);
      }
      if (HasProcessedFromTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProcessedFromTimestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FrameSelectionTimestamp other) {
      if (other == null) {
        return;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasFrameIdx) {
        FrameIdx = other.FrameIdx;
      }
      if (other.HasProcessedFromTimestamp) {
        ProcessedFromTimestamp = other.ProcessedFromTimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 16: {
            FrameIdx = input.ReadInt32();
            break;
          }
          case 24: {
            ProcessedFromTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 16: {
            FrameIdx = input.ReadInt32();
            break;
          }
          case 24: {
            ProcessedFromTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Stores the result of the frame selection, with composited features.
  /// Next index: 6
  /// </summary>
  public sealed partial class FrameSelectionResult : pb::IMessage<FrameSelectionResult>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FrameSelectionResult> _parser = new pb::MessageParser<FrameSelectionResult>(() => new FrameSelectionResult());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FrameSelectionResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.FrameSelectionReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FrameSelectionResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FrameSelectionResult(FrameSelectionResult other) : this() {
      _hasBits0 = other._hasBits0;
      timestamp_ = other.timestamp_;
      frameIdx_ = other.frameIdx_;
      cameraMotion_ = other.cameraMotion_ != null ? other.cameraMotion_.Clone() : null;
      features_ = other.features_ != null ? other.features_.Clone() : null;
      processedFromTimestamp_ = other.processedFromTimestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FrameSelectionResult Clone() {
      return new FrameSelectionResult(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private readonly static long TimestampDefaultValue = 0L;

    private long timestamp_;
    /// <summary>
    /// Timestamp of the selected frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long Timestamp {
      get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "frame_idx" field.</summary>
    public const int FrameIdxFieldNumber = 2;
    private readonly static int FrameIdxDefaultValue = 0;

    private int frameIdx_;
    /// <summary>
    /// Frame index of the selected frame in the initial video stream.  If this
    /// timestamp was manufactured, this will be the index of the initial frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FrameIdx {
      get { if ((_hasBits0 & 2) != 0) { return frameIdx_; } else { return FrameIdxDefaultValue; } }
      set {
        _hasBits0 |= 2;
        frameIdx_ = value;
      }
    }
    /// <summary>Gets whether the "frame_idx" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFrameIdx {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "frame_idx" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFrameIdx() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "camera_motion" field.</summary>
    public const int CameraMotionFieldNumber = 3;
    private global::Mediapipe.CameraMotion cameraMotion_;
    /// <summary>
    /// CameraMotion from selected item to previous selected item.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.CameraMotion CameraMotion {
      get { return cameraMotion_; }
      set {
        cameraMotion_ = value;
      }
    }

    /// <summary>Field number for the "features" field.</summary>
    public const int FeaturesFieldNumber = 4;
    private global::Mediapipe.RegionFlowFeatureList features_;
    /// <summary>
    /// Features from selected item to previous selected item.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.RegionFlowFeatureList Features {
      get { return features_; }
      set {
        features_ = value;
      }
    }

    /// <summary>Field number for the "processed_from_timestamp" field.</summary>
    public const int ProcessedFromTimestampFieldNumber = 5;
    private readonly static long ProcessedFromTimestampDefaultValue = -1L;

    private long processedFromTimestamp_;
    /// <summary>
    /// If this FrameSelectionResult was the result of processing a previous one,
    /// the timestamp of the original frame.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ProcessedFromTimestamp {
      get { if ((_hasBits0 & 4) != 0) { return processedFromTimestamp_; } else { return ProcessedFromTimestampDefaultValue; } }
      set {
        _hasBits0 |= 4;
        processedFromTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "processed_from_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProcessedFromTimestamp {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "processed_from_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProcessedFromTimestamp() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FrameSelectionResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FrameSelectionResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (FrameIdx != other.FrameIdx) return false;
      if (!object.Equals(CameraMotion, other.CameraMotion)) return false;
      if (!object.Equals(Features, other.Features)) return false;
      if (ProcessedFromTimestamp != other.ProcessedFromTimestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasFrameIdx) hash ^= FrameIdx.GetHashCode();
      if (cameraMotion_ != null) hash ^= CameraMotion.GetHashCode();
      if (features_ != null) hash ^= Features.GetHashCode();
      if (HasProcessedFromTimestamp) hash ^= ProcessedFromTimestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTimestamp) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (HasFrameIdx) {
        output.WriteRawTag(16);
        output.WriteInt32(FrameIdx);
      }
      if (cameraMotion_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CameraMotion);
      }
      if (features_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Features);
      }
      if (HasProcessedFromTimestamp) {
        output.WriteRawTag(40);
        output.WriteInt64(ProcessedFromTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTimestamp) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (HasFrameIdx) {
        output.WriteRawTag(16);
        output.WriteInt32(FrameIdx);
      }
      if (cameraMotion_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CameraMotion);
      }
      if (features_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Features);
      }
      if (HasProcessedFromTimestamp) {
        output.WriteRawTag(40);
        output.WriteInt64(ProcessedFromTimestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (HasFrameIdx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FrameIdx);
      }
      if (cameraMotion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CameraMotion);
      }
      if (features_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Features);
      }
      if (HasProcessedFromTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProcessedFromTimestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FrameSelectionResult other) {
      if (other == null) {
        return;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasFrameIdx) {
        FrameIdx = other.FrameIdx;
      }
      if (other.cameraMotion_ != null) {
        if (cameraMotion_ == null) {
          CameraMotion = new global::Mediapipe.CameraMotion();
        }
        CameraMotion.MergeFrom(other.CameraMotion);
      }
      if (other.features_ != null) {
        if (features_ == null) {
          Features = new global::Mediapipe.RegionFlowFeatureList();
        }
        Features.MergeFrom(other.Features);
      }
      if (other.HasProcessedFromTimestamp) {
        ProcessedFromTimestamp = other.ProcessedFromTimestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 16: {
            FrameIdx = input.ReadInt32();
            break;
          }
          case 26: {
            if (cameraMotion_ == null) {
              CameraMotion = new global::Mediapipe.CameraMotion();
            }
            input.ReadMessage(CameraMotion);
            break;
          }
          case 34: {
            if (features_ == null) {
              Features = new global::Mediapipe.RegionFlowFeatureList();
            }
            input.ReadMessage(Features);
            break;
          }
          case 40: {
            ProcessedFromTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 16: {
            FrameIdx = input.ReadInt32();
            break;
          }
          case 26: {
            if (cameraMotion_ == null) {
              CameraMotion = new global::Mediapipe.CameraMotion();
            }
            input.ReadMessage(CameraMotion);
            break;
          }
          case 34: {
            if (features_ == null) {
              Features = new global::Mediapipe.RegionFlowFeatureList();
            }
            input.ReadMessage(Features);
            break;
          }
          case 40: {
            ProcessedFromTimestamp = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Next index: 7
  /// </summary>
  public sealed partial class FrameSelectionCriterion : pb::IMessage<FrameSelectionCriterion>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FrameSelectionCriterion> _parser = new pb::MessageParser<FrameSelectionCriterion>(() => new FrameSelectionCriterion());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FrameSelectionCriterion> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.FrameSelectionReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FrameSelectionCriterion() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FrameSelectionCriterion(FrameSelectionCriterion other) : this() {
      _hasBits0 = other._hasBits0;
      samplingRate_ = other.samplingRate_;
      bandwidthFrames_ = other.bandwidthFrames_;
      searchRadiusFrames_ = other.searchRadiusFrames_;
      solutionEvaluator_ = other.solutionEvaluator_ != null ? other.solutionEvaluator_.Clone() : null;
      maxOutputFrames_ = other.maxOutputFrames_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FrameSelectionCriterion Clone() {
      return new FrameSelectionCriterion(this);
    }

    /// <summary>Field number for the "sampling_rate" field.</summary>
    public const int SamplingRateFieldNumber = 1;
    private readonly static int SamplingRateDefaultValue = 0;

    private int samplingRate_;
    /// <summary>
    /// Interval at which frames should be sampled; set to zero if sampling should
    /// not be enforced (i.e. selection is performed w.r.t. other criteria).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SamplingRate {
      get { if ((_hasBits0 & 1) != 0) { return samplingRate_; } else { return SamplingRateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        samplingRate_ = value;
      }
    }
    /// <summary>Gets whether the "sampling_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSamplingRate {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "sampling_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSamplingRate() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "bandwidth_frames" field.</summary>
    public const int BandwidthFramesFieldNumber = 2;
    private readonly static float BandwidthFramesDefaultValue = 50F;

    private float bandwidthFrames_;
    /// <summary>
    /// Bandwidth used during dynamic programming. The larger the bandwidth the
    /// more accurate the result w.r.t. the specified sampling rate. Smaller
    /// bandwidth's bias the solution suboptimally to center around the mean
    /// frame numbers of the sampling rate.
    /// If in (0, 1), assumed to specify fraction of total number of input frames,
    /// otherwise must be an integer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float BandwidthFrames {
      get { if ((_hasBits0 & 2) != 0) { return bandwidthFrames_; } else { return BandwidthFramesDefaultValue; } }
      set {
        _hasBits0 |= 2;
        bandwidthFrames_ = value;
      }
    }
    /// <summary>Gets whether the "bandwidth_frames" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBandwidthFrames {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "bandwidth_frames" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBandwidthFrames() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "search_radius_frames" field.</summary>
    public const int SearchRadiusFramesFieldNumber = 3;
    private readonly static int SearchRadiusFramesDefaultValue = 1;

    private int searchRadiusFrames_;
    /// <summary>
    /// Search radius for dynamic programming (how many frames you are allowed to
    /// search around the previous frame).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SearchRadiusFrames {
      get { if ((_hasBits0 & 4) != 0) { return searchRadiusFrames_; } else { return SearchRadiusFramesDefaultValue; } }
      set {
        _hasBits0 |= 4;
        searchRadiusFrames_ = value;
      }
    }
    /// <summary>Gets whether the "search_radius_frames" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSearchRadiusFrames {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "search_radius_frames" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSearchRadiusFrames() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "solution_evaluator" field.</summary>
    public const int SolutionEvaluatorFieldNumber = 4;
    private global::Mediapipe.FrameSelectionSolutionEvaluatorType solutionEvaluator_;
    /// <summary>
    /// Allows one to specify custom solution selection criteria (i.e. different
    /// way to choose the best row of the computed cost matrix).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.FrameSelectionSolutionEvaluatorType SolutionEvaluator {
      get { return solutionEvaluator_; }
      set {
        solutionEvaluator_ = value;
      }
    }

    /// <summary>Field number for the "max_output_frames" field.</summary>
    public const int MaxOutputFramesFieldNumber = 5;
    private readonly static int MaxOutputFramesDefaultValue = 0;

    private int maxOutputFrames_;
    /// <summary>
    /// Outputs a fixed number of frames and automatically sets the appropriate
    /// sampling rate. Set to 0 by default (i.e. not enabled).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxOutputFrames {
      get { if ((_hasBits0 & 8) != 0) { return maxOutputFrames_; } else { return MaxOutputFramesDefaultValue; } }
      set {
        _hasBits0 |= 8;
        maxOutputFrames_ = value;
      }
    }
    /// <summary>Gets whether the "max_output_frames" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxOutputFrames {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "max_output_frames" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxOutputFrames() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FrameSelectionCriterion);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FrameSelectionCriterion other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SamplingRate != other.SamplingRate) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BandwidthFrames, other.BandwidthFrames)) return false;
      if (SearchRadiusFrames != other.SearchRadiusFrames) return false;
      if (!object.Equals(SolutionEvaluator, other.SolutionEvaluator)) return false;
      if (MaxOutputFrames != other.MaxOutputFrames) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSamplingRate) hash ^= SamplingRate.GetHashCode();
      if (HasBandwidthFrames) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BandwidthFrames);
      if (HasSearchRadiusFrames) hash ^= SearchRadiusFrames.GetHashCode();
      if (solutionEvaluator_ != null) hash ^= SolutionEvaluator.GetHashCode();
      if (HasMaxOutputFrames) hash ^= MaxOutputFrames.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSamplingRate) {
        output.WriteRawTag(8);
        output.WriteInt32(SamplingRate);
      }
      if (HasBandwidthFrames) {
        output.WriteRawTag(21);
        output.WriteFloat(BandwidthFrames);
      }
      if (HasSearchRadiusFrames) {
        output.WriteRawTag(24);
        output.WriteInt32(SearchRadiusFrames);
      }
      if (solutionEvaluator_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SolutionEvaluator);
      }
      if (HasMaxOutputFrames) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxOutputFrames);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSamplingRate) {
        output.WriteRawTag(8);
        output.WriteInt32(SamplingRate);
      }
      if (HasBandwidthFrames) {
        output.WriteRawTag(21);
        output.WriteFloat(BandwidthFrames);
      }
      if (HasSearchRadiusFrames) {
        output.WriteRawTag(24);
        output.WriteInt32(SearchRadiusFrames);
      }
      if (solutionEvaluator_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(SolutionEvaluator);
      }
      if (HasMaxOutputFrames) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxOutputFrames);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasSamplingRate) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SamplingRate);
      }
      if (HasBandwidthFrames) {
        size += 1 + 4;
      }
      if (HasSearchRadiusFrames) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SearchRadiusFrames);
      }
      if (solutionEvaluator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SolutionEvaluator);
      }
      if (HasMaxOutputFrames) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxOutputFrames);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FrameSelectionCriterion other) {
      if (other == null) {
        return;
      }
      if (other.HasSamplingRate) {
        SamplingRate = other.SamplingRate;
      }
      if (other.HasBandwidthFrames) {
        BandwidthFrames = other.BandwidthFrames;
      }
      if (other.HasSearchRadiusFrames) {
        SearchRadiusFrames = other.SearchRadiusFrames;
      }
      if (other.solutionEvaluator_ != null) {
        if (solutionEvaluator_ == null) {
          SolutionEvaluator = new global::Mediapipe.FrameSelectionSolutionEvaluatorType();
        }
        SolutionEvaluator.MergeFrom(other.SolutionEvaluator);
      }
      if (other.HasMaxOutputFrames) {
        MaxOutputFrames = other.MaxOutputFrames;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SamplingRate = input.ReadInt32();
            break;
          }
          case 21: {
            BandwidthFrames = input.ReadFloat();
            break;
          }
          case 24: {
            SearchRadiusFrames = input.ReadInt32();
            break;
          }
          case 34: {
            if (solutionEvaluator_ == null) {
              SolutionEvaluator = new global::Mediapipe.FrameSelectionSolutionEvaluatorType();
            }
            input.ReadMessage(SolutionEvaluator);
            break;
          }
          case 40: {
            MaxOutputFrames = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SamplingRate = input.ReadInt32();
            break;
          }
          case 21: {
            BandwidthFrames = input.ReadFloat();
            break;
          }
          case 24: {
            SearchRadiusFrames = input.ReadInt32();
            break;
          }
          case 34: {
            if (solutionEvaluator_ == null) {
              SolutionEvaluator = new global::Mediapipe.FrameSelectionSolutionEvaluatorType();
            }
            input.ReadMessage(SolutionEvaluator);
            break;
          }
          case 40: {
            MaxOutputFrames = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Options for computing frame selection.
  /// TODO: Support multiple criteria if required. Currently uses only the
  /// first one.
  /// </summary>
  public sealed partial class FrameSelectionOptions : pb::IMessage<FrameSelectionOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FrameSelectionOptions> _parser = new pb::MessageParser<FrameSelectionOptions>(() => new FrameSelectionOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FrameSelectionOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.FrameSelectionReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FrameSelectionOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FrameSelectionOptions(FrameSelectionOptions other) : this() {
      _hasBits0 = other._hasBits0;
      criterion_ = other.criterion_.Clone();
      chunkSize_ = other.chunkSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FrameSelectionOptions Clone() {
      return new FrameSelectionOptions(this);
    }

    /// <summary>Field number for the "criterion" field.</summary>
    public const int CriterionFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Mediapipe.FrameSelectionCriterion> _repeated_criterion_codec
        = pb::FieldCodec.ForMessage(10, global::Mediapipe.FrameSelectionCriterion.Parser);
    private readonly pbc::RepeatedField<global::Mediapipe.FrameSelectionCriterion> criterion_ = new pbc::RepeatedField<global::Mediapipe.FrameSelectionCriterion>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mediapipe.FrameSelectionCriterion> Criterion {
      get { return criterion_; }
    }

    /// <summary>Field number for the "chunk_size" field.</summary>
    public const int ChunkSizeFieldNumber = 2;
    private readonly static int ChunkSizeDefaultValue = 100;

    private int chunkSize_;
    /// <summary>
    /// FrameSelection buffers incoming CameraMotions for specified chunk size
    /// and creates cost matrices upon reaching the limit.
    /// TODO: Implement if necessary (currently nothing is cleared upon
    /// reaching the limit).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ChunkSize {
      get { if ((_hasBits0 & 1) != 0) { return chunkSize_; } else { return ChunkSizeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        chunkSize_ = value;
      }
    }
    /// <summary>Gets whether the "chunk_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChunkSize {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "chunk_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChunkSize() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FrameSelectionOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FrameSelectionOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!criterion_.Equals(other.criterion_)) return false;
      if (ChunkSize != other.ChunkSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= criterion_.GetHashCode();
      if (HasChunkSize) hash ^= ChunkSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      criterion_.WriteTo(output, _repeated_criterion_codec);
      if (HasChunkSize) {
        output.WriteRawTag(16);
        output.WriteInt32(ChunkSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      criterion_.WriteTo(ref output, _repeated_criterion_codec);
      if (HasChunkSize) {
        output.WriteRawTag(16);
        output.WriteInt32(ChunkSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += criterion_.CalculateSize(_repeated_criterion_codec);
      if (HasChunkSize) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChunkSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FrameSelectionOptions other) {
      if (other == null) {
        return;
      }
      criterion_.Add(other.criterion_);
      if (other.HasChunkSize) {
        ChunkSize = other.ChunkSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            criterion_.AddEntriesFrom(input, _repeated_criterion_codec);
            break;
          }
          case 16: {
            ChunkSize = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            criterion_.AddEntriesFrom(ref input, _repeated_criterion_codec);
            break;
          }
          case 16: {
            ChunkSize = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
