// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/util/tracking/box_tracker.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/util/tracking/box_tracker.proto</summary>
  public static partial class BoxTrackerReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/util/tracking/box_tracker.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BoxTrackerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiltZWRpYXBpcGUvdXRpbC90cmFja2luZy9ib3hfdHJhY2tlci5wcm90bxIJ",
            "bWVkaWFwaXBlGiZtZWRpYXBpcGUvdXRpbC90cmFja2luZy90cmFja2luZy5w",
            "cm90byKGAgoRQm94VHJhY2tlck9wdGlvbnMSJQoXY2FjaGluZ19jaHVua19z",
            "aXplX21zZWMYASABKAU6BDI1MDASJQoRY2FjaGVfZmlsZV9mb3JtYXQYAiAB",
            "KAk6CmNodW5rXyUwNGQSHwoUbnVtX3RyYWNraW5nX3dvcmtlcnMYAyABKAU6",
            "ATgSJgoXcmVhZF9jaHVua190aW1lb3V0X21zZWMYBCABKAU6BTYwMDAwEiEK",
            "EnJlY29yZF9wYXRoX3N0YXRlcxgFIAEoCDoFZmFsc2USNwoSdHJhY2tfc3Rl",
            "cF9vcHRpb25zGAYgASgLMhsubWVkaWFwaXBlLlRyYWNrU3RlcE9wdGlvbnMi",
            "pwIKDVRpbWVkQm94UHJvdG8SCwoDdG9wGAEgASgCEgwKBGxlZnQYAiABKAIS",
            "DgoGYm90dG9tGAMgASgCEg0KBXJpZ2h0GAQgASgCEhAKCHJvdGF0aW9uGAcg",
            "ASgCEiwKBHF1YWQYCSABKAsyHi5tZWRpYXBpcGUuTW90aW9uQm94U3RhdGUu",
            "UXVhZBIUCgl0aW1lX21zZWMYBSABKAM6ATASDgoCaWQYBiABKAU6Ai0xEg0K",
            "BWxhYmVsGA0gASgJEhIKCmNvbmZpZGVuY2UYCCABKAISFAoMYXNwZWN0X3Jh",
            "dGlvGAogASgCEhwKDXJlYWNxdWlzaXRpb24YCyABKAg6BWZhbHNlEh8KEHJl",
            "cXVlc3RfZ3JvdXBpbmcYDCABKAg6BWZhbHNlIjoKEVRpbWVkQm94UHJvdG9M",
            "aXN0EiUKA2JveBgBIAMoCzIYLm1lZGlhcGlwZS5UaW1lZEJveFByb3RvQjAK",
            "HWNvbS5nb29nbGUubWVkaWFwaXBlLnRyYWNraW5nQg9Cb3hUcmFja2VyUHJv",
            "dG8="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mediapipe.TrackingReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.BoxTrackerOptions), global::Mediapipe.BoxTrackerOptions.Parser, new[]{ "CachingChunkSizeMsec", "CacheFileFormat", "NumTrackingWorkers", "ReadChunkTimeoutMsec", "RecordPathStates", "TrackStepOptions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.TimedBoxProto), global::Mediapipe.TimedBoxProto.Parser, new[]{ "Top", "Left", "Bottom", "Right", "Rotation", "Quad", "TimeMsec", "Id", "Label", "Confidence", "AspectRatio", "Reacquisition", "RequestGrouping" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.TimedBoxProtoList), global::Mediapipe.TimedBoxProtoList.Parser, new[]{ "Box" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class BoxTrackerOptions : pb::IMessage<BoxTrackerOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BoxTrackerOptions> _parser = new pb::MessageParser<BoxTrackerOptions>(() => new BoxTrackerOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BoxTrackerOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.BoxTrackerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoxTrackerOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoxTrackerOptions(BoxTrackerOptions other) : this() {
      _hasBits0 = other._hasBits0;
      cachingChunkSizeMsec_ = other.cachingChunkSizeMsec_;
      cacheFileFormat_ = other.cacheFileFormat_;
      numTrackingWorkers_ = other.numTrackingWorkers_;
      readChunkTimeoutMsec_ = other.readChunkTimeoutMsec_;
      recordPathStates_ = other.recordPathStates_;
      trackStepOptions_ = other.trackStepOptions_ != null ? other.trackStepOptions_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BoxTrackerOptions Clone() {
      return new BoxTrackerOptions(this);
    }

    /// <summary>Field number for the "caching_chunk_size_msec" field.</summary>
    public const int CachingChunkSizeMsecFieldNumber = 1;
    private readonly static int CachingChunkSizeMsecDefaultValue = 2500;

    private int cachingChunkSizeMsec_;
    /// <summary>
    /// Chunk size for caching files. Should be equal to those
    /// written by the FlowPackagerCalculator.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CachingChunkSizeMsec {
      get { if ((_hasBits0 & 1) != 0) { return cachingChunkSizeMsec_; } else { return CachingChunkSizeMsecDefaultValue; } }
      set {
        _hasBits0 |= 1;
        cachingChunkSizeMsec_ = value;
      }
    }
    /// <summary>Gets whether the "caching_chunk_size_msec" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCachingChunkSizeMsec {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "caching_chunk_size_msec" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCachingChunkSizeMsec() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "cache_file_format" field.</summary>
    public const int CacheFileFormatFieldNumber = 2;
    private readonly static string CacheFileFormatDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("Y2h1bmtfJTA0ZA=="), 0, 10);

    private string cacheFileFormat_;
    /// <summary>
    /// Chunk file format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CacheFileFormat {
      get { return cacheFileFormat_ ?? CacheFileFormatDefaultValue; }
      set {
        cacheFileFormat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "cache_file_format" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCacheFileFormat {
      get { return cacheFileFormat_ != null; }
    }
    /// <summary>Clears the value of the "cache_file_format" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCacheFileFormat() {
      cacheFileFormat_ = null;
    }

    /// <summary>Field number for the "num_tracking_workers" field.</summary>
    public const int NumTrackingWorkersFieldNumber = 3;
    private readonly static int NumTrackingWorkersDefaultValue = 8;

    private int numTrackingWorkers_;
    /// <summary>
    /// Number of simultaneous tracking requests.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumTrackingWorkers {
      get { if ((_hasBits0 & 2) != 0) { return numTrackingWorkers_; } else { return NumTrackingWorkersDefaultValue; } }
      set {
        _hasBits0 |= 2;
        numTrackingWorkers_ = value;
      }
    }
    /// <summary>Gets whether the "num_tracking_workers" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumTrackingWorkers {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "num_tracking_workers" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumTrackingWorkers() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "read_chunk_timeout_msec" field.</summary>
    public const int ReadChunkTimeoutMsecFieldNumber = 4;
    private readonly static int ReadChunkTimeoutMsecDefaultValue = 60000;

    private int readChunkTimeoutMsec_;
    /// <summary>
    /// Maximum waiting time for next chunk, till function times out.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReadChunkTimeoutMsec {
      get { if ((_hasBits0 & 4) != 0) { return readChunkTimeoutMsec_; } else { return ReadChunkTimeoutMsecDefaultValue; } }
      set {
        _hasBits0 |= 4;
        readChunkTimeoutMsec_ = value;
      }
    }
    /// <summary>Gets whether the "read_chunk_timeout_msec" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReadChunkTimeoutMsec {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "read_chunk_timeout_msec" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReadChunkTimeoutMsec() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "record_path_states" field.</summary>
    public const int RecordPathStatesFieldNumber = 5;
    private readonly static bool RecordPathStatesDefaultValue = false;

    private bool recordPathStates_;
    /// <summary>
    /// If set, box tracker will record the state for each computed TimedBox
    /// across all paths.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RecordPathStates {
      get { if ((_hasBits0 & 8) != 0) { return recordPathStates_; } else { return RecordPathStatesDefaultValue; } }
      set {
        _hasBits0 |= 8;
        recordPathStates_ = value;
      }
    }
    /// <summary>Gets whether the "record_path_states" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRecordPathStates {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "record_path_states" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRecordPathStates() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "track_step_options" field.</summary>
    public const int TrackStepOptionsFieldNumber = 6;
    private global::Mediapipe.TrackStepOptions trackStepOptions_;
    /// <summary>
    /// Actual tracking options to be used for every step.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.TrackStepOptions TrackStepOptions {
      get { return trackStepOptions_; }
      set {
        trackStepOptions_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BoxTrackerOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BoxTrackerOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CachingChunkSizeMsec != other.CachingChunkSizeMsec) return false;
      if (CacheFileFormat != other.CacheFileFormat) return false;
      if (NumTrackingWorkers != other.NumTrackingWorkers) return false;
      if (ReadChunkTimeoutMsec != other.ReadChunkTimeoutMsec) return false;
      if (RecordPathStates != other.RecordPathStates) return false;
      if (!object.Equals(TrackStepOptions, other.TrackStepOptions)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCachingChunkSizeMsec) hash ^= CachingChunkSizeMsec.GetHashCode();
      if (HasCacheFileFormat) hash ^= CacheFileFormat.GetHashCode();
      if (HasNumTrackingWorkers) hash ^= NumTrackingWorkers.GetHashCode();
      if (HasReadChunkTimeoutMsec) hash ^= ReadChunkTimeoutMsec.GetHashCode();
      if (HasRecordPathStates) hash ^= RecordPathStates.GetHashCode();
      if (trackStepOptions_ != null) hash ^= TrackStepOptions.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCachingChunkSizeMsec) {
        output.WriteRawTag(8);
        output.WriteInt32(CachingChunkSizeMsec);
      }
      if (HasCacheFileFormat) {
        output.WriteRawTag(18);
        output.WriteString(CacheFileFormat);
      }
      if (HasNumTrackingWorkers) {
        output.WriteRawTag(24);
        output.WriteInt32(NumTrackingWorkers);
      }
      if (HasReadChunkTimeoutMsec) {
        output.WriteRawTag(32);
        output.WriteInt32(ReadChunkTimeoutMsec);
      }
      if (HasRecordPathStates) {
        output.WriteRawTag(40);
        output.WriteBool(RecordPathStates);
      }
      if (trackStepOptions_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TrackStepOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCachingChunkSizeMsec) {
        output.WriteRawTag(8);
        output.WriteInt32(CachingChunkSizeMsec);
      }
      if (HasCacheFileFormat) {
        output.WriteRawTag(18);
        output.WriteString(CacheFileFormat);
      }
      if (HasNumTrackingWorkers) {
        output.WriteRawTag(24);
        output.WriteInt32(NumTrackingWorkers);
      }
      if (HasReadChunkTimeoutMsec) {
        output.WriteRawTag(32);
        output.WriteInt32(ReadChunkTimeoutMsec);
      }
      if (HasRecordPathStates) {
        output.WriteRawTag(40);
        output.WriteBool(RecordPathStates);
      }
      if (trackStepOptions_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TrackStepOptions);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCachingChunkSizeMsec) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CachingChunkSizeMsec);
      }
      if (HasCacheFileFormat) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CacheFileFormat);
      }
      if (HasNumTrackingWorkers) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumTrackingWorkers);
      }
      if (HasReadChunkTimeoutMsec) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReadChunkTimeoutMsec);
      }
      if (HasRecordPathStates) {
        size += 1 + 1;
      }
      if (trackStepOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TrackStepOptions);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BoxTrackerOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasCachingChunkSizeMsec) {
        CachingChunkSizeMsec = other.CachingChunkSizeMsec;
      }
      if (other.HasCacheFileFormat) {
        CacheFileFormat = other.CacheFileFormat;
      }
      if (other.HasNumTrackingWorkers) {
        NumTrackingWorkers = other.NumTrackingWorkers;
      }
      if (other.HasReadChunkTimeoutMsec) {
        ReadChunkTimeoutMsec = other.ReadChunkTimeoutMsec;
      }
      if (other.HasRecordPathStates) {
        RecordPathStates = other.RecordPathStates;
      }
      if (other.trackStepOptions_ != null) {
        if (trackStepOptions_ == null) {
          TrackStepOptions = new global::Mediapipe.TrackStepOptions();
        }
        TrackStepOptions.MergeFrom(other.TrackStepOptions);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CachingChunkSizeMsec = input.ReadInt32();
            break;
          }
          case 18: {
            CacheFileFormat = input.ReadString();
            break;
          }
          case 24: {
            NumTrackingWorkers = input.ReadInt32();
            break;
          }
          case 32: {
            ReadChunkTimeoutMsec = input.ReadInt32();
            break;
          }
          case 40: {
            RecordPathStates = input.ReadBool();
            break;
          }
          case 50: {
            if (trackStepOptions_ == null) {
              TrackStepOptions = new global::Mediapipe.TrackStepOptions();
            }
            input.ReadMessage(TrackStepOptions);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CachingChunkSizeMsec = input.ReadInt32();
            break;
          }
          case 18: {
            CacheFileFormat = input.ReadString();
            break;
          }
          case 24: {
            NumTrackingWorkers = input.ReadInt32();
            break;
          }
          case 32: {
            ReadChunkTimeoutMsec = input.ReadInt32();
            break;
          }
          case 40: {
            RecordPathStates = input.ReadBool();
            break;
          }
          case 50: {
            if (trackStepOptions_ == null) {
              TrackStepOptions = new global::Mediapipe.TrackStepOptions();
            }
            input.ReadMessage(TrackStepOptions);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Next tag: 14
  /// Proto equivalent of struct TimedBox.
  /// </summary>
  public sealed partial class TimedBoxProto : pb::IMessage<TimedBoxProto>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimedBoxProto> _parser = new pb::MessageParser<TimedBoxProto>(() => new TimedBoxProto());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TimedBoxProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.BoxTrackerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimedBoxProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimedBoxProto(TimedBoxProto other) : this() {
      _hasBits0 = other._hasBits0;
      top_ = other.top_;
      left_ = other.left_;
      bottom_ = other.bottom_;
      right_ = other.right_;
      rotation_ = other.rotation_;
      quad_ = other.quad_ != null ? other.quad_.Clone() : null;
      timeMsec_ = other.timeMsec_;
      id_ = other.id_;
      label_ = other.label_;
      confidence_ = other.confidence_;
      aspectRatio_ = other.aspectRatio_;
      reacquisition_ = other.reacquisition_;
      requestGrouping_ = other.requestGrouping_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimedBoxProto Clone() {
      return new TimedBoxProto(this);
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 1;
    private readonly static float TopDefaultValue = 0F;

    private float top_;
    /// <summary>
    /// Normalized coords - in [0, 1]
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Top {
      get { if ((_hasBits0 & 1) != 0) { return top_; } else { return TopDefaultValue; } }
      set {
        _hasBits0 |= 1;
        top_ = value;
      }
    }
    /// <summary>Gets whether the "top" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTop {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "top" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTop() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "left" field.</summary>
    public const int LeftFieldNumber = 2;
    private readonly static float LeftDefaultValue = 0F;

    private float left_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Left {
      get { if ((_hasBits0 & 2) != 0) { return left_; } else { return LeftDefaultValue; } }
      set {
        _hasBits0 |= 2;
        left_ = value;
      }
    }
    /// <summary>Gets whether the "left" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeft {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "left" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeft() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "bottom" field.</summary>
    public const int BottomFieldNumber = 3;
    private readonly static float BottomDefaultValue = 0F;

    private float bottom_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Bottom {
      get { if ((_hasBits0 & 4) != 0) { return bottom_; } else { return BottomDefaultValue; } }
      set {
        _hasBits0 |= 4;
        bottom_ = value;
      }
    }
    /// <summary>Gets whether the "bottom" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBottom {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "bottom" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBottom() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "right" field.</summary>
    public const int RightFieldNumber = 4;
    private readonly static float RightDefaultValue = 0F;

    private float right_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Right {
      get { if ((_hasBits0 & 8) != 0) { return right_; } else { return RightDefaultValue; } }
      set {
        _hasBits0 |= 8;
        right_ = value;
      }
    }
    /// <summary>Gets whether the "right" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRight {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "right" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRight() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 7;
    private readonly static float RotationDefaultValue = 0F;

    private float rotation_;
    /// <summary>
    /// Rotation of box w.r.t. center in radians.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rotation {
      get { if ((_hasBits0 & 64) != 0) { return rotation_; } else { return RotationDefaultValue; } }
      set {
        _hasBits0 |= 64;
        rotation_ = value;
      }
    }
    /// <summary>Gets whether the "rotation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRotation {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "rotation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRotation() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "quad" field.</summary>
    public const int QuadFieldNumber = 9;
    private global::Mediapipe.MotionBoxState.Types.Quad quad_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.MotionBoxState.Types.Quad Quad {
      get { return quad_; }
      set {
        quad_ = value;
      }
    }

    /// <summary>Field number for the "time_msec" field.</summary>
    public const int TimeMsecFieldNumber = 5;
    private readonly static long TimeMsecDefaultValue = 0L;

    private long timeMsec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long TimeMsec {
      get { if ((_hasBits0 & 16) != 0) { return timeMsec_; } else { return TimeMsecDefaultValue; } }
      set {
        _hasBits0 |= 16;
        timeMsec_ = value;
      }
    }
    /// <summary>Gets whether the "time_msec" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTimeMsec {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "time_msec" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTimeMsec() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 6;
    private readonly static int IdDefaultValue = -1;

    private int id_;
    /// <summary>
    /// Unique per object id to disambiguate boxes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { if ((_hasBits0 & 32) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 32;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasId {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearId() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 13;
    private readonly static string LabelDefaultValue = "";

    private string label_;
    /// <summary>
    /// Box lable name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Label {
      get { return label_ ?? LabelDefaultValue; }
      set {
        label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "label" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLabel {
      get { return label_ != null; }
    }
    /// <summary>Clears the value of the "label" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLabel() {
      label_ = null;
    }

    /// <summary>Field number for the "confidence" field.</summary>
    public const int ConfidenceFieldNumber = 8;
    private readonly static float ConfidenceDefaultValue = 0F;

    private float confidence_;
    /// <summary>
    /// Confidence of box tracked in the range [0, 1], with 0 being least
    /// confident, and 1 being most confident. A reasonable threshold is 0.5
    /// to filter out unconfident boxes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Confidence {
      get { if ((_hasBits0 & 128) != 0) { return confidence_; } else { return ConfidenceDefaultValue; } }
      set {
        _hasBits0 |= 128;
        confidence_ = value;
      }
    }
    /// <summary>Gets whether the "confidence" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConfidence {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "confidence" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConfidence() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "aspect_ratio" field.</summary>
    public const int AspectRatioFieldNumber = 10;
    private readonly static float AspectRatioDefaultValue = 0F;

    private float aspectRatio_;
    /// <summary>
    /// Aspect ratio (width / height) for the tracked rectangle in physical space.
    /// If this field is provided, quad tracking will be performed using
    /// 6 degrees of freedom perspective transform between physical rectangle and
    /// frame quad. Otherwise, 8 degrees of freedom homography tracking between
    /// adjacent frames will be used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float AspectRatio {
      get { if ((_hasBits0 & 256) != 0) { return aspectRatio_; } else { return AspectRatioDefaultValue; } }
      set {
        _hasBits0 |= 256;
        aspectRatio_ = value;
      }
    }
    /// <summary>Gets whether the "aspect_ratio" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAspectRatio {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "aspect_ratio" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAspectRatio() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "reacquisition" field.</summary>
    public const int ReacquisitionFieldNumber = 11;
    private readonly static bool ReacquisitionDefaultValue = false;

    private bool reacquisition_;
    /// <summary>
    /// Whether or not to enable reacquisition functionality for this specific box.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Reacquisition {
      get { if ((_hasBits0 & 512) != 0) { return reacquisition_; } else { return ReacquisitionDefaultValue; } }
      set {
        _hasBits0 |= 512;
        reacquisition_ = value;
      }
    }
    /// <summary>Gets whether the "reacquisition" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReacquisition {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "reacquisition" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReacquisition() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "request_grouping" field.</summary>
    public const int RequestGroupingFieldNumber = 12;
    private readonly static bool RequestGroupingDefaultValue = false;

    private bool requestGrouping_;
    /// <summary>
    /// Whether we want this box to be potentially grouped with other boxes
    /// to track together. This is useful for tracking small boxes that lie
    /// on a plane. For example, when we detect a plane,
    /// track the plane, then all boxes within the plane can share the same
    /// homography transform.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RequestGrouping {
      get { if ((_hasBits0 & 1024) != 0) { return requestGrouping_; } else { return RequestGroupingDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        requestGrouping_ = value;
      }
    }
    /// <summary>Gets whether the "request_grouping" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRequestGrouping {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "request_grouping" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRequestGrouping() {
      _hasBits0 &= ~1024;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TimedBoxProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TimedBoxProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Top, other.Top)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Left, other.Left)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Bottom, other.Bottom)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Right, other.Right)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
      if (!object.Equals(Quad, other.Quad)) return false;
      if (TimeMsec != other.TimeMsec) return false;
      if (Id != other.Id) return false;
      if (Label != other.Label) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Confidence, other.Confidence)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AspectRatio, other.AspectRatio)) return false;
      if (Reacquisition != other.Reacquisition) return false;
      if (RequestGrouping != other.RequestGrouping) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTop) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Top);
      if (HasLeft) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Left);
      if (HasBottom) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Bottom);
      if (HasRight) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Right);
      if (HasRotation) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
      if (quad_ != null) hash ^= Quad.GetHashCode();
      if (HasTimeMsec) hash ^= TimeMsec.GetHashCode();
      if (HasId) hash ^= Id.GetHashCode();
      if (HasLabel) hash ^= Label.GetHashCode();
      if (HasConfidence) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Confidence);
      if (HasAspectRatio) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AspectRatio);
      if (HasReacquisition) hash ^= Reacquisition.GetHashCode();
      if (HasRequestGrouping) hash ^= RequestGrouping.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTop) {
        output.WriteRawTag(13);
        output.WriteFloat(Top);
      }
      if (HasLeft) {
        output.WriteRawTag(21);
        output.WriteFloat(Left);
      }
      if (HasBottom) {
        output.WriteRawTag(29);
        output.WriteFloat(Bottom);
      }
      if (HasRight) {
        output.WriteRawTag(37);
        output.WriteFloat(Right);
      }
      if (HasTimeMsec) {
        output.WriteRawTag(40);
        output.WriteInt64(TimeMsec);
      }
      if (HasId) {
        output.WriteRawTag(48);
        output.WriteInt32(Id);
      }
      if (HasRotation) {
        output.WriteRawTag(61);
        output.WriteFloat(Rotation);
      }
      if (HasConfidence) {
        output.WriteRawTag(69);
        output.WriteFloat(Confidence);
      }
      if (quad_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Quad);
      }
      if (HasAspectRatio) {
        output.WriteRawTag(85);
        output.WriteFloat(AspectRatio);
      }
      if (HasReacquisition) {
        output.WriteRawTag(88);
        output.WriteBool(Reacquisition);
      }
      if (HasRequestGrouping) {
        output.WriteRawTag(96);
        output.WriteBool(RequestGrouping);
      }
      if (HasLabel) {
        output.WriteRawTag(106);
        output.WriteString(Label);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTop) {
        output.WriteRawTag(13);
        output.WriteFloat(Top);
      }
      if (HasLeft) {
        output.WriteRawTag(21);
        output.WriteFloat(Left);
      }
      if (HasBottom) {
        output.WriteRawTag(29);
        output.WriteFloat(Bottom);
      }
      if (HasRight) {
        output.WriteRawTag(37);
        output.WriteFloat(Right);
      }
      if (HasTimeMsec) {
        output.WriteRawTag(40);
        output.WriteInt64(TimeMsec);
      }
      if (HasId) {
        output.WriteRawTag(48);
        output.WriteInt32(Id);
      }
      if (HasRotation) {
        output.WriteRawTag(61);
        output.WriteFloat(Rotation);
      }
      if (HasConfidence) {
        output.WriteRawTag(69);
        output.WriteFloat(Confidence);
      }
      if (quad_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Quad);
      }
      if (HasAspectRatio) {
        output.WriteRawTag(85);
        output.WriteFloat(AspectRatio);
      }
      if (HasReacquisition) {
        output.WriteRawTag(88);
        output.WriteBool(Reacquisition);
      }
      if (HasRequestGrouping) {
        output.WriteRawTag(96);
        output.WriteBool(RequestGrouping);
      }
      if (HasLabel) {
        output.WriteRawTag(106);
        output.WriteString(Label);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTop) {
        size += 1 + 4;
      }
      if (HasLeft) {
        size += 1 + 4;
      }
      if (HasBottom) {
        size += 1 + 4;
      }
      if (HasRight) {
        size += 1 + 4;
      }
      if (HasRotation) {
        size += 1 + 4;
      }
      if (quad_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Quad);
      }
      if (HasTimeMsec) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TimeMsec);
      }
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (HasLabel) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
      }
      if (HasConfidence) {
        size += 1 + 4;
      }
      if (HasAspectRatio) {
        size += 1 + 4;
      }
      if (HasReacquisition) {
        size += 1 + 1;
      }
      if (HasRequestGrouping) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TimedBoxProto other) {
      if (other == null) {
        return;
      }
      if (other.HasTop) {
        Top = other.Top;
      }
      if (other.HasLeft) {
        Left = other.Left;
      }
      if (other.HasBottom) {
        Bottom = other.Bottom;
      }
      if (other.HasRight) {
        Right = other.Right;
      }
      if (other.HasRotation) {
        Rotation = other.Rotation;
      }
      if (other.quad_ != null) {
        if (quad_ == null) {
          Quad = new global::Mediapipe.MotionBoxState.Types.Quad();
        }
        Quad.MergeFrom(other.Quad);
      }
      if (other.HasTimeMsec) {
        TimeMsec = other.TimeMsec;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasLabel) {
        Label = other.Label;
      }
      if (other.HasConfidence) {
        Confidence = other.Confidence;
      }
      if (other.HasAspectRatio) {
        AspectRatio = other.AspectRatio;
      }
      if (other.HasReacquisition) {
        Reacquisition = other.Reacquisition;
      }
      if (other.HasRequestGrouping) {
        RequestGrouping = other.RequestGrouping;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Top = input.ReadFloat();
            break;
          }
          case 21: {
            Left = input.ReadFloat();
            break;
          }
          case 29: {
            Bottom = input.ReadFloat();
            break;
          }
          case 37: {
            Right = input.ReadFloat();
            break;
          }
          case 40: {
            TimeMsec = input.ReadInt64();
            break;
          }
          case 48: {
            Id = input.ReadInt32();
            break;
          }
          case 61: {
            Rotation = input.ReadFloat();
            break;
          }
          case 69: {
            Confidence = input.ReadFloat();
            break;
          }
          case 74: {
            if (quad_ == null) {
              Quad = new global::Mediapipe.MotionBoxState.Types.Quad();
            }
            input.ReadMessage(Quad);
            break;
          }
          case 85: {
            AspectRatio = input.ReadFloat();
            break;
          }
          case 88: {
            Reacquisition = input.ReadBool();
            break;
          }
          case 96: {
            RequestGrouping = input.ReadBool();
            break;
          }
          case 106: {
            Label = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 13: {
            Top = input.ReadFloat();
            break;
          }
          case 21: {
            Left = input.ReadFloat();
            break;
          }
          case 29: {
            Bottom = input.ReadFloat();
            break;
          }
          case 37: {
            Right = input.ReadFloat();
            break;
          }
          case 40: {
            TimeMsec = input.ReadInt64();
            break;
          }
          case 48: {
            Id = input.ReadInt32();
            break;
          }
          case 61: {
            Rotation = input.ReadFloat();
            break;
          }
          case 69: {
            Confidence = input.ReadFloat();
            break;
          }
          case 74: {
            if (quad_ == null) {
              Quad = new global::Mediapipe.MotionBoxState.Types.Quad();
            }
            input.ReadMessage(Quad);
            break;
          }
          case 85: {
            AspectRatio = input.ReadFloat();
            break;
          }
          case 88: {
            Reacquisition = input.ReadBool();
            break;
          }
          case 96: {
            RequestGrouping = input.ReadBool();
            break;
          }
          case 106: {
            Label = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class TimedBoxProtoList : pb::IMessage<TimedBoxProtoList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TimedBoxProtoList> _parser = new pb::MessageParser<TimedBoxProtoList>(() => new TimedBoxProtoList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TimedBoxProtoList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.BoxTrackerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimedBoxProtoList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimedBoxProtoList(TimedBoxProtoList other) : this() {
      box_ = other.box_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TimedBoxProtoList Clone() {
      return new TimedBoxProtoList(this);
    }

    /// <summary>Field number for the "box" field.</summary>
    public const int BoxFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Mediapipe.TimedBoxProto> _repeated_box_codec
        = pb::FieldCodec.ForMessage(10, global::Mediapipe.TimedBoxProto.Parser);
    private readonly pbc::RepeatedField<global::Mediapipe.TimedBoxProto> box_ = new pbc::RepeatedField<global::Mediapipe.TimedBoxProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mediapipe.TimedBoxProto> Box {
      get { return box_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TimedBoxProtoList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TimedBoxProtoList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!box_.Equals(other.box_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= box_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      box_.WriteTo(output, _repeated_box_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      box_.WriteTo(ref output, _repeated_box_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += box_.CalculateSize(_repeated_box_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TimedBoxProtoList other) {
      if (other == null) {
        return;
      }
      box_.Add(other.box_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            box_.AddEntriesFrom(input, _repeated_box_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            box_.AddEntriesFrom(ref input, _repeated_box_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
