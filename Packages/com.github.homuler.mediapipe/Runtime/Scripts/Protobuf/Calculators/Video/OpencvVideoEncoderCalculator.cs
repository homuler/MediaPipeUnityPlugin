// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/calculators/video/opencv_video_encoder_calculator.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/calculators/video/opencv_video_encoder_calculator.proto</summary>
  public static partial class OpencvVideoEncoderCalculatorReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/calculators/video/opencv_video_encoder_calculator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OpencvVideoEncoderCalculatorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CkFtZWRpYXBpcGUvY2FsY3VsYXRvcnMvdmlkZW8vb3BlbmN2X3ZpZGVvX2Vu",
            "Y29kZXJfY2FsY3VsYXRvci5wcm90bxIJbWVkaWFwaXBlGiRtZWRpYXBpcGUv",
            "ZnJhbWV3b3JrL2NhbGN1bGF0b3IucHJvdG8i1AEKI09wZW5DdlZpZGVvRW5j",
            "b2RlckNhbGN1bGF0b3JPcHRpb25zEg0KBWNvZGVjGAEgASgJEhQKDHZpZGVv",
            "X2Zvcm1hdBgCIAEoCRILCgNmcHMYAyABKAESDQoFd2lkdGgYBCABKAUSDgoG",
            "aGVpZ2h0GAUgASgFMlwKA2V4dBIcLm1lZGlhcGlwZS5DYWxjdWxhdG9yT3B0",
            "aW9ucxj7uZNjIAEoCzIuLm1lZGlhcGlwZS5PcGVuQ3ZWaWRlb0VuY29kZXJD",
            "YWxjdWxhdG9yT3B0aW9ucw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mediapipe.CalculatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.OpenCvVideoEncoderCalculatorOptions), global::Mediapipe.OpenCvVideoEncoderCalculatorOptions.Parser, new[]{ "Codec", "VideoFormat", "Fps", "Width", "Height" }, null, null, new pb::Extension[] { global::Mediapipe.OpenCvVideoEncoderCalculatorOptions.Extensions.Ext }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class OpenCvVideoEncoderCalculatorOptions : pb::IMessage<OpenCvVideoEncoderCalculatorOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OpenCvVideoEncoderCalculatorOptions> _parser = new pb::MessageParser<OpenCvVideoEncoderCalculatorOptions>(() => new OpenCvVideoEncoderCalculatorOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OpenCvVideoEncoderCalculatorOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.OpencvVideoEncoderCalculatorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OpenCvVideoEncoderCalculatorOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OpenCvVideoEncoderCalculatorOptions(OpenCvVideoEncoderCalculatorOptions other) : this() {
      _hasBits0 = other._hasBits0;
      codec_ = other.codec_;
      videoFormat_ = other.videoFormat_;
      fps_ = other.fps_;
      width_ = other.width_;
      height_ = other.height_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OpenCvVideoEncoderCalculatorOptions Clone() {
      return new OpenCvVideoEncoderCalculatorOptions(this);
    }

    /// <summary>Field number for the "codec" field.</summary>
    public const int CodecFieldNumber = 1;
    private readonly static string CodecDefaultValue = "";

    private string codec_;
    /// <summary>
    /// The 4-character code of the codec to encode the video.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Codec {
      get { return codec_ ?? CodecDefaultValue; }
      set {
        codec_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "codec" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCodec {
      get { return codec_ != null; }
    }
    /// <summary>Clears the value of the "codec" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCodec() {
      codec_ = null;
    }

    /// <summary>Field number for the "video_format" field.</summary>
    public const int VideoFormatFieldNumber = 2;
    private readonly static string VideoFormatDefaultValue = "";

    private string videoFormat_;
    /// <summary>
    /// The video format of the output video file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string VideoFormat {
      get { return videoFormat_ ?? VideoFormatDefaultValue; }
      set {
        videoFormat_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "video_format" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVideoFormat {
      get { return videoFormat_ != null; }
    }
    /// <summary>Clears the value of the "video_format" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVideoFormat() {
      videoFormat_ = null;
    }

    /// <summary>Field number for the "fps" field.</summary>
    public const int FpsFieldNumber = 3;
    private readonly static double FpsDefaultValue = 0D;

    private double fps_;
    /// <summary>
    /// The frame rate in Hz at which the video frames are output.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Fps {
      get { if ((_hasBits0 & 1) != 0) { return fps_; } else { return FpsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        fps_ = value;
      }
    }
    /// <summary>Gets whether the "fps" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFps {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "fps" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFps() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 4;
    private readonly static int WidthDefaultValue = 0;

    private int width_;
    /// <summary>
    /// Dimensions of the video in pixels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Width {
      get { if ((_hasBits0 & 2) != 0) { return width_; } else { return WidthDefaultValue; } }
      set {
        _hasBits0 |= 2;
        width_ = value;
      }
    }
    /// <summary>Gets whether the "width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWidth {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWidth() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 5;
    private readonly static int HeightDefaultValue = 0;

    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Height {
      get { if ((_hasBits0 & 4) != 0) { return height_; } else { return HeightDefaultValue; } }
      set {
        _hasBits0 |= 4;
        height_ = value;
      }
    }
    /// <summary>Gets whether the "height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHeight {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHeight() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OpenCvVideoEncoderCalculatorOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OpenCvVideoEncoderCalculatorOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Codec != other.Codec) return false;
      if (VideoFormat != other.VideoFormat) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Fps, other.Fps)) return false;
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCodec) hash ^= Codec.GetHashCode();
      if (HasVideoFormat) hash ^= VideoFormat.GetHashCode();
      if (HasFps) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Fps);
      if (HasWidth) hash ^= Width.GetHashCode();
      if (HasHeight) hash ^= Height.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasCodec) {
        output.WriteRawTag(10);
        output.WriteString(Codec);
      }
      if (HasVideoFormat) {
        output.WriteRawTag(18);
        output.WriteString(VideoFormat);
      }
      if (HasFps) {
        output.WriteRawTag(25);
        output.WriteDouble(Fps);
      }
      if (HasWidth) {
        output.WriteRawTag(32);
        output.WriteInt32(Width);
      }
      if (HasHeight) {
        output.WriteRawTag(40);
        output.WriteInt32(Height);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCodec) {
        output.WriteRawTag(10);
        output.WriteString(Codec);
      }
      if (HasVideoFormat) {
        output.WriteRawTag(18);
        output.WriteString(VideoFormat);
      }
      if (HasFps) {
        output.WriteRawTag(25);
        output.WriteDouble(Fps);
      }
      if (HasWidth) {
        output.WriteRawTag(32);
        output.WriteInt32(Width);
      }
      if (HasHeight) {
        output.WriteRawTag(40);
        output.WriteInt32(Height);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCodec) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Codec);
      }
      if (HasVideoFormat) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VideoFormat);
      }
      if (HasFps) {
        size += 1 + 8;
      }
      if (HasWidth) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (HasHeight) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OpenCvVideoEncoderCalculatorOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasCodec) {
        Codec = other.Codec;
      }
      if (other.HasVideoFormat) {
        VideoFormat = other.VideoFormat;
      }
      if (other.HasFps) {
        Fps = other.Fps;
      }
      if (other.HasWidth) {
        Width = other.Width;
      }
      if (other.HasHeight) {
        Height = other.Height;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Codec = input.ReadString();
            break;
          }
          case 18: {
            VideoFormat = input.ReadString();
            break;
          }
          case 25: {
            Fps = input.ReadDouble();
            break;
          }
          case 32: {
            Width = input.ReadInt32();
            break;
          }
          case 40: {
            Height = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Codec = input.ReadString();
            break;
          }
          case 18: {
            VideoFormat = input.ReadString();
            break;
          }
          case 25: {
            Fps = input.ReadDouble();
            break;
          }
          case 32: {
            Width = input.ReadInt32();
            break;
          }
          case 40: {
            Height = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Extensions
    /// <summary>Container for extensions for other messages declared in the OpenCvVideoEncoderCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Extensions {
      public static readonly pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.OpenCvVideoEncoderCalculatorOptions> Ext =
        new pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.OpenCvVideoEncoderCalculatorOptions>(207936763, pb::FieldCodec.ForMessage(1663494106, global::Mediapipe.OpenCvVideoEncoderCalculatorOptions.Parser));
    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
