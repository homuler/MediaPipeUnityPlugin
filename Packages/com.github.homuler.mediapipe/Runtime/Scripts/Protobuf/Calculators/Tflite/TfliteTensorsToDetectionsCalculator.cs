// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/calculators/tflite/tflite_tensors_to_detections_calculator.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/calculators/tflite/tflite_tensors_to_detections_calculator.proto</summary>
  public static partial class TfliteTensorsToDetectionsCalculatorReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/calculators/tflite/tflite_tensors_to_detections_calculator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TfliteTensorsToDetectionsCalculatorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CkptZWRpYXBpcGUvY2FsY3VsYXRvcnMvdGZsaXRlL3RmbGl0ZV90ZW5zb3Jz",
            "X3RvX2RldGVjdGlvbnNfY2FsY3VsYXRvci5wcm90bxIJbWVkaWFwaXBlGiRt",
            "ZWRpYXBpcGUvZnJhbWV3b3JrL2NhbGN1bGF0b3IucHJvdG8i+QQKKlRmTGl0",
            "ZVRlbnNvcnNUb0RldGVjdGlvbnNDYWxjdWxhdG9yT3B0aW9ucxITCgtudW1f",
            "Y2xhc3NlcxgBIAEoBRIRCgludW1fYm94ZXMYAiABKAUSEgoKbnVtX2Nvb3Jk",
            "cxgDIAEoBRIdChVrZXlwb2ludF9jb29yZF9vZmZzZXQYCSABKAUSGAoNbnVt",
            "X2tleXBvaW50cxgKIAEoBToBMBIiChdudW1fdmFsdWVzX3Blcl9rZXlwb2lu",
            "dBgLIAEoBToBMhIbChBib3hfY29vcmRfb2Zmc2V0GAwgASgFOgEwEhIKB3hf",
            "c2NhbGUYBCABKAI6ATASEgoHeV9zY2FsZRgFIAEoAjoBMBISCgd3X3NjYWxl",
            "GAYgASgCOgEwEhIKB2hfc2NhbGUYByABKAI6ATASLAodYXBwbHlfZXhwb25l",
            "bnRpYWxfb25fYm94X3NpemUYDSABKAg6BWZhbHNlEiMKFHJldmVyc2Vfb3V0",
            "cHV0X29yZGVyGA4gASgIOgVmYWxzZRIWCg5pZ25vcmVfY2xhc3NlcxgIIAMo",
            "BRIcCg1zaWdtb2lkX3Njb3JlGA8gASgIOgVmYWxzZRIdChVzY29yZV9jbGlw",
            "cGluZ190aHJlc2gYECABKAISHgoPZmxpcF92ZXJ0aWNhbGx5GBIgASgIOgVm",
            "YWxzZRIYChBtaW5fc2NvcmVfdGhyZXNoGBMgASgCMmMKA2V4dBIcLm1lZGlh",
            "cGlwZS5DYWxjdWxhdG9yT3B0aW9ucxiYisZ1IAEoCzI1Lm1lZGlhcGlwZS5U",
            "ZkxpdGVUZW5zb3JzVG9EZXRlY3Rpb25zQ2FsY3VsYXRvck9wdGlvbnM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mediapipe.CalculatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.TfLiteTensorsToDetectionsCalculatorOptions), global::Mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.Parser, new[]{ "NumClasses", "NumBoxes", "NumCoords", "KeypointCoordOffset", "NumKeypoints", "NumValuesPerKeypoint", "BoxCoordOffset", "XScale", "YScale", "WScale", "HScale", "ApplyExponentialOnBoxSize", "ReverseOutputOrder", "IgnoreClasses", "SigmoidScore", "ScoreClippingThresh", "FlipVertically", "MinScoreThresh" }, null, null, new pb::Extension[] { global::Mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.Extensions.Ext }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TfLiteTensorsToDetectionsCalculatorOptions : pb::IMessage<TfLiteTensorsToDetectionsCalculatorOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TfLiteTensorsToDetectionsCalculatorOptions> _parser = new pb::MessageParser<TfLiteTensorsToDetectionsCalculatorOptions>(() => new TfLiteTensorsToDetectionsCalculatorOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TfLiteTensorsToDetectionsCalculatorOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.TfliteTensorsToDetectionsCalculatorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TfLiteTensorsToDetectionsCalculatorOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TfLiteTensorsToDetectionsCalculatorOptions(TfLiteTensorsToDetectionsCalculatorOptions other) : this() {
      _hasBits0 = other._hasBits0;
      numClasses_ = other.numClasses_;
      numBoxes_ = other.numBoxes_;
      numCoords_ = other.numCoords_;
      keypointCoordOffset_ = other.keypointCoordOffset_;
      numKeypoints_ = other.numKeypoints_;
      numValuesPerKeypoint_ = other.numValuesPerKeypoint_;
      boxCoordOffset_ = other.boxCoordOffset_;
      xScale_ = other.xScale_;
      yScale_ = other.yScale_;
      wScale_ = other.wScale_;
      hScale_ = other.hScale_;
      applyExponentialOnBoxSize_ = other.applyExponentialOnBoxSize_;
      reverseOutputOrder_ = other.reverseOutputOrder_;
      ignoreClasses_ = other.ignoreClasses_.Clone();
      sigmoidScore_ = other.sigmoidScore_;
      scoreClippingThresh_ = other.scoreClippingThresh_;
      flipVertically_ = other.flipVertically_;
      minScoreThresh_ = other.minScoreThresh_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TfLiteTensorsToDetectionsCalculatorOptions Clone() {
      return new TfLiteTensorsToDetectionsCalculatorOptions(this);
    }

    /// <summary>Field number for the "num_classes" field.</summary>
    public const int NumClassesFieldNumber = 1;
    private readonly static int NumClassesDefaultValue = 0;

    private int numClasses_;
    /// <summary>
    /// The number of output classes predicted by the detection model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumClasses {
      get { if ((_hasBits0 & 1) != 0) { return numClasses_; } else { return NumClassesDefaultValue; } }
      set {
        _hasBits0 |= 1;
        numClasses_ = value;
      }
    }
    /// <summary>Gets whether the "num_classes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumClasses {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "num_classes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumClasses() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "num_boxes" field.</summary>
    public const int NumBoxesFieldNumber = 2;
    private readonly static int NumBoxesDefaultValue = 0;

    private int numBoxes_;
    /// <summary>
    /// The number of output boxes predicted by the detection model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumBoxes {
      get { if ((_hasBits0 & 2) != 0) { return numBoxes_; } else { return NumBoxesDefaultValue; } }
      set {
        _hasBits0 |= 2;
        numBoxes_ = value;
      }
    }
    /// <summary>Gets whether the "num_boxes" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumBoxes {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "num_boxes" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumBoxes() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "num_coords" field.</summary>
    public const int NumCoordsFieldNumber = 3;
    private readonly static int NumCoordsDefaultValue = 0;

    private int numCoords_;
    /// <summary>
    /// The number of output values per boxes predicted by the detection model. The
    /// values contain bounding boxes, keypoints, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumCoords {
      get { if ((_hasBits0 & 4) != 0) { return numCoords_; } else { return NumCoordsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        numCoords_ = value;
      }
    }
    /// <summary>Gets whether the "num_coords" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumCoords {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "num_coords" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumCoords() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "keypoint_coord_offset" field.</summary>
    public const int KeypointCoordOffsetFieldNumber = 9;
    private readonly static int KeypointCoordOffsetDefaultValue = 0;

    private int keypointCoordOffset_;
    /// <summary>
    /// The offset of keypoint coordinates in the location tensor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int KeypointCoordOffset {
      get { if ((_hasBits0 & 128) != 0) { return keypointCoordOffset_; } else { return KeypointCoordOffsetDefaultValue; } }
      set {
        _hasBits0 |= 128;
        keypointCoordOffset_ = value;
      }
    }
    /// <summary>Gets whether the "keypoint_coord_offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasKeypointCoordOffset {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "keypoint_coord_offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearKeypointCoordOffset() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "num_keypoints" field.</summary>
    public const int NumKeypointsFieldNumber = 10;
    private readonly static int NumKeypointsDefaultValue = 0;

    private int numKeypoints_;
    /// <summary>
    /// The number of predicted keypoints.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumKeypoints {
      get { if ((_hasBits0 & 256) != 0) { return numKeypoints_; } else { return NumKeypointsDefaultValue; } }
      set {
        _hasBits0 |= 256;
        numKeypoints_ = value;
      }
    }
    /// <summary>Gets whether the "num_keypoints" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumKeypoints {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "num_keypoints" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumKeypoints() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "num_values_per_keypoint" field.</summary>
    public const int NumValuesPerKeypointFieldNumber = 11;
    private readonly static int NumValuesPerKeypointDefaultValue = 2;

    private int numValuesPerKeypoint_;
    /// <summary>
    /// The dimension of each keypoint, e.g. number of values predicted for each
    /// keypoint.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumValuesPerKeypoint {
      get { if ((_hasBits0 & 512) != 0) { return numValuesPerKeypoint_; } else { return NumValuesPerKeypointDefaultValue; } }
      set {
        _hasBits0 |= 512;
        numValuesPerKeypoint_ = value;
      }
    }
    /// <summary>Gets whether the "num_values_per_keypoint" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumValuesPerKeypoint {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "num_values_per_keypoint" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumValuesPerKeypoint() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "box_coord_offset" field.</summary>
    public const int BoxCoordOffsetFieldNumber = 12;
    private readonly static int BoxCoordOffsetDefaultValue = 0;

    private int boxCoordOffset_;
    /// <summary>
    /// The offset of box coordinates in the location tensor.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BoxCoordOffset {
      get { if ((_hasBits0 & 1024) != 0) { return boxCoordOffset_; } else { return BoxCoordOffsetDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        boxCoordOffset_ = value;
      }
    }
    /// <summary>Gets whether the "box_coord_offset" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBoxCoordOffset {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "box_coord_offset" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBoxCoordOffset() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "x_scale" field.</summary>
    public const int XScaleFieldNumber = 4;
    private readonly static float XScaleDefaultValue = 0F;

    private float xScale_;
    /// <summary>
    /// Parameters for decoding SSD detection model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float XScale {
      get { if ((_hasBits0 & 8) != 0) { return xScale_; } else { return XScaleDefaultValue; } }
      set {
        _hasBits0 |= 8;
        xScale_ = value;
      }
    }
    /// <summary>Gets whether the "x_scale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasXScale {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "x_scale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearXScale() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "y_scale" field.</summary>
    public const int YScaleFieldNumber = 5;
    private readonly static float YScaleDefaultValue = 0F;

    private float yScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float YScale {
      get { if ((_hasBits0 & 16) != 0) { return yScale_; } else { return YScaleDefaultValue; } }
      set {
        _hasBits0 |= 16;
        yScale_ = value;
      }
    }
    /// <summary>Gets whether the "y_scale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasYScale {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "y_scale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearYScale() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "w_scale" field.</summary>
    public const int WScaleFieldNumber = 6;
    private readonly static float WScaleDefaultValue = 0F;

    private float wScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float WScale {
      get { if ((_hasBits0 & 32) != 0) { return wScale_; } else { return WScaleDefaultValue; } }
      set {
        _hasBits0 |= 32;
        wScale_ = value;
      }
    }
    /// <summary>Gets whether the "w_scale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWScale {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "w_scale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWScale() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "h_scale" field.</summary>
    public const int HScaleFieldNumber = 7;
    private readonly static float HScaleDefaultValue = 0F;

    private float hScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float HScale {
      get { if ((_hasBits0 & 64) != 0) { return hScale_; } else { return HScaleDefaultValue; } }
      set {
        _hasBits0 |= 64;
        hScale_ = value;
      }
    }
    /// <summary>Gets whether the "h_scale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHScale {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "h_scale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHScale() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "apply_exponential_on_box_size" field.</summary>
    public const int ApplyExponentialOnBoxSizeFieldNumber = 13;
    private readonly static bool ApplyExponentialOnBoxSizeDefaultValue = false;

    private bool applyExponentialOnBoxSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ApplyExponentialOnBoxSize {
      get { if ((_hasBits0 & 2048) != 0) { return applyExponentialOnBoxSize_; } else { return ApplyExponentialOnBoxSizeDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        applyExponentialOnBoxSize_ = value;
      }
    }
    /// <summary>Gets whether the "apply_exponential_on_box_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasApplyExponentialOnBoxSize {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "apply_exponential_on_box_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearApplyExponentialOnBoxSize() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "reverse_output_order" field.</summary>
    public const int ReverseOutputOrderFieldNumber = 14;
    private readonly static bool ReverseOutputOrderDefaultValue = false;

    private bool reverseOutputOrder_;
    /// <summary>
    /// Whether to reverse the order of predicted x, y from output.
    /// If false, the order is [y_center, x_center, h, w], if true the order is
    /// [x_center, y_center, w, h].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ReverseOutputOrder {
      get { if ((_hasBits0 & 4096) != 0) { return reverseOutputOrder_; } else { return ReverseOutputOrderDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        reverseOutputOrder_ = value;
      }
    }
    /// <summary>Gets whether the "reverse_output_order" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReverseOutputOrder {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "reverse_output_order" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReverseOutputOrder() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "ignore_classes" field.</summary>
    public const int IgnoreClassesFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_ignoreClasses_codec
        = pb::FieldCodec.ForInt32(64);
    private readonly pbc::RepeatedField<int> ignoreClasses_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// The ids of classes that should be ignored during decoding the score for
    /// each predicted box.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> IgnoreClasses {
      get { return ignoreClasses_; }
    }

    /// <summary>Field number for the "sigmoid_score" field.</summary>
    public const int SigmoidScoreFieldNumber = 15;
    private readonly static bool SigmoidScoreDefaultValue = false;

    private bool sigmoidScore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SigmoidScore {
      get { if ((_hasBits0 & 8192) != 0) { return sigmoidScore_; } else { return SigmoidScoreDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        sigmoidScore_ = value;
      }
    }
    /// <summary>Gets whether the "sigmoid_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSigmoidScore {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "sigmoid_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSigmoidScore() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "score_clipping_thresh" field.</summary>
    public const int ScoreClippingThreshFieldNumber = 16;
    private readonly static float ScoreClippingThreshDefaultValue = 0F;

    private float scoreClippingThresh_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float ScoreClippingThresh {
      get { if ((_hasBits0 & 16384) != 0) { return scoreClippingThresh_; } else { return ScoreClippingThreshDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        scoreClippingThresh_ = value;
      }
    }
    /// <summary>Gets whether the "score_clipping_thresh" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScoreClippingThresh {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "score_clipping_thresh" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScoreClippingThresh() {
      _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "flip_vertically" field.</summary>
    public const int FlipVerticallyFieldNumber = 18;
    private readonly static bool FlipVerticallyDefaultValue = false;

    private bool flipVertically_;
    /// <summary>
    /// Whether the detection coordinates from the input tensors should be flipped
    /// vertically (along the y-direction). This is useful, for example, when the
    /// input tensors represent detections defined with a coordinate system where
    /// the origin is at the top-left corner, whereas the desired detection
    /// representation has a bottom-left origin (e.g., in OpenGL).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FlipVertically {
      get { if ((_hasBits0 & 32768) != 0) { return flipVertically_; } else { return FlipVerticallyDefaultValue; } }
      set {
        _hasBits0 |= 32768;
        flipVertically_ = value;
      }
    }
    /// <summary>Gets whether the "flip_vertically" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlipVertically {
      get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "flip_vertically" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlipVertically() {
      _hasBits0 &= ~32768;
    }

    /// <summary>Field number for the "min_score_thresh" field.</summary>
    public const int MinScoreThreshFieldNumber = 19;
    private readonly static float MinScoreThreshDefaultValue = 0F;

    private float minScoreThresh_;
    /// <summary>
    /// Score threshold for preserving decoded detections.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinScoreThresh {
      get { if ((_hasBits0 & 65536) != 0) { return minScoreThresh_; } else { return MinScoreThreshDefaultValue; } }
      set {
        _hasBits0 |= 65536;
        minScoreThresh_ = value;
      }
    }
    /// <summary>Gets whether the "min_score_thresh" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinScoreThresh {
      get { return (_hasBits0 & 65536) != 0; }
    }
    /// <summary>Clears the value of the "min_score_thresh" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinScoreThresh() {
      _hasBits0 &= ~65536;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TfLiteTensorsToDetectionsCalculatorOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TfLiteTensorsToDetectionsCalculatorOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumClasses != other.NumClasses) return false;
      if (NumBoxes != other.NumBoxes) return false;
      if (NumCoords != other.NumCoords) return false;
      if (KeypointCoordOffset != other.KeypointCoordOffset) return false;
      if (NumKeypoints != other.NumKeypoints) return false;
      if (NumValuesPerKeypoint != other.NumValuesPerKeypoint) return false;
      if (BoxCoordOffset != other.BoxCoordOffset) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(XScale, other.XScale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(YScale, other.YScale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WScale, other.WScale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HScale, other.HScale)) return false;
      if (ApplyExponentialOnBoxSize != other.ApplyExponentialOnBoxSize) return false;
      if (ReverseOutputOrder != other.ReverseOutputOrder) return false;
      if(!ignoreClasses_.Equals(other.ignoreClasses_)) return false;
      if (SigmoidScore != other.SigmoidScore) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ScoreClippingThresh, other.ScoreClippingThresh)) return false;
      if (FlipVertically != other.FlipVertically) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinScoreThresh, other.MinScoreThresh)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNumClasses) hash ^= NumClasses.GetHashCode();
      if (HasNumBoxes) hash ^= NumBoxes.GetHashCode();
      if (HasNumCoords) hash ^= NumCoords.GetHashCode();
      if (HasKeypointCoordOffset) hash ^= KeypointCoordOffset.GetHashCode();
      if (HasNumKeypoints) hash ^= NumKeypoints.GetHashCode();
      if (HasNumValuesPerKeypoint) hash ^= NumValuesPerKeypoint.GetHashCode();
      if (HasBoxCoordOffset) hash ^= BoxCoordOffset.GetHashCode();
      if (HasXScale) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(XScale);
      if (HasYScale) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(YScale);
      if (HasWScale) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WScale);
      if (HasHScale) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HScale);
      if (HasApplyExponentialOnBoxSize) hash ^= ApplyExponentialOnBoxSize.GetHashCode();
      if (HasReverseOutputOrder) hash ^= ReverseOutputOrder.GetHashCode();
      hash ^= ignoreClasses_.GetHashCode();
      if (HasSigmoidScore) hash ^= SigmoidScore.GetHashCode();
      if (HasScoreClippingThresh) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ScoreClippingThresh);
      if (HasFlipVertically) hash ^= FlipVertically.GetHashCode();
      if (HasMinScoreThresh) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinScoreThresh);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasNumClasses) {
        output.WriteRawTag(8);
        output.WriteInt32(NumClasses);
      }
      if (HasNumBoxes) {
        output.WriteRawTag(16);
        output.WriteInt32(NumBoxes);
      }
      if (HasNumCoords) {
        output.WriteRawTag(24);
        output.WriteInt32(NumCoords);
      }
      if (HasXScale) {
        output.WriteRawTag(37);
        output.WriteFloat(XScale);
      }
      if (HasYScale) {
        output.WriteRawTag(45);
        output.WriteFloat(YScale);
      }
      if (HasWScale) {
        output.WriteRawTag(53);
        output.WriteFloat(WScale);
      }
      if (HasHScale) {
        output.WriteRawTag(61);
        output.WriteFloat(HScale);
      }
      ignoreClasses_.WriteTo(output, _repeated_ignoreClasses_codec);
      if (HasKeypointCoordOffset) {
        output.WriteRawTag(72);
        output.WriteInt32(KeypointCoordOffset);
      }
      if (HasNumKeypoints) {
        output.WriteRawTag(80);
        output.WriteInt32(NumKeypoints);
      }
      if (HasNumValuesPerKeypoint) {
        output.WriteRawTag(88);
        output.WriteInt32(NumValuesPerKeypoint);
      }
      if (HasBoxCoordOffset) {
        output.WriteRawTag(96);
        output.WriteInt32(BoxCoordOffset);
      }
      if (HasApplyExponentialOnBoxSize) {
        output.WriteRawTag(104);
        output.WriteBool(ApplyExponentialOnBoxSize);
      }
      if (HasReverseOutputOrder) {
        output.WriteRawTag(112);
        output.WriteBool(ReverseOutputOrder);
      }
      if (HasSigmoidScore) {
        output.WriteRawTag(120);
        output.WriteBool(SigmoidScore);
      }
      if (HasScoreClippingThresh) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(ScoreClippingThresh);
      }
      if (HasFlipVertically) {
        output.WriteRawTag(144, 1);
        output.WriteBool(FlipVertically);
      }
      if (HasMinScoreThresh) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(MinScoreThresh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasNumClasses) {
        output.WriteRawTag(8);
        output.WriteInt32(NumClasses);
      }
      if (HasNumBoxes) {
        output.WriteRawTag(16);
        output.WriteInt32(NumBoxes);
      }
      if (HasNumCoords) {
        output.WriteRawTag(24);
        output.WriteInt32(NumCoords);
      }
      if (HasXScale) {
        output.WriteRawTag(37);
        output.WriteFloat(XScale);
      }
      if (HasYScale) {
        output.WriteRawTag(45);
        output.WriteFloat(YScale);
      }
      if (HasWScale) {
        output.WriteRawTag(53);
        output.WriteFloat(WScale);
      }
      if (HasHScale) {
        output.WriteRawTag(61);
        output.WriteFloat(HScale);
      }
      ignoreClasses_.WriteTo(ref output, _repeated_ignoreClasses_codec);
      if (HasKeypointCoordOffset) {
        output.WriteRawTag(72);
        output.WriteInt32(KeypointCoordOffset);
      }
      if (HasNumKeypoints) {
        output.WriteRawTag(80);
        output.WriteInt32(NumKeypoints);
      }
      if (HasNumValuesPerKeypoint) {
        output.WriteRawTag(88);
        output.WriteInt32(NumValuesPerKeypoint);
      }
      if (HasBoxCoordOffset) {
        output.WriteRawTag(96);
        output.WriteInt32(BoxCoordOffset);
      }
      if (HasApplyExponentialOnBoxSize) {
        output.WriteRawTag(104);
        output.WriteBool(ApplyExponentialOnBoxSize);
      }
      if (HasReverseOutputOrder) {
        output.WriteRawTag(112);
        output.WriteBool(ReverseOutputOrder);
      }
      if (HasSigmoidScore) {
        output.WriteRawTag(120);
        output.WriteBool(SigmoidScore);
      }
      if (HasScoreClippingThresh) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(ScoreClippingThresh);
      }
      if (HasFlipVertically) {
        output.WriteRawTag(144, 1);
        output.WriteBool(FlipVertically);
      }
      if (HasMinScoreThresh) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(MinScoreThresh);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasNumClasses) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumClasses);
      }
      if (HasNumBoxes) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumBoxes);
      }
      if (HasNumCoords) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumCoords);
      }
      if (HasKeypointCoordOffset) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KeypointCoordOffset);
      }
      if (HasNumKeypoints) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumKeypoints);
      }
      if (HasNumValuesPerKeypoint) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumValuesPerKeypoint);
      }
      if (HasBoxCoordOffset) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoxCoordOffset);
      }
      if (HasXScale) {
        size += 1 + 4;
      }
      if (HasYScale) {
        size += 1 + 4;
      }
      if (HasWScale) {
        size += 1 + 4;
      }
      if (HasHScale) {
        size += 1 + 4;
      }
      if (HasApplyExponentialOnBoxSize) {
        size += 1 + 1;
      }
      if (HasReverseOutputOrder) {
        size += 1 + 1;
      }
      size += ignoreClasses_.CalculateSize(_repeated_ignoreClasses_codec);
      if (HasSigmoidScore) {
        size += 1 + 1;
      }
      if (HasScoreClippingThresh) {
        size += 2 + 4;
      }
      if (HasFlipVertically) {
        size += 2 + 1;
      }
      if (HasMinScoreThresh) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TfLiteTensorsToDetectionsCalculatorOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasNumClasses) {
        NumClasses = other.NumClasses;
      }
      if (other.HasNumBoxes) {
        NumBoxes = other.NumBoxes;
      }
      if (other.HasNumCoords) {
        NumCoords = other.NumCoords;
      }
      if (other.HasKeypointCoordOffset) {
        KeypointCoordOffset = other.KeypointCoordOffset;
      }
      if (other.HasNumKeypoints) {
        NumKeypoints = other.NumKeypoints;
      }
      if (other.HasNumValuesPerKeypoint) {
        NumValuesPerKeypoint = other.NumValuesPerKeypoint;
      }
      if (other.HasBoxCoordOffset) {
        BoxCoordOffset = other.BoxCoordOffset;
      }
      if (other.HasXScale) {
        XScale = other.XScale;
      }
      if (other.HasYScale) {
        YScale = other.YScale;
      }
      if (other.HasWScale) {
        WScale = other.WScale;
      }
      if (other.HasHScale) {
        HScale = other.HScale;
      }
      if (other.HasApplyExponentialOnBoxSize) {
        ApplyExponentialOnBoxSize = other.ApplyExponentialOnBoxSize;
      }
      if (other.HasReverseOutputOrder) {
        ReverseOutputOrder = other.ReverseOutputOrder;
      }
      ignoreClasses_.Add(other.ignoreClasses_);
      if (other.HasSigmoidScore) {
        SigmoidScore = other.SigmoidScore;
      }
      if (other.HasScoreClippingThresh) {
        ScoreClippingThresh = other.ScoreClippingThresh;
      }
      if (other.HasFlipVertically) {
        FlipVertically = other.FlipVertically;
      }
      if (other.HasMinScoreThresh) {
        MinScoreThresh = other.MinScoreThresh;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NumClasses = input.ReadInt32();
            break;
          }
          case 16: {
            NumBoxes = input.ReadInt32();
            break;
          }
          case 24: {
            NumCoords = input.ReadInt32();
            break;
          }
          case 37: {
            XScale = input.ReadFloat();
            break;
          }
          case 45: {
            YScale = input.ReadFloat();
            break;
          }
          case 53: {
            WScale = input.ReadFloat();
            break;
          }
          case 61: {
            HScale = input.ReadFloat();
            break;
          }
          case 66:
          case 64: {
            ignoreClasses_.AddEntriesFrom(input, _repeated_ignoreClasses_codec);
            break;
          }
          case 72: {
            KeypointCoordOffset = input.ReadInt32();
            break;
          }
          case 80: {
            NumKeypoints = input.ReadInt32();
            break;
          }
          case 88: {
            NumValuesPerKeypoint = input.ReadInt32();
            break;
          }
          case 96: {
            BoxCoordOffset = input.ReadInt32();
            break;
          }
          case 104: {
            ApplyExponentialOnBoxSize = input.ReadBool();
            break;
          }
          case 112: {
            ReverseOutputOrder = input.ReadBool();
            break;
          }
          case 120: {
            SigmoidScore = input.ReadBool();
            break;
          }
          case 133: {
            ScoreClippingThresh = input.ReadFloat();
            break;
          }
          case 144: {
            FlipVertically = input.ReadBool();
            break;
          }
          case 157: {
            MinScoreThresh = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NumClasses = input.ReadInt32();
            break;
          }
          case 16: {
            NumBoxes = input.ReadInt32();
            break;
          }
          case 24: {
            NumCoords = input.ReadInt32();
            break;
          }
          case 37: {
            XScale = input.ReadFloat();
            break;
          }
          case 45: {
            YScale = input.ReadFloat();
            break;
          }
          case 53: {
            WScale = input.ReadFloat();
            break;
          }
          case 61: {
            HScale = input.ReadFloat();
            break;
          }
          case 66:
          case 64: {
            ignoreClasses_.AddEntriesFrom(ref input, _repeated_ignoreClasses_codec);
            break;
          }
          case 72: {
            KeypointCoordOffset = input.ReadInt32();
            break;
          }
          case 80: {
            NumKeypoints = input.ReadInt32();
            break;
          }
          case 88: {
            NumValuesPerKeypoint = input.ReadInt32();
            break;
          }
          case 96: {
            BoxCoordOffset = input.ReadInt32();
            break;
          }
          case 104: {
            ApplyExponentialOnBoxSize = input.ReadBool();
            break;
          }
          case 112: {
            ReverseOutputOrder = input.ReadBool();
            break;
          }
          case 120: {
            SigmoidScore = input.ReadBool();
            break;
          }
          case 133: {
            ScoreClippingThresh = input.ReadFloat();
            break;
          }
          case 144: {
            FlipVertically = input.ReadBool();
            break;
          }
          case 157: {
            MinScoreThresh = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

    #region Extensions
    /// <summary>Container for extensions for other messages declared in the TfLiteTensorsToDetectionsCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Extensions {
      public static readonly pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.TfLiteTensorsToDetectionsCalculatorOptions> Ext =
        new pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.TfLiteTensorsToDetectionsCalculatorOptions>(246514968, pb::FieldCodec.ForMessage(1972119746, global::Mediapipe.TfLiteTensorsToDetectionsCalculatorOptions.Parser));
    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
