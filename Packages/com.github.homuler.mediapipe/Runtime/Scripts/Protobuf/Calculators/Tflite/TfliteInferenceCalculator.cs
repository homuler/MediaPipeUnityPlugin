// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/calculators/tflite/tflite_inference_calculator.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/calculators/tflite/tflite_inference_calculator.proto</summary>
  public static partial class TfliteInferenceCalculatorReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/calculators/tflite/tflite_inference_calculator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TfliteInferenceCalculatorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cj5tZWRpYXBpcGUvY2FsY3VsYXRvcnMvdGZsaXRlL3RmbGl0ZV9pbmZlcmVu",
            "Y2VfY2FsY3VsYXRvci5wcm90bxIJbWVkaWFwaXBlGiRtZWRpYXBpcGUvZnJh",
            "bWV3b3JrL2NhbGN1bGF0b3IucHJvdG8ikwkKIFRmTGl0ZUluZmVyZW5jZUNh",
            "bGN1bGF0b3JPcHRpb25zEhIKCm1vZGVsX3BhdGgYASABKAkSFgoOdHJ5X21t",
            "YXBfbW9kZWwYBiABKAgSGgoHdXNlX2dwdRgCIAEoCDoFZmFsc2VCAhgBEhwK",
            "CXVzZV9ubmFwaRgDIAEoCDoFZmFsc2VCAhgBEhoKDmNwdV9udW1fdGhyZWFk",
            "GAQgASgFOgItMRJGCghkZWxlZ2F0ZRgFIAEoCzI0Lm1lZGlhcGlwZS5UZkxp",
            "dGVJbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZRrJBgoIRGVs",
            "ZWdhdGUSTQoGdGZsaXRlGAEgASgLMjsubWVkaWFwaXBlLlRmTGl0ZUluZmVy",
            "ZW5jZUNhbGN1bGF0b3JPcHRpb25zLkRlbGVnYXRlLlRmTGl0ZUgAEkcKA2dw",
            "dRgCIAEoCzI4Lm1lZGlhcGlwZS5UZkxpdGVJbmZlcmVuY2VDYWxjdWxhdG9y",
            "T3B0aW9ucy5EZWxlZ2F0ZS5HcHVIABJLCgVubmFwaRgDIAEoCzI6Lm1lZGlh",
            "cGlwZS5UZkxpdGVJbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0",
            "ZS5ObmFwaUgAEk8KB3hubnBhY2sYBCABKAsyPC5tZWRpYXBpcGUuVGZMaXRl",
            "SW5mZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuWG5ucGFja0gA",
            "GggKBlRmTGl0ZRqbAwoDR3B1EiMKFHVzZV9hZHZhbmNlZF9ncHVfYXBpGAEg",
            "ASgIOgVmYWxzZRJOCgNhcGkYBCABKA4yPC5tZWRpYXBpcGUuVGZMaXRlSW5m",
            "ZXJlbmNlQ2FsY3VsYXRvck9wdGlvbnMuRGVsZWdhdGUuR3B1LkFwaToDQU5Z",
            "EiIKFGFsbG93X3ByZWNpc2lvbl9sb3NzGAMgASgIOgR0cnVlEhoKEmNhY2hl",
            "ZF9rZXJuZWxfcGF0aBgCIAEoCRJnCgV1c2FnZRgFIAEoDjJHLm1lZGlhcGlw",
            "ZS5UZkxpdGVJbmZlcmVuY2VDYWxjdWxhdG9yT3B0aW9ucy5EZWxlZ2F0ZS5H",
            "cHUuSW5mZXJlbmNlVXNhZ2U6D1NVU1RBSU5FRF9TUEVFRCImCgNBcGkSBwoD",
            "QU5ZEAASCgoGT1BFTkdMEAESCgoGT1BFTkNMEAIiTgoOSW5mZXJlbmNlVXNh",
            "Z2USDwoLVU5TUEVDSUZJRUQQABIWChJGQVNUX1NJTkdMRV9BTlNXRVIQARIT",
            "Cg9TVVNUQUlORURfU1BFRUQQAhovCgVObmFwaRIRCgljYWNoZV9kaXIYASAB",
            "KAkSEwoLbW9kZWxfdG9rZW4YAiABKAkaIgoHWG5ucGFjaxIXCgtudW1fdGhy",
            "ZWFkcxgBIAEoBToCLTFCCgoIZGVsZWdhdGUyWQoDZXh0EhwubWVkaWFwaXBl",
            "LkNhbGN1bGF0b3JPcHRpb25zGM2Pwm8gASgLMisubWVkaWFwaXBlLlRmTGl0",
            "ZUluZmVyZW5jZUNhbGN1bGF0b3JPcHRpb25z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mediapipe.CalculatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.TfLiteInferenceCalculatorOptions), global::Mediapipe.TfLiteInferenceCalculatorOptions.Parser, new[]{ "ModelPath", "TryMmapModel", "UseGpu", "UseNnapi", "CpuNumThread", "Delegate" }, null, null, new pb::Extension[] { global::Mediapipe.TfLiteInferenceCalculatorOptions.Extensions.Ext }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate), global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Parser, new[]{ "Tflite", "Gpu", "Nnapi", "Xnnpack" }, new[]{ "Delegate" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.TfLite), global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.TfLite.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu), global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu.Parser, new[]{ "UseAdvancedGpuApi", "Api", "AllowPrecisionLoss", "CachedKernelPath", "Usage" }, null, new[]{ typeof(global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu.Types.Api), typeof(global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu.Types.InferenceUsage) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Nnapi), global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Nnapi.Parser, new[]{ "CacheDir", "ModelToken" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Xnnpack), global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Xnnpack.Parser, new[]{ "NumThreads" }, null, null, null, null)})})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Full Example:
  ///
  /// node {
  ///   calculator: "TfLiteInferenceCalculator"
  ///   input_stream: "TENSOR_IN:image_tensors"
  ///   output_stream: "TENSOR_OUT:result_tensors"
  ///   options {
  ///     [mediapipe.TfLiteInferenceCalculatorOptions.ext] {
  ///       model_path: "model.tflite"
  ///       delegate { gpu {} }
  ///     }
  ///   }
  /// }
  /// </summary>
  public sealed partial class TfLiteInferenceCalculatorOptions : pb::IMessage<TfLiteInferenceCalculatorOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TfLiteInferenceCalculatorOptions> _parser = new pb::MessageParser<TfLiteInferenceCalculatorOptions>(() => new TfLiteInferenceCalculatorOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TfLiteInferenceCalculatorOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.TfliteInferenceCalculatorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TfLiteInferenceCalculatorOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TfLiteInferenceCalculatorOptions(TfLiteInferenceCalculatorOptions other) : this() {
      _hasBits0 = other._hasBits0;
      modelPath_ = other.modelPath_;
      tryMmapModel_ = other.tryMmapModel_;
      useGpu_ = other.useGpu_;
      useNnapi_ = other.useNnapi_;
      cpuNumThread_ = other.cpuNumThread_;
      delegate_ = other.delegate_ != null ? other.delegate_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TfLiteInferenceCalculatorOptions Clone() {
      return new TfLiteInferenceCalculatorOptions(this);
    }

    /// <summary>Field number for the "model_path" field.</summary>
    public const int ModelPathFieldNumber = 1;
    private readonly static string ModelPathDefaultValue = "";

    private string modelPath_;
    /// <summary>
    /// Path to the TF Lite model (ex: /path/to/modelname.tflite).
    /// On mobile, this is generally just modelname.tflite.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ModelPath {
      get { return modelPath_ ?? ModelPathDefaultValue; }
      set {
        modelPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "model_path" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasModelPath {
      get { return modelPath_ != null; }
    }
    /// <summary>Clears the value of the "model_path" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearModelPath() {
      modelPath_ = null;
    }

    /// <summary>Field number for the "try_mmap_model" field.</summary>
    public const int TryMmapModelFieldNumber = 6;
    private readonly static bool TryMmapModelDefaultValue = false;

    private bool tryMmapModel_;
    /// <summary>
    /// If true, and model_path is specified, tries to load the model as memory
    /// mapped file if available. This can be significantly faster that loading the
    /// model into a buffer first. If memory mapping is not available or fails,
    /// falls back to loading from buffer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool TryMmapModel {
      get { if ((_hasBits0 & 8) != 0) { return tryMmapModel_; } else { return TryMmapModelDefaultValue; } }
      set {
        _hasBits0 |= 8;
        tryMmapModel_ = value;
      }
    }
    /// <summary>Gets whether the "try_mmap_model" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTryMmapModel {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "try_mmap_model" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTryMmapModel() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "use_gpu" field.</summary>
    public const int UseGpuFieldNumber = 2;
    private readonly static bool UseGpuDefaultValue = false;

    private bool useGpu_;
    /// <summary>
    /// Whether the TF Lite GPU or CPU backend should be used. Effective only when
    /// input tensors are on CPU. For input tensors on GPU, GPU backend is always
    /// used.
    /// DEPRECATED: configure "delegate" instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UseGpu {
      get { if ((_hasBits0 & 1) != 0) { return useGpu_; } else { return UseGpuDefaultValue; } }
      set {
        _hasBits0 |= 1;
        useGpu_ = value;
      }
    }
    /// <summary>Gets whether the "use_gpu" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUseGpu {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "use_gpu" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUseGpu() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "use_nnapi" field.</summary>
    public const int UseNnapiFieldNumber = 3;
    private readonly static bool UseNnapiDefaultValue = false;

    private bool useNnapi_;
    /// <summary>
    /// Android only. When true, an NNAPI delegate will be used for inference.
    /// If NNAPI is not available, then the default CPU delegate will be used
    /// automatically.
    /// DEPRECATED: configure "delegate" instead.
    /// </summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UseNnapi {
      get { if ((_hasBits0 & 2) != 0) { return useNnapi_; } else { return UseNnapiDefaultValue; } }
      set {
        _hasBits0 |= 2;
        useNnapi_ = value;
      }
    }
    /// <summary>Gets whether the "use_nnapi" field is set</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUseNnapi {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "use_nnapi" field</summary>
    [global::System.ObsoleteAttribute]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUseNnapi() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "cpu_num_thread" field.</summary>
    public const int CpuNumThreadFieldNumber = 4;
    private readonly static int CpuNumThreadDefaultValue = -1;

    private int cpuNumThread_;
    /// <summary>
    /// The number of threads available to the interpreter. Effective only when
    /// input tensors are on CPU and 'use_gpu' is false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CpuNumThread {
      get { if ((_hasBits0 & 4) != 0) { return cpuNumThread_; } else { return CpuNumThreadDefaultValue; } }
      set {
        _hasBits0 |= 4;
        cpuNumThread_ = value;
      }
    }
    /// <summary>Gets whether the "cpu_num_thread" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCpuNumThread {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "cpu_num_thread" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCpuNumThread() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "delegate" field.</summary>
    public const int DelegateFieldNumber = 5;
    private global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate delegate_;
    /// <summary>
    /// TfLite delegate to run inference.
    /// If not specified, when any of the input and output is on GPU (i.e, using
    /// the TENSORS_GPU tag) TFLite GPU delegate is used (as if "gpu {}" is
    /// specified), or otherwise regular TFLite on CPU is used (as if "tflite {}"
    /// is specified) except when building with emscripten where xnnpack is used.
    /// NOTE: use_gpu/use_nnapi are ignored if specified. (Delegate takes
    /// precedence over use_* deprecated options.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate Delegate {
      get { return delegate_; }
      set {
        delegate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TfLiteInferenceCalculatorOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TfLiteInferenceCalculatorOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModelPath != other.ModelPath) return false;
      if (TryMmapModel != other.TryMmapModel) return false;
      if (UseGpu != other.UseGpu) return false;
      if (UseNnapi != other.UseNnapi) return false;
      if (CpuNumThread != other.CpuNumThread) return false;
      if (!object.Equals(Delegate, other.Delegate)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasModelPath) hash ^= ModelPath.GetHashCode();
      if (HasTryMmapModel) hash ^= TryMmapModel.GetHashCode();
      if (HasUseGpu) hash ^= UseGpu.GetHashCode();
      if (HasUseNnapi) hash ^= UseNnapi.GetHashCode();
      if (HasCpuNumThread) hash ^= CpuNumThread.GetHashCode();
      if (delegate_ != null) hash ^= Delegate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasModelPath) {
        output.WriteRawTag(10);
        output.WriteString(ModelPath);
      }
      if (HasUseGpu) {
        output.WriteRawTag(16);
        output.WriteBool(UseGpu);
      }
      if (HasUseNnapi) {
        output.WriteRawTag(24);
        output.WriteBool(UseNnapi);
      }
      if (HasCpuNumThread) {
        output.WriteRawTag(32);
        output.WriteInt32(CpuNumThread);
      }
      if (delegate_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Delegate);
      }
      if (HasTryMmapModel) {
        output.WriteRawTag(48);
        output.WriteBool(TryMmapModel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasModelPath) {
        output.WriteRawTag(10);
        output.WriteString(ModelPath);
      }
      if (HasUseGpu) {
        output.WriteRawTag(16);
        output.WriteBool(UseGpu);
      }
      if (HasUseNnapi) {
        output.WriteRawTag(24);
        output.WriteBool(UseNnapi);
      }
      if (HasCpuNumThread) {
        output.WriteRawTag(32);
        output.WriteInt32(CpuNumThread);
      }
      if (delegate_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Delegate);
      }
      if (HasTryMmapModel) {
        output.WriteRawTag(48);
        output.WriteBool(TryMmapModel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasModelPath) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelPath);
      }
      if (HasTryMmapModel) {
        size += 1 + 1;
      }
      if (HasUseGpu) {
        size += 1 + 1;
      }
      if (HasUseNnapi) {
        size += 1 + 1;
      }
      if (HasCpuNumThread) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CpuNumThread);
      }
      if (delegate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Delegate);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TfLiteInferenceCalculatorOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasModelPath) {
        ModelPath = other.ModelPath;
      }
      if (other.HasTryMmapModel) {
        TryMmapModel = other.TryMmapModel;
      }
      if (other.HasUseGpu) {
        UseGpu = other.UseGpu;
      }
      if (other.HasUseNnapi) {
        UseNnapi = other.UseNnapi;
      }
      if (other.HasCpuNumThread) {
        CpuNumThread = other.CpuNumThread;
      }
      if (other.delegate_ != null) {
        if (delegate_ == null) {
          Delegate = new global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate();
        }
        Delegate.MergeFrom(other.Delegate);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ModelPath = input.ReadString();
            break;
          }
          case 16: {
            UseGpu = input.ReadBool();
            break;
          }
          case 24: {
            UseNnapi = input.ReadBool();
            break;
          }
          case 32: {
            CpuNumThread = input.ReadInt32();
            break;
          }
          case 42: {
            if (delegate_ == null) {
              Delegate = new global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate();
            }
            input.ReadMessage(Delegate);
            break;
          }
          case 48: {
            TryMmapModel = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ModelPath = input.ReadString();
            break;
          }
          case 16: {
            UseGpu = input.ReadBool();
            break;
          }
          case 24: {
            UseNnapi = input.ReadBool();
            break;
          }
          case 32: {
            CpuNumThread = input.ReadInt32();
            break;
          }
          case 42: {
            if (delegate_ == null) {
              Delegate = new global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate();
            }
            input.ReadMessage(Delegate);
            break;
          }
          case 48: {
            TryMmapModel = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TfLiteInferenceCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public sealed partial class Delegate : pb::IMessage<Delegate>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Delegate> _parser = new pb::MessageParser<Delegate>(() => new Delegate());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Delegate> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mediapipe.TfLiteInferenceCalculatorOptions.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Delegate() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Delegate(Delegate other) : this() {
          switch (other.DelegateCase) {
            case DelegateOneofCase.Tflite:
              Tflite = other.Tflite.Clone();
              break;
            case DelegateOneofCase.Gpu:
              Gpu = other.Gpu.Clone();
              break;
            case DelegateOneofCase.Nnapi:
              Nnapi = other.Nnapi.Clone();
              break;
            case DelegateOneofCase.Xnnpack:
              Xnnpack = other.Xnnpack.Clone();
              break;
          }

          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Delegate Clone() {
          return new Delegate(this);
        }

        /// <summary>Field number for the "tflite" field.</summary>
        public const int TfliteFieldNumber = 1;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.TfLite Tflite {
          get { return delegateCase_ == DelegateOneofCase.Tflite ? (global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.TfLite) delegate_ : null; }
          set {
            delegate_ = value;
            delegateCase_ = value == null ? DelegateOneofCase.None : DelegateOneofCase.Tflite;
          }
        }

        /// <summary>Field number for the "gpu" field.</summary>
        public const int GpuFieldNumber = 2;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu Gpu {
          get { return delegateCase_ == DelegateOneofCase.Gpu ? (global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu) delegate_ : null; }
          set {
            delegate_ = value;
            delegateCase_ = value == null ? DelegateOneofCase.None : DelegateOneofCase.Gpu;
          }
        }

        /// <summary>Field number for the "nnapi" field.</summary>
        public const int NnapiFieldNumber = 3;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Nnapi Nnapi {
          get { return delegateCase_ == DelegateOneofCase.Nnapi ? (global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Nnapi) delegate_ : null; }
          set {
            delegate_ = value;
            delegateCase_ = value == null ? DelegateOneofCase.None : DelegateOneofCase.Nnapi;
          }
        }

        /// <summary>Field number for the "xnnpack" field.</summary>
        public const int XnnpackFieldNumber = 4;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Xnnpack Xnnpack {
          get { return delegateCase_ == DelegateOneofCase.Xnnpack ? (global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Xnnpack) delegate_ : null; }
          set {
            delegate_ = value;
            delegateCase_ = value == null ? DelegateOneofCase.None : DelegateOneofCase.Xnnpack;
          }
        }

        private object delegate_;
        /// <summary>Enum of possible cases for the "delegate" oneof.</summary>
        public enum DelegateOneofCase {
          None = 0,
          Tflite = 1,
          Gpu = 2,
          Nnapi = 3,
          Xnnpack = 4,
        }
        private DelegateOneofCase delegateCase_ = DelegateOneofCase.None;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DelegateOneofCase DelegateCase {
          get { return delegateCase_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearDelegate() {
          delegateCase_ = DelegateOneofCase.None;
          delegate_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Delegate);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Delegate other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Tflite, other.Tflite)) return false;
          if (!object.Equals(Gpu, other.Gpu)) return false;
          if (!object.Equals(Nnapi, other.Nnapi)) return false;
          if (!object.Equals(Xnnpack, other.Xnnpack)) return false;
          if (DelegateCase != other.DelegateCase) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (delegateCase_ == DelegateOneofCase.Tflite) hash ^= Tflite.GetHashCode();
          if (delegateCase_ == DelegateOneofCase.Gpu) hash ^= Gpu.GetHashCode();
          if (delegateCase_ == DelegateOneofCase.Nnapi) hash ^= Nnapi.GetHashCode();
          if (delegateCase_ == DelegateOneofCase.Xnnpack) hash ^= Xnnpack.GetHashCode();
          hash ^= (int) delegateCase_;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (delegateCase_ == DelegateOneofCase.Tflite) {
            output.WriteRawTag(10);
            output.WriteMessage(Tflite);
          }
          if (delegateCase_ == DelegateOneofCase.Gpu) {
            output.WriteRawTag(18);
            output.WriteMessage(Gpu);
          }
          if (delegateCase_ == DelegateOneofCase.Nnapi) {
            output.WriteRawTag(26);
            output.WriteMessage(Nnapi);
          }
          if (delegateCase_ == DelegateOneofCase.Xnnpack) {
            output.WriteRawTag(34);
            output.WriteMessage(Xnnpack);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (delegateCase_ == DelegateOneofCase.Tflite) {
            output.WriteRawTag(10);
            output.WriteMessage(Tflite);
          }
          if (delegateCase_ == DelegateOneofCase.Gpu) {
            output.WriteRawTag(18);
            output.WriteMessage(Gpu);
          }
          if (delegateCase_ == DelegateOneofCase.Nnapi) {
            output.WriteRawTag(26);
            output.WriteMessage(Nnapi);
          }
          if (delegateCase_ == DelegateOneofCase.Xnnpack) {
            output.WriteRawTag(34);
            output.WriteMessage(Xnnpack);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (delegateCase_ == DelegateOneofCase.Tflite) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tflite);
          }
          if (delegateCase_ == DelegateOneofCase.Gpu) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Gpu);
          }
          if (delegateCase_ == DelegateOneofCase.Nnapi) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Nnapi);
          }
          if (delegateCase_ == DelegateOneofCase.Xnnpack) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Xnnpack);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Delegate other) {
          if (other == null) {
            return;
          }
          switch (other.DelegateCase) {
            case DelegateOneofCase.Tflite:
              if (Tflite == null) {
                Tflite = new global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.TfLite();
              }
              Tflite.MergeFrom(other.Tflite);
              break;
            case DelegateOneofCase.Gpu:
              if (Gpu == null) {
                Gpu = new global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu();
              }
              Gpu.MergeFrom(other.Gpu);
              break;
            case DelegateOneofCase.Nnapi:
              if (Nnapi == null) {
                Nnapi = new global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Nnapi();
              }
              Nnapi.MergeFrom(other.Nnapi);
              break;
            case DelegateOneofCase.Xnnpack:
              if (Xnnpack == null) {
                Xnnpack = new global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Xnnpack();
              }
              Xnnpack.MergeFrom(other.Xnnpack);
              break;
          }

          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.TfLite subBuilder = new global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.TfLite();
                if (delegateCase_ == DelegateOneofCase.Tflite) {
                  subBuilder.MergeFrom(Tflite);
                }
                input.ReadMessage(subBuilder);
                Tflite = subBuilder;
                break;
              }
              case 18: {
                global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu subBuilder = new global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu();
                if (delegateCase_ == DelegateOneofCase.Gpu) {
                  subBuilder.MergeFrom(Gpu);
                }
                input.ReadMessage(subBuilder);
                Gpu = subBuilder;
                break;
              }
              case 26: {
                global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Nnapi subBuilder = new global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Nnapi();
                if (delegateCase_ == DelegateOneofCase.Nnapi) {
                  subBuilder.MergeFrom(Nnapi);
                }
                input.ReadMessage(subBuilder);
                Nnapi = subBuilder;
                break;
              }
              case 34: {
                global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Xnnpack subBuilder = new global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Xnnpack();
                if (delegateCase_ == DelegateOneofCase.Xnnpack) {
                  subBuilder.MergeFrom(Xnnpack);
                }
                input.ReadMessage(subBuilder);
                Xnnpack = subBuilder;
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.TfLite subBuilder = new global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.TfLite();
                if (delegateCase_ == DelegateOneofCase.Tflite) {
                  subBuilder.MergeFrom(Tflite);
                }
                input.ReadMessage(subBuilder);
                Tflite = subBuilder;
                break;
              }
              case 18: {
                global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu subBuilder = new global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu();
                if (delegateCase_ == DelegateOneofCase.Gpu) {
                  subBuilder.MergeFrom(Gpu);
                }
                input.ReadMessage(subBuilder);
                Gpu = subBuilder;
                break;
              }
              case 26: {
                global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Nnapi subBuilder = new global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Nnapi();
                if (delegateCase_ == DelegateOneofCase.Nnapi) {
                  subBuilder.MergeFrom(Nnapi);
                }
                input.ReadMessage(subBuilder);
                Nnapi = subBuilder;
                break;
              }
              case 34: {
                global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Xnnpack subBuilder = new global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Xnnpack();
                if (delegateCase_ == DelegateOneofCase.Xnnpack) {
                  subBuilder.MergeFrom(Xnnpack);
                }
                input.ReadMessage(subBuilder);
                Xnnpack = subBuilder;
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Delegate message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static partial class Types {
          /// <summary>
          /// Default inference provided by tflite.
          /// </summary>
          public sealed partial class TfLite : pb::IMessage<TfLite>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<TfLite> _parser = new pb::MessageParser<TfLite>(() => new TfLite());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pb::MessageParser<TfLite> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public TfLite() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public TfLite(TfLite other) : this() {
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public TfLite Clone() {
              return new TfLite(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override bool Equals(object other) {
              return Equals(other as TfLite);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool Equals(TfLite other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override int GetHashCode() {
              int hash = 1;
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int CalculateSize() {
              int size = 0;
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(TfLite other) {
              if (other == null) {
                return;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                }
              }
            }
            #endif

          }

          /// <summary>
          /// Delegate to run GPU inference depending on the device.
          /// (Can use OpenGl, OpenCl, Metal depending on the device.)
          /// </summary>
          public sealed partial class Gpu : pb::IMessage<Gpu>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Gpu> _parser = new pb::MessageParser<Gpu>(() => new Gpu());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pb::MessageParser<Gpu> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public Gpu() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public Gpu(Gpu other) : this() {
              _hasBits0 = other._hasBits0;
              useAdvancedGpuApi_ = other.useAdvancedGpuApi_;
              api_ = other.api_;
              allowPrecisionLoss_ = other.allowPrecisionLoss_;
              cachedKernelPath_ = other.cachedKernelPath_;
              usage_ = other.usage_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public Gpu Clone() {
              return new Gpu(this);
            }

            /// <summary>Field number for the "use_advanced_gpu_api" field.</summary>
            public const int UseAdvancedGpuApiFieldNumber = 1;
            private readonly static bool UseAdvancedGpuApiDefaultValue = false;

            private bool useAdvancedGpuApi_;
            /// <summary>
            /// Experimental, Android/Linux only. Use TFLite GPU delegate API2 for
            /// the NN inference.
            /// example:
            ///   delegate: { gpu { use_advanced_gpu_api: true } }
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool UseAdvancedGpuApi {
              get { if ((_hasBits0 & 1) != 0) { return useAdvancedGpuApi_; } else { return UseAdvancedGpuApiDefaultValue; } }
              set {
                _hasBits0 |= 1;
                useAdvancedGpuApi_ = value;
              }
            }
            /// <summary>Gets whether the "use_advanced_gpu_api" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasUseAdvancedGpuApi {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "use_advanced_gpu_api" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearUseAdvancedGpuApi() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "api" field.</summary>
            public const int ApiFieldNumber = 4;
            private readonly static global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu.Types.Api ApiDefaultValue = global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu.Types.Api.Any;

            private global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu.Types.Api api_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu.Types.Api Api {
              get { if ((_hasBits0 & 4) != 0) { return api_; } else { return ApiDefaultValue; } }
              set {
                _hasBits0 |= 4;
                api_ = value;
              }
            }
            /// <summary>Gets whether the "api" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasApi {
              get { return (_hasBits0 & 4) != 0; }
            }
            /// <summary>Clears the value of the "api" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearApi() {
              _hasBits0 &= ~4;
            }

            /// <summary>Field number for the "allow_precision_loss" field.</summary>
            public const int AllowPrecisionLossFieldNumber = 3;
            private readonly static bool AllowPrecisionLossDefaultValue = true;

            private bool allowPrecisionLoss_;
            /// <summary>
            /// This option is valid for TFLite GPU delegate API2 only,
            /// Set to true to use 16-bit float precision. If max precision is needed,
            /// set to false for 32-bit float calculations only.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool AllowPrecisionLoss {
              get { if ((_hasBits0 & 2) != 0) { return allowPrecisionLoss_; } else { return AllowPrecisionLossDefaultValue; } }
              set {
                _hasBits0 |= 2;
                allowPrecisionLoss_ = value;
              }
            }
            /// <summary>Gets whether the "allow_precision_loss" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasAllowPrecisionLoss {
              get { return (_hasBits0 & 2) != 0; }
            }
            /// <summary>Clears the value of the "allow_precision_loss" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearAllowPrecisionLoss() {
              _hasBits0 &= ~2;
            }

            /// <summary>Field number for the "cached_kernel_path" field.</summary>
            public const int CachedKernelPathFieldNumber = 2;
            private readonly static string CachedKernelPathDefaultValue = "";

            private string cachedKernelPath_;
            /// <summary>
            /// Load pre-compiled serialized binary cache to accelerate init process.
            /// Only available for OpenCL delegate on Android.
            /// Kernel caching will only be enabled if this path is set.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public string CachedKernelPath {
              get { return cachedKernelPath_ ?? CachedKernelPathDefaultValue; }
              set {
                cachedKernelPath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "cached_kernel_path" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasCachedKernelPath {
              get { return cachedKernelPath_ != null; }
            }
            /// <summary>Clears the value of the "cached_kernel_path" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearCachedKernelPath() {
              cachedKernelPath_ = null;
            }

            /// <summary>Field number for the "usage" field.</summary>
            public const int UsageFieldNumber = 5;
            private readonly static global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu.Types.InferenceUsage UsageDefaultValue = global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu.Types.InferenceUsage.SustainedSpeed;

            private global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu.Types.InferenceUsage usage_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu.Types.InferenceUsage Usage {
              get { if ((_hasBits0 & 8) != 0) { return usage_; } else { return UsageDefaultValue; } }
              set {
                _hasBits0 |= 8;
                usage_ = value;
              }
            }
            /// <summary>Gets whether the "usage" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasUsage {
              get { return (_hasBits0 & 8) != 0; }
            }
            /// <summary>Clears the value of the "usage" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearUsage() {
              _hasBits0 &= ~8;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override bool Equals(object other) {
              return Equals(other as Gpu);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool Equals(Gpu other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (UseAdvancedGpuApi != other.UseAdvancedGpuApi) return false;
              if (Api != other.Api) return false;
              if (AllowPrecisionLoss != other.AllowPrecisionLoss) return false;
              if (CachedKernelPath != other.CachedKernelPath) return false;
              if (Usage != other.Usage) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override int GetHashCode() {
              int hash = 1;
              if (HasUseAdvancedGpuApi) hash ^= UseAdvancedGpuApi.GetHashCode();
              if (HasApi) hash ^= Api.GetHashCode();
              if (HasAllowPrecisionLoss) hash ^= AllowPrecisionLoss.GetHashCode();
              if (HasCachedKernelPath) hash ^= CachedKernelPath.GetHashCode();
              if (HasUsage) hash ^= Usage.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasUseAdvancedGpuApi) {
                output.WriteRawTag(8);
                output.WriteBool(UseAdvancedGpuApi);
              }
              if (HasCachedKernelPath) {
                output.WriteRawTag(18);
                output.WriteString(CachedKernelPath);
              }
              if (HasAllowPrecisionLoss) {
                output.WriteRawTag(24);
                output.WriteBool(AllowPrecisionLoss);
              }
              if (HasApi) {
                output.WriteRawTag(32);
                output.WriteEnum((int) Api);
              }
              if (HasUsage) {
                output.WriteRawTag(40);
                output.WriteEnum((int) Usage);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasUseAdvancedGpuApi) {
                output.WriteRawTag(8);
                output.WriteBool(UseAdvancedGpuApi);
              }
              if (HasCachedKernelPath) {
                output.WriteRawTag(18);
                output.WriteString(CachedKernelPath);
              }
              if (HasAllowPrecisionLoss) {
                output.WriteRawTag(24);
                output.WriteBool(AllowPrecisionLoss);
              }
              if (HasApi) {
                output.WriteRawTag(32);
                output.WriteEnum((int) Api);
              }
              if (HasUsage) {
                output.WriteRawTag(40);
                output.WriteEnum((int) Usage);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int CalculateSize() {
              int size = 0;
              if (HasUseAdvancedGpuApi) {
                size += 1 + 1;
              }
              if (HasApi) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Api);
              }
              if (HasAllowPrecisionLoss) {
                size += 1 + 1;
              }
              if (HasCachedKernelPath) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CachedKernelPath);
              }
              if (HasUsage) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Usage);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(Gpu other) {
              if (other == null) {
                return;
              }
              if (other.HasUseAdvancedGpuApi) {
                UseAdvancedGpuApi = other.UseAdvancedGpuApi;
              }
              if (other.HasApi) {
                Api = other.Api;
              }
              if (other.HasAllowPrecisionLoss) {
                AllowPrecisionLoss = other.AllowPrecisionLoss;
              }
              if (other.HasCachedKernelPath) {
                CachedKernelPath = other.CachedKernelPath;
              }
              if (other.HasUsage) {
                Usage = other.Usage;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    UseAdvancedGpuApi = input.ReadBool();
                    break;
                  }
                  case 18: {
                    CachedKernelPath = input.ReadString();
                    break;
                  }
                  case 24: {
                    AllowPrecisionLoss = input.ReadBool();
                    break;
                  }
                  case 32: {
                    Api = (global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu.Types.Api) input.ReadEnum();
                    break;
                  }
                  case 40: {
                    Usage = (global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu.Types.InferenceUsage) input.ReadEnum();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    UseAdvancedGpuApi = input.ReadBool();
                    break;
                  }
                  case 18: {
                    CachedKernelPath = input.ReadString();
                    break;
                  }
                  case 24: {
                    AllowPrecisionLoss = input.ReadBool();
                    break;
                  }
                  case 32: {
                    Api = (global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu.Types.Api) input.ReadEnum();
                    break;
                  }
                  case 40: {
                    Usage = (global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Types.Gpu.Types.InferenceUsage) input.ReadEnum();
                    break;
                  }
                }
              }
            }
            #endif

            #region Nested types
            /// <summary>Container for nested types declared in the Gpu message type.</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static partial class Types {
              /// <summary>
              /// This option is valid for TFLite GPU delegate API2 only,
              /// Choose any of available APIs to force running inference using it.
              /// </summary>
              public enum Api {
                [pbr::OriginalName("ANY")] Any = 0,
                [pbr::OriginalName("OPENGL")] Opengl = 1,
                [pbr::OriginalName("OPENCL")] Opencl = 2,
              }

              /// <summary>
              /// Encapsulated compilation/runtime tradeoffs.
              /// </summary>
              public enum InferenceUsage {
                [pbr::OriginalName("UNSPECIFIED")] Unspecified = 0,
                /// <summary>
                /// InferenceRunner will be used only once. Therefore, it is important to
                /// minimize bootstrap time as well.
                /// </summary>
                [pbr::OriginalName("FAST_SINGLE_ANSWER")] FastSingleAnswer = 1,
                /// <summary>
                /// Prefer maximizing the throughput. Same inference runner will be used
                /// repeatedly on different inputs.
                /// </summary>
                [pbr::OriginalName("SUSTAINED_SPEED")] SustainedSpeed = 2,
              }

            }
            #endregion

          }

          /// <summary>
          /// Android only.
          /// </summary>
          public sealed partial class Nnapi : pb::IMessage<Nnapi>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Nnapi> _parser = new pb::MessageParser<Nnapi>(() => new Nnapi());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pb::MessageParser<Nnapi> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public Nnapi() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public Nnapi(Nnapi other) : this() {
              cacheDir_ = other.cacheDir_;
              modelToken_ = other.modelToken_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public Nnapi Clone() {
              return new Nnapi(this);
            }

            /// <summary>Field number for the "cache_dir" field.</summary>
            public const int CacheDirFieldNumber = 1;
            private readonly static string CacheDirDefaultValue = "";

            private string cacheDir_;
            /// <summary>
            /// Directory to store compilation cache. If unspecified, NNAPI will not
            /// try caching the compilation.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public string CacheDir {
              get { return cacheDir_ ?? CacheDirDefaultValue; }
              set {
                cacheDir_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "cache_dir" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasCacheDir {
              get { return cacheDir_ != null; }
            }
            /// <summary>Clears the value of the "cache_dir" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearCacheDir() {
              cacheDir_ = null;
            }

            /// <summary>Field number for the "model_token" field.</summary>
            public const int ModelTokenFieldNumber = 2;
            private readonly static string ModelTokenDefaultValue = "";

            private string modelToken_;
            /// <summary>
            /// Unique token identifying the model. It is the caller's responsibility
            /// to ensure there is no clash of the tokens. If unspecified, NNAPI will
            /// not try caching the compilation.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public string ModelToken {
              get { return modelToken_ ?? ModelTokenDefaultValue; }
              set {
                modelToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "model_token" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasModelToken {
              get { return modelToken_ != null; }
            }
            /// <summary>Clears the value of the "model_token" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearModelToken() {
              modelToken_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override bool Equals(object other) {
              return Equals(other as Nnapi);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool Equals(Nnapi other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (CacheDir != other.CacheDir) return false;
              if (ModelToken != other.ModelToken) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override int GetHashCode() {
              int hash = 1;
              if (HasCacheDir) hash ^= CacheDir.GetHashCode();
              if (HasModelToken) hash ^= ModelToken.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasCacheDir) {
                output.WriteRawTag(10);
                output.WriteString(CacheDir);
              }
              if (HasModelToken) {
                output.WriteRawTag(18);
                output.WriteString(ModelToken);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasCacheDir) {
                output.WriteRawTag(10);
                output.WriteString(CacheDir);
              }
              if (HasModelToken) {
                output.WriteRawTag(18);
                output.WriteString(ModelToken);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int CalculateSize() {
              int size = 0;
              if (HasCacheDir) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CacheDir);
              }
              if (HasModelToken) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(ModelToken);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(Nnapi other) {
              if (other == null) {
                return;
              }
              if (other.HasCacheDir) {
                CacheDir = other.CacheDir;
              }
              if (other.HasModelToken) {
                ModelToken = other.ModelToken;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    CacheDir = input.ReadString();
                    break;
                  }
                  case 18: {
                    ModelToken = input.ReadString();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    CacheDir = input.ReadString();
                    break;
                  }
                  case 18: {
                    ModelToken = input.ReadString();
                    break;
                  }
                }
              }
            }
            #endif

          }

          public sealed partial class Xnnpack : pb::IMessage<Xnnpack>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Xnnpack> _parser = new pb::MessageParser<Xnnpack>(() => new Xnnpack());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pb::MessageParser<Xnnpack> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::Mediapipe.TfLiteInferenceCalculatorOptions.Types.Delegate.Descriptor.NestedTypes[3]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public Xnnpack() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public Xnnpack(Xnnpack other) : this() {
              _hasBits0 = other._hasBits0;
              numThreads_ = other.numThreads_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public Xnnpack Clone() {
              return new Xnnpack(this);
            }

            /// <summary>Field number for the "num_threads" field.</summary>
            public const int NumThreadsFieldNumber = 1;
            private readonly static int NumThreadsDefaultValue = -1;

            private int numThreads_;
            /// <summary>
            /// Number of threads for XNNPACK delegate. (By default, calculator tries
            /// to choose optimal number of threads depending on the device.)
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int NumThreads {
              get { if ((_hasBits0 & 1) != 0) { return numThreads_; } else { return NumThreadsDefaultValue; } }
              set {
                _hasBits0 |= 1;
                numThreads_ = value;
              }
            }
            /// <summary>Gets whether the "num_threads" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasNumThreads {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "num_threads" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearNumThreads() {
              _hasBits0 &= ~1;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override bool Equals(object other) {
              return Equals(other as Xnnpack);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool Equals(Xnnpack other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (NumThreads != other.NumThreads) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override int GetHashCode() {
              int hash = 1;
              if (HasNumThreads) hash ^= NumThreads.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasNumThreads) {
                output.WriteRawTag(8);
                output.WriteInt32(NumThreads);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasNumThreads) {
                output.WriteRawTag(8);
                output.WriteInt32(NumThreads);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int CalculateSize() {
              int size = 0;
              if (HasNumThreads) {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumThreads);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(Xnnpack other) {
              if (other == null) {
                return;
              }
              if (other.HasNumThreads) {
                NumThreads = other.NumThreads;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    NumThreads = input.ReadInt32();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    NumThreads = input.ReadInt32();
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

    }
    #endregion

    #region Extensions
    /// <summary>Container for extensions for other messages declared in the TfLiteInferenceCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Extensions {
      public static readonly pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.TfLiteInferenceCalculatorOptions> Ext =
        new pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.TfLiteInferenceCalculatorOptions>(233867213, pb::FieldCodec.ForMessage(1870937706, global::Mediapipe.TfLiteInferenceCalculatorOptions.Parser));
    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
