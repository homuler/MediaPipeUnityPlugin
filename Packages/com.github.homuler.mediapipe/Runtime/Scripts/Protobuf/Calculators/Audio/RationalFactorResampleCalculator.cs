// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/calculators/audio/rational_factor_resample_calculator.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/calculators/audio/rational_factor_resample_calculator.proto</summary>
  public static partial class RationalFactorResampleCalculatorReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/calculators/audio/rational_factor_resample_calculator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RationalFactorResampleCalculatorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CkVtZWRpYXBpcGUvY2FsY3VsYXRvcnMvYXVkaW8vcmF0aW9uYWxfZmFjdG9y",
            "X3Jlc2FtcGxlX2NhbGN1bGF0b3IucHJvdG8SCW1lZGlhcGlwZRokbWVkaWFw",
            "aXBlL2ZyYW1ld29yay9jYWxjdWxhdG9yLnByb3RvIqwDCidSYXRpb25hbEZh",
            "Y3RvclJlc2FtcGxlQ2FsY3VsYXRvck9wdGlvbnMSGgoSdGFyZ2V0X3NhbXBs",
            "ZV9yYXRlGAEgASgBEnwKIXJlc2FtcGxlcl9yYXRpb25hbF9mYWN0b3Jfb3B0",
            "aW9ucxgCIAEoCzJRLm1lZGlhcGlwZS5SYXRpb25hbEZhY3RvclJlc2FtcGxl",
            "Q2FsY3VsYXRvck9wdGlvbnMuUmVzYW1wbGVyUmF0aW9uYWxGYWN0b3JPcHRp",
            "b25zEisKHWNoZWNrX2luY29uc2lzdGVudF90aW1lc3RhbXBzGAMgASgIOgR0",
            "cnVlGlgKHlJlc2FtcGxlclJhdGlvbmFsRmFjdG9yT3B0aW9ucxIOCgZyYWRp",
            "dXMYASABKAESDgoGY3V0b2ZmGAIgASgBEhYKC2thaXNlcl9iZXRhGAMgASgB",
            "OgE2MmAKA2V4dBIcLm1lZGlhcGlwZS5DYWxjdWxhdG9yT3B0aW9ucxjKv+57",
            "IAEoCzIyLm1lZGlhcGlwZS5SYXRpb25hbEZhY3RvclJlc2FtcGxlQ2FsY3Vs",
            "YXRvck9wdGlvbnM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mediapipe.CalculatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.RationalFactorResampleCalculatorOptions), global::Mediapipe.RationalFactorResampleCalculatorOptions.Parser, new[]{ "TargetSampleRate", "ResamplerRationalFactorOptions", "CheckInconsistentTimestamps" }, null, null, new pb::Extension[] { global::Mediapipe.RationalFactorResampleCalculatorOptions.Extensions.Ext }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.RationalFactorResampleCalculatorOptions.Types.ResamplerRationalFactorOptions), global::Mediapipe.RationalFactorResampleCalculatorOptions.Types.ResamplerRationalFactorOptions.Parser, new[]{ "Radius", "Cutoff", "KaiserBeta" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// NOTE: This calculator uses QResampler, despite the name, which supersedes
  /// RationalFactorResampler.
  /// </summary>
  public sealed partial class RationalFactorResampleCalculatorOptions : pb::IMessage<RationalFactorResampleCalculatorOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RationalFactorResampleCalculatorOptions> _parser = new pb::MessageParser<RationalFactorResampleCalculatorOptions>(() => new RationalFactorResampleCalculatorOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RationalFactorResampleCalculatorOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.RationalFactorResampleCalculatorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RationalFactorResampleCalculatorOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RationalFactorResampleCalculatorOptions(RationalFactorResampleCalculatorOptions other) : this() {
      _hasBits0 = other._hasBits0;
      targetSampleRate_ = other.targetSampleRate_;
      resamplerRationalFactorOptions_ = other.resamplerRationalFactorOptions_ != null ? other.resamplerRationalFactorOptions_.Clone() : null;
      checkInconsistentTimestamps_ = other.checkInconsistentTimestamps_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RationalFactorResampleCalculatorOptions Clone() {
      return new RationalFactorResampleCalculatorOptions(this);
    }

    /// <summary>Field number for the "target_sample_rate" field.</summary>
    public const int TargetSampleRateFieldNumber = 1;
    private readonly static double TargetSampleRateDefaultValue = 0D;

    private double targetSampleRate_;
    /// <summary>
    /// target_sample_rate is the sample rate, in Hertz, of the output
    /// stream.  Required.  Must be greater than 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TargetSampleRate {
      get { if ((_hasBits0 & 1) != 0) { return targetSampleRate_; } else { return TargetSampleRateDefaultValue; } }
      set {
        _hasBits0 |= 1;
        targetSampleRate_ = value;
      }
    }
    /// <summary>Gets whether the "target_sample_rate" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTargetSampleRate {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "target_sample_rate" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTargetSampleRate() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "resampler_rational_factor_options" field.</summary>
    public const int ResamplerRationalFactorOptionsFieldNumber = 2;
    private global::Mediapipe.RationalFactorResampleCalculatorOptions.Types.ResamplerRationalFactorOptions resamplerRationalFactorOptions_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.RationalFactorResampleCalculatorOptions.Types.ResamplerRationalFactorOptions ResamplerRationalFactorOptions {
      get { return resamplerRationalFactorOptions_; }
      set {
        resamplerRationalFactorOptions_ = value;
      }
    }

    /// <summary>Field number for the "check_inconsistent_timestamps" field.</summary>
    public const int CheckInconsistentTimestampsFieldNumber = 3;
    private readonly static bool CheckInconsistentTimestampsDefaultValue = true;

    private bool checkInconsistentTimestamps_;
    /// <summary>
    /// Set to false to disable checks for jitter in timestamp values. Useful with
    /// live audio input.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool CheckInconsistentTimestamps {
      get { if ((_hasBits0 & 2) != 0) { return checkInconsistentTimestamps_; } else { return CheckInconsistentTimestampsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        checkInconsistentTimestamps_ = value;
      }
    }
    /// <summary>Gets whether the "check_inconsistent_timestamps" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCheckInconsistentTimestamps {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "check_inconsistent_timestamps" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCheckInconsistentTimestamps() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RationalFactorResampleCalculatorOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RationalFactorResampleCalculatorOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TargetSampleRate, other.TargetSampleRate)) return false;
      if (!object.Equals(ResamplerRationalFactorOptions, other.ResamplerRationalFactorOptions)) return false;
      if (CheckInconsistentTimestamps != other.CheckInconsistentTimestamps) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTargetSampleRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TargetSampleRate);
      if (resamplerRationalFactorOptions_ != null) hash ^= ResamplerRationalFactorOptions.GetHashCode();
      if (HasCheckInconsistentTimestamps) hash ^= CheckInconsistentTimestamps.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasTargetSampleRate) {
        output.WriteRawTag(9);
        output.WriteDouble(TargetSampleRate);
      }
      if (resamplerRationalFactorOptions_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ResamplerRationalFactorOptions);
      }
      if (HasCheckInconsistentTimestamps) {
        output.WriteRawTag(24);
        output.WriteBool(CheckInconsistentTimestamps);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTargetSampleRate) {
        output.WriteRawTag(9);
        output.WriteDouble(TargetSampleRate);
      }
      if (resamplerRationalFactorOptions_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(ResamplerRationalFactorOptions);
      }
      if (HasCheckInconsistentTimestamps) {
        output.WriteRawTag(24);
        output.WriteBool(CheckInconsistentTimestamps);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTargetSampleRate) {
        size += 1 + 8;
      }
      if (resamplerRationalFactorOptions_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ResamplerRationalFactorOptions);
      }
      if (HasCheckInconsistentTimestamps) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RationalFactorResampleCalculatorOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasTargetSampleRate) {
        TargetSampleRate = other.TargetSampleRate;
      }
      if (other.resamplerRationalFactorOptions_ != null) {
        if (resamplerRationalFactorOptions_ == null) {
          ResamplerRationalFactorOptions = new global::Mediapipe.RationalFactorResampleCalculatorOptions.Types.ResamplerRationalFactorOptions();
        }
        ResamplerRationalFactorOptions.MergeFrom(other.ResamplerRationalFactorOptions);
      }
      if (other.HasCheckInconsistentTimestamps) {
        CheckInconsistentTimestamps = other.CheckInconsistentTimestamps;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            TargetSampleRate = input.ReadDouble();
            break;
          }
          case 18: {
            if (resamplerRationalFactorOptions_ == null) {
              ResamplerRationalFactorOptions = new global::Mediapipe.RationalFactorResampleCalculatorOptions.Types.ResamplerRationalFactorOptions();
            }
            input.ReadMessage(ResamplerRationalFactorOptions);
            break;
          }
          case 24: {
            CheckInconsistentTimestamps = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            TargetSampleRate = input.ReadDouble();
            break;
          }
          case 18: {
            if (resamplerRationalFactorOptions_ == null) {
              ResamplerRationalFactorOptions = new global::Mediapipe.RationalFactorResampleCalculatorOptions.Types.ResamplerRationalFactorOptions();
            }
            input.ReadMessage(ResamplerRationalFactorOptions);
            break;
          }
          case 24: {
            CheckInconsistentTimestamps = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the RationalFactorResampleCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Parameters for initializing QResampler. See QResampler for more details.
      /// </summary>
      public sealed partial class ResamplerRationalFactorOptions : pb::IMessage<ResamplerRationalFactorOptions>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<ResamplerRationalFactorOptions> _parser = new pb::MessageParser<ResamplerRationalFactorOptions>(() => new ResamplerRationalFactorOptions());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<ResamplerRationalFactorOptions> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mediapipe.RationalFactorResampleCalculatorOptions.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ResamplerRationalFactorOptions() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ResamplerRationalFactorOptions(ResamplerRationalFactorOptions other) : this() {
          _hasBits0 = other._hasBits0;
          radius_ = other.radius_;
          cutoff_ = other.cutoff_;
          kaiserBeta_ = other.kaiserBeta_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ResamplerRationalFactorOptions Clone() {
          return new ResamplerRationalFactorOptions(this);
        }

        /// <summary>Field number for the "radius" field.</summary>
        public const int RadiusFieldNumber = 1;
        private readonly static double RadiusDefaultValue = 0D;

        private double radius_;
        /// <summary>
        /// Kernel radius in units of input samples.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Radius {
          get { if ((_hasBits0 & 1) != 0) { return radius_; } else { return RadiusDefaultValue; } }
          set {
            _hasBits0 |= 1;
            radius_ = value;
          }
        }
        /// <summary>Gets whether the "radius" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasRadius {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "radius" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearRadius() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "cutoff" field.</summary>
        public const int CutoffFieldNumber = 2;
        private readonly static double CutoffDefaultValue = 0D;

        private double cutoff_;
        /// <summary>
        /// Anti-aliasing cutoff frequency in Hertz. A reasonable setting is
        /// 0.45 * min(input_sample_rate, output_sample_rate).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double Cutoff {
          get { if ((_hasBits0 & 2) != 0) { return cutoff_; } else { return CutoffDefaultValue; } }
          set {
            _hasBits0 |= 2;
            cutoff_ = value;
          }
        }
        /// <summary>Gets whether the "cutoff" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasCutoff {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "cutoff" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearCutoff() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "kaiser_beta" field.</summary>
        public const int KaiserBetaFieldNumber = 3;
        private readonly static double KaiserBetaDefaultValue = 6D;

        private double kaiserBeta_;
        /// <summary>
        /// The Kaiser beta parameter for the kernel window.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public double KaiserBeta {
          get { if ((_hasBits0 & 4) != 0) { return kaiserBeta_; } else { return KaiserBetaDefaultValue; } }
          set {
            _hasBits0 |= 4;
            kaiserBeta_ = value;
          }
        }
        /// <summary>Gets whether the "kaiser_beta" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasKaiserBeta {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "kaiser_beta" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearKaiserBeta() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as ResamplerRationalFactorOptions);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(ResamplerRationalFactorOptions other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Radius, other.Radius)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Cutoff, other.Cutoff)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(KaiserBeta, other.KaiserBeta)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasRadius) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Radius);
          if (HasCutoff) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Cutoff);
          if (HasKaiserBeta) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(KaiserBeta);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasRadius) {
            output.WriteRawTag(9);
            output.WriteDouble(Radius);
          }
          if (HasCutoff) {
            output.WriteRawTag(17);
            output.WriteDouble(Cutoff);
          }
          if (HasKaiserBeta) {
            output.WriteRawTag(25);
            output.WriteDouble(KaiserBeta);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasRadius) {
            output.WriteRawTag(9);
            output.WriteDouble(Radius);
          }
          if (HasCutoff) {
            output.WriteRawTag(17);
            output.WriteDouble(Cutoff);
          }
          if (HasKaiserBeta) {
            output.WriteRawTag(25);
            output.WriteDouble(KaiserBeta);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasRadius) {
            size += 1 + 8;
          }
          if (HasCutoff) {
            size += 1 + 8;
          }
          if (HasKaiserBeta) {
            size += 1 + 8;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(ResamplerRationalFactorOptions other) {
          if (other == null) {
            return;
          }
          if (other.HasRadius) {
            Radius = other.Radius;
          }
          if (other.HasCutoff) {
            Cutoff = other.Cutoff;
          }
          if (other.HasKaiserBeta) {
            KaiserBeta = other.KaiserBeta;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 9: {
                Radius = input.ReadDouble();
                break;
              }
              case 17: {
                Cutoff = input.ReadDouble();
                break;
              }
              case 25: {
                KaiserBeta = input.ReadDouble();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 9: {
                Radius = input.ReadDouble();
                break;
              }
              case 17: {
                Cutoff = input.ReadDouble();
                break;
              }
              case 25: {
                KaiserBeta = input.ReadDouble();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

    #region Extensions
    /// <summary>Container for extensions for other messages declared in the RationalFactorResampleCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Extensions {
      public static readonly pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.RationalFactorResampleCalculatorOptions> Ext =
        new pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.RationalFactorResampleCalculatorOptions>(259760074, pb::FieldCodec.ForMessage(2078080594, global::Mediapipe.RationalFactorResampleCalculatorOptions.Parser));
    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
