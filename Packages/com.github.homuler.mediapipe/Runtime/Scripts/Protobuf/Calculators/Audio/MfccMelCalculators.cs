// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/calculators/audio/mfcc_mel_calculators.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/calculators/audio/mfcc_mel_calculators.proto</summary>
  public static partial class MfccMelCalculatorsReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/calculators/audio/mfcc_mel_calculators.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MfccMelCalculatorsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjZtZWRpYXBpcGUvY2FsY3VsYXRvcnMvYXVkaW8vbWZjY19tZWxfY2FsY3Vs",
            "YXRvcnMucHJvdG8SCW1lZGlhcGlwZRokbWVkaWFwaXBlL2ZyYW1ld29yay9j",
            "YWxjdWxhdG9yLnByb3RvItUBChxNZWxTcGVjdHJ1bUNhbGN1bGF0b3JPcHRp",
            "b25zEhkKDWNoYW5uZWxfY291bnQYASABKAU6AjIwEiAKE21pbl9mcmVxdWVu",
            "Y3lfaGVydHoYAiABKAI6AzEyNRIhChNtYXhfZnJlcXVlbmN5X2hlcnR6GAMg",
            "ASgCOgQzODAwMlUKA2V4dBIcLm1lZGlhcGlwZS5DYWxjdWxhdG9yT3B0aW9u",
            "cxi0oLwlIAEoCzInLm1lZGlhcGlwZS5NZWxTcGVjdHJ1bUNhbGN1bGF0b3JP",
            "cHRpb25zIsUBChVNZmNjQ2FsY3VsYXRvck9wdGlvbnMSRAoTbWVsX3NwZWN0",
            "cnVtX3BhcmFtcxgBIAEoCzInLm1lZGlhcGlwZS5NZWxTcGVjdHJ1bUNhbGN1",
            "bGF0b3JPcHRpb25zEhYKCm1mY2NfY291bnQYAiABKA06AjEzMk4KA2V4dBIc",
            "Lm1lZGlhcGlwZS5DYWxjdWxhdG9yT3B0aW9ucxiJnrQlIAEoCzIgLm1lZGlh",
            "cGlwZS5NZmNjQ2FsY3VsYXRvck9wdGlvbnM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mediapipe.CalculatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.MelSpectrumCalculatorOptions), global::Mediapipe.MelSpectrumCalculatorOptions.Parser, new[]{ "ChannelCount", "MinFrequencyHertz", "MaxFrequencyHertz" }, null, null, new pb::Extension[] { global::Mediapipe.MelSpectrumCalculatorOptions.Extensions.Ext }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.MfccCalculatorOptions), global::Mediapipe.MfccCalculatorOptions.Parser, new[]{ "MelSpectrumParams", "MfccCount" }, null, null, new pb::Extension[] { global::Mediapipe.MfccCalculatorOptions.Extensions.Ext }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MelSpectrumCalculatorOptions : pb::IMessage<MelSpectrumCalculatorOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MelSpectrumCalculatorOptions> _parser = new pb::MessageParser<MelSpectrumCalculatorOptions>(() => new MelSpectrumCalculatorOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MelSpectrumCalculatorOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.MfccMelCalculatorsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MelSpectrumCalculatorOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MelSpectrumCalculatorOptions(MelSpectrumCalculatorOptions other) : this() {
      _hasBits0 = other._hasBits0;
      channelCount_ = other.channelCount_;
      minFrequencyHertz_ = other.minFrequencyHertz_;
      maxFrequencyHertz_ = other.maxFrequencyHertz_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MelSpectrumCalculatorOptions Clone() {
      return new MelSpectrumCalculatorOptions(this);
    }

    /// <summary>Field number for the "channel_count" field.</summary>
    public const int ChannelCountFieldNumber = 1;
    private readonly static int ChannelCountDefaultValue = 20;

    private int channelCount_;
    /// <summary>
    /// Total number of frequency bands to use.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ChannelCount {
      get { if ((_hasBits0 & 1) != 0) { return channelCount_; } else { return ChannelCountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        channelCount_ = value;
      }
    }
    /// <summary>Gets whether the "channel_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasChannelCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "channel_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearChannelCount() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "min_frequency_hertz" field.</summary>
    public const int MinFrequencyHertzFieldNumber = 2;
    private readonly static float MinFrequencyHertzDefaultValue = 125F;

    private float minFrequencyHertz_;
    /// <summary>
    /// Lower edge of lowest triangular Mel band.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinFrequencyHertz {
      get { if ((_hasBits0 & 2) != 0) { return minFrequencyHertz_; } else { return MinFrequencyHertzDefaultValue; } }
      set {
        _hasBits0 |= 2;
        minFrequencyHertz_ = value;
      }
    }
    /// <summary>Gets whether the "min_frequency_hertz" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinFrequencyHertz {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "min_frequency_hertz" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinFrequencyHertz() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "max_frequency_hertz" field.</summary>
    public const int MaxFrequencyHertzFieldNumber = 3;
    private readonly static float MaxFrequencyHertzDefaultValue = 3800F;

    private float maxFrequencyHertz_;
    /// <summary>
    /// Upper edge of highest triangular Mel band.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MaxFrequencyHertz {
      get { if ((_hasBits0 & 4) != 0) { return maxFrequencyHertz_; } else { return MaxFrequencyHertzDefaultValue; } }
      set {
        _hasBits0 |= 4;
        maxFrequencyHertz_ = value;
      }
    }
    /// <summary>Gets whether the "max_frequency_hertz" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxFrequencyHertz {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "max_frequency_hertz" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxFrequencyHertz() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MelSpectrumCalculatorOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MelSpectrumCalculatorOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelCount != other.ChannelCount) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinFrequencyHertz, other.MinFrequencyHertz)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxFrequencyHertz, other.MaxFrequencyHertz)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasChannelCount) hash ^= ChannelCount.GetHashCode();
      if (HasMinFrequencyHertz) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinFrequencyHertz);
      if (HasMaxFrequencyHertz) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxFrequencyHertz);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasChannelCount) {
        output.WriteRawTag(8);
        output.WriteInt32(ChannelCount);
      }
      if (HasMinFrequencyHertz) {
        output.WriteRawTag(21);
        output.WriteFloat(MinFrequencyHertz);
      }
      if (HasMaxFrequencyHertz) {
        output.WriteRawTag(29);
        output.WriteFloat(MaxFrequencyHertz);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasChannelCount) {
        output.WriteRawTag(8);
        output.WriteInt32(ChannelCount);
      }
      if (HasMinFrequencyHertz) {
        output.WriteRawTag(21);
        output.WriteFloat(MinFrequencyHertz);
      }
      if (HasMaxFrequencyHertz) {
        output.WriteRawTag(29);
        output.WriteFloat(MaxFrequencyHertz);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasChannelCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChannelCount);
      }
      if (HasMinFrequencyHertz) {
        size += 1 + 4;
      }
      if (HasMaxFrequencyHertz) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MelSpectrumCalculatorOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasChannelCount) {
        ChannelCount = other.ChannelCount;
      }
      if (other.HasMinFrequencyHertz) {
        MinFrequencyHertz = other.MinFrequencyHertz;
      }
      if (other.HasMaxFrequencyHertz) {
        MaxFrequencyHertz = other.MaxFrequencyHertz;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChannelCount = input.ReadInt32();
            break;
          }
          case 21: {
            MinFrequencyHertz = input.ReadFloat();
            break;
          }
          case 29: {
            MaxFrequencyHertz = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ChannelCount = input.ReadInt32();
            break;
          }
          case 21: {
            MinFrequencyHertz = input.ReadFloat();
            break;
          }
          case 29: {
            MaxFrequencyHertz = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

    #region Extensions
    /// <summary>Container for extensions for other messages declared in the MelSpectrumCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Extensions {
      public static readonly pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.MelSpectrumCalculatorOptions> Ext =
        new pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.MelSpectrumCalculatorOptions>(78581812, pb::FieldCodec.ForMessage(628654498, global::Mediapipe.MelSpectrumCalculatorOptions.Parser));
    }
    #endregion

  }

  public sealed partial class MfccCalculatorOptions : pb::IMessage<MfccCalculatorOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MfccCalculatorOptions> _parser = new pb::MessageParser<MfccCalculatorOptions>(() => new MfccCalculatorOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MfccCalculatorOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.MfccMelCalculatorsReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MfccCalculatorOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MfccCalculatorOptions(MfccCalculatorOptions other) : this() {
      _hasBits0 = other._hasBits0;
      melSpectrumParams_ = other.melSpectrumParams_ != null ? other.melSpectrumParams_.Clone() : null;
      mfccCount_ = other.mfccCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MfccCalculatorOptions Clone() {
      return new MfccCalculatorOptions(this);
    }

    /// <summary>Field number for the "mel_spectrum_params" field.</summary>
    public const int MelSpectrumParamsFieldNumber = 1;
    private global::Mediapipe.MelSpectrumCalculatorOptions melSpectrumParams_;
    /// <summary>
    /// Specification of the underlying mel filterbank.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.MelSpectrumCalculatorOptions MelSpectrumParams {
      get { return melSpectrumParams_; }
      set {
        melSpectrumParams_ = value;
      }
    }

    /// <summary>Field number for the "mfcc_count" field.</summary>
    public const int MfccCountFieldNumber = 2;
    private readonly static uint MfccCountDefaultValue = 13;

    private uint mfccCount_;
    /// <summary>
    /// How many MFCC coefficients to emit.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MfccCount {
      get { if ((_hasBits0 & 1) != 0) { return mfccCount_; } else { return MfccCountDefaultValue; } }
      set {
        _hasBits0 |= 1;
        mfccCount_ = value;
      }
    }
    /// <summary>Gets whether the "mfcc_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMfccCount {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "mfcc_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMfccCount() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MfccCalculatorOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MfccCalculatorOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(MelSpectrumParams, other.MelSpectrumParams)) return false;
      if (MfccCount != other.MfccCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (melSpectrumParams_ != null) hash ^= MelSpectrumParams.GetHashCode();
      if (HasMfccCount) hash ^= MfccCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (melSpectrumParams_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MelSpectrumParams);
      }
      if (HasMfccCount) {
        output.WriteRawTag(16);
        output.WriteUInt32(MfccCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (melSpectrumParams_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MelSpectrumParams);
      }
      if (HasMfccCount) {
        output.WriteRawTag(16);
        output.WriteUInt32(MfccCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (melSpectrumParams_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MelSpectrumParams);
      }
      if (HasMfccCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(MfccCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MfccCalculatorOptions other) {
      if (other == null) {
        return;
      }
      if (other.melSpectrumParams_ != null) {
        if (melSpectrumParams_ == null) {
          MelSpectrumParams = new global::Mediapipe.MelSpectrumCalculatorOptions();
        }
        MelSpectrumParams.MergeFrom(other.MelSpectrumParams);
      }
      if (other.HasMfccCount) {
        MfccCount = other.MfccCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (melSpectrumParams_ == null) {
              MelSpectrumParams = new global::Mediapipe.MelSpectrumCalculatorOptions();
            }
            input.ReadMessage(MelSpectrumParams);
            break;
          }
          case 16: {
            MfccCount = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (melSpectrumParams_ == null) {
              MelSpectrumParams = new global::Mediapipe.MelSpectrumCalculatorOptions();
            }
            input.ReadMessage(MelSpectrumParams);
            break;
          }
          case 16: {
            MfccCount = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Extensions
    /// <summary>Container for extensions for other messages declared in the MfccCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Extensions {
      public static readonly pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.MfccCalculatorOptions> Ext =
        new pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.MfccCalculatorOptions>(78450441, pb::FieldCodec.ForMessage(627603530, global::Mediapipe.MfccCalculatorOptions.Parser));
    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
