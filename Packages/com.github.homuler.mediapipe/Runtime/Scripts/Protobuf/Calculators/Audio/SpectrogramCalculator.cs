// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/calculators/audio/spectrogram_calculator.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/calculators/audio/spectrogram_calculator.proto</summary>
  public static partial class SpectrogramCalculatorReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/calculators/audio/spectrogram_calculator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static SpectrogramCalculatorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjhtZWRpYXBpcGUvY2FsY3VsYXRvcnMvYXVkaW8vc3BlY3Ryb2dyYW1fY2Fs",
            "Y3VsYXRvci5wcm90bxIJbWVkaWFwaXBlGiRtZWRpYXBpcGUvZnJhbWV3b3Jr",
            "L2NhbGN1bGF0b3IucHJvdG8isAYKHFNwZWN0cm9ncmFtQ2FsY3VsYXRvck9w",
            "dGlvbnMSHgoWZnJhbWVfZHVyYXRpb25fc2Vjb25kcxgBIAEoARIgChVmcmFt",
            "ZV9vdmVybGFwX3NlY29uZHMYAiABKAE6ATASHgoQcGFkX2ZpbmFsX3BhY2tl",
            "dBgDIAEoCDoEdHJ1ZRJaCgtvdXRwdXRfdHlwZRgEIAEoDjIyLm1lZGlhcGlw",
            "ZS5TcGVjdHJvZ3JhbUNhbGN1bGF0b3JPcHRpb25zLk91dHB1dFR5cGU6EVNR",
            "VUFSRURfTUFHTklUVURFEicKGGFsbG93X211bHRpY2hhbm5lbF9pbnB1dBgF",
            "IAEoCDoFZmFsc2USTQoLd2luZG93X3R5cGUYBiABKA4yMi5tZWRpYXBpcGUu",
            "U3BlY3Ryb2dyYW1DYWxjdWxhdG9yT3B0aW9ucy5XaW5kb3dUeXBlOgRIQU5O",
            "EhcKDG91dHB1dF9zY2FsZRgHIAEoAToBMRIiChN1c2VfbG9jYWxfdGltZXN0",
            "YW1wGAggASgIOgVmYWxzZRITCghmZnRfc2l6ZRgJIAEoBToBMBIWCgtpbnB1",
            "dF9zY2FsZRgKIAEoAjoBMRJaChJzYW1wbGVfYnVmZmVyX21vZGUYCyABKA4y",
            "OC5tZWRpYXBpcGUuU3BlY3Ryb2dyYW1DYWxjdWxhdG9yT3B0aW9ucy5TYW1w",
            "bGVCdWZmZXJNb2RlOgROT05FIlQKCk91dHB1dFR5cGUSFQoRU1FVQVJFRF9N",
            "QUdOSVRVREUQABIUChBMSU5FQVJfTUFHTklUVURFEAESDAoIREVDSUJFTFMQ",
            "AhILCgdDT01QTEVYEAMiPgoKV2luZG93VHlwZRIICgRIQU5OEAASCwoHSEFN",
            "TUlORxABEgoKBkNPU0lORRACEg0KCVNRUlRfSEFOThAEIicKEFNhbXBsZUJ1",
            "ZmZlck1vZGUSCAoETk9ORRAAEgkKBVJFU0VUEAEyVQoDZXh0EhwubWVkaWFw",
            "aXBlLkNhbGN1bGF0b3JPcHRpb25zGMCIqiQgASgLMicubWVkaWFwaXBlLlNw",
            "ZWN0cm9ncmFtQ2FsY3VsYXRvck9wdGlvbnM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mediapipe.CalculatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.SpectrogramCalculatorOptions), global::Mediapipe.SpectrogramCalculatorOptions.Parser, new[]{ "FrameDurationSeconds", "FrameOverlapSeconds", "PadFinalPacket", "OutputType", "AllowMultichannelInput", "WindowType", "OutputScale", "UseLocalTimestamp", "FftSize", "InputScale", "SampleBufferMode" }, null, new[]{ typeof(global::Mediapipe.SpectrogramCalculatorOptions.Types.OutputType), typeof(global::Mediapipe.SpectrogramCalculatorOptions.Types.WindowType), typeof(global::Mediapipe.SpectrogramCalculatorOptions.Types.SampleBufferMode) }, new pb::Extension[] { global::Mediapipe.SpectrogramCalculatorOptions.Extensions.Ext }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class SpectrogramCalculatorOptions : pb::IMessage<SpectrogramCalculatorOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpectrogramCalculatorOptions> _parser = new pb::MessageParser<SpectrogramCalculatorOptions>(() => new SpectrogramCalculatorOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SpectrogramCalculatorOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.SpectrogramCalculatorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpectrogramCalculatorOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpectrogramCalculatorOptions(SpectrogramCalculatorOptions other) : this() {
      _hasBits0 = other._hasBits0;
      frameDurationSeconds_ = other.frameDurationSeconds_;
      frameOverlapSeconds_ = other.frameOverlapSeconds_;
      padFinalPacket_ = other.padFinalPacket_;
      outputType_ = other.outputType_;
      allowMultichannelInput_ = other.allowMultichannelInput_;
      windowType_ = other.windowType_;
      outputScale_ = other.outputScale_;
      useLocalTimestamp_ = other.useLocalTimestamp_;
      fftSize_ = other.fftSize_;
      inputScale_ = other.inputScale_;
      sampleBufferMode_ = other.sampleBufferMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SpectrogramCalculatorOptions Clone() {
      return new SpectrogramCalculatorOptions(this);
    }

    /// <summary>Field number for the "frame_duration_seconds" field.</summary>
    public const int FrameDurationSecondsFieldNumber = 1;
    private readonly static double FrameDurationSecondsDefaultValue = 0D;

    private double frameDurationSeconds_;
    /// <summary>
    /// Analysis window duration in seconds.  Required.  Must be greater than 0.
    /// (Note: the spectrogram DFT length will be the smallest power-of-2
    /// sample count that can hold this duration.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FrameDurationSeconds {
      get { if ((_hasBits0 & 1) != 0) { return frameDurationSeconds_; } else { return FrameDurationSecondsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        frameDurationSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "frame_duration_seconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFrameDurationSeconds {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "frame_duration_seconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFrameDurationSeconds() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "frame_overlap_seconds" field.</summary>
    public const int FrameOverlapSecondsFieldNumber = 2;
    private readonly static double FrameOverlapSecondsDefaultValue = 0D;

    private double frameOverlapSeconds_;
    /// <summary>
    /// Duration of overlap between adjacent windows.
    /// Hence, frame_rate = 1/(frame_duration_seconds - frame_overlap_seconds).
    /// Note the frame_rate here is not the MediaPipe packet rate, the frame here
    /// means each Fourier transform analysis waveform frame, the output MediaPipe
    /// packet rate will the the same as input, if frame rate is lower than input
    /// packet rate, will result in intermittent empty output packets. Required
    /// that 0 &lt;= frame_overlap_seconds &lt;  frame_duration_seconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double FrameOverlapSeconds {
      get { if ((_hasBits0 & 2) != 0) { return frameOverlapSeconds_; } else { return FrameOverlapSecondsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        frameOverlapSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "frame_overlap_seconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFrameOverlapSeconds {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "frame_overlap_seconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFrameOverlapSeconds() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "pad_final_packet" field.</summary>
    public const int PadFinalPacketFieldNumber = 3;
    private readonly static bool PadFinalPacketDefaultValue = true;

    private bool padFinalPacket_;
    /// <summary>
    /// Whether to pad the final packet with zeros.  If true, guarantees that
    /// all input samples will output.  If set to false, any partial packet
    /// at the end of the stream will be dropped.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PadFinalPacket {
      get { if ((_hasBits0 & 4) != 0) { return padFinalPacket_; } else { return PadFinalPacketDefaultValue; } }
      set {
        _hasBits0 |= 4;
        padFinalPacket_ = value;
      }
    }
    /// <summary>Gets whether the "pad_final_packet" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPadFinalPacket {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "pad_final_packet" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPadFinalPacket() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "output_type" field.</summary>
    public const int OutputTypeFieldNumber = 4;
    private readonly static global::Mediapipe.SpectrogramCalculatorOptions.Types.OutputType OutputTypeDefaultValue = global::Mediapipe.SpectrogramCalculatorOptions.Types.OutputType.SquaredMagnitude;

    private global::Mediapipe.SpectrogramCalculatorOptions.Types.OutputType outputType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.SpectrogramCalculatorOptions.Types.OutputType OutputType {
      get { if ((_hasBits0 & 8) != 0) { return outputType_; } else { return OutputTypeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        outputType_ = value;
      }
    }
    /// <summary>Gets whether the "output_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOutputType {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "output_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOutputType() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "allow_multichannel_input" field.</summary>
    public const int AllowMultichannelInputFieldNumber = 5;
    private readonly static bool AllowMultichannelInputDefaultValue = false;

    private bool allowMultichannelInput_;
    /// <summary>
    /// If set to true then the output will be a vector of spectrograms, one for
    /// each channel and the stream will have a MultiStreamTimeSeriesHeader.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AllowMultichannelInput {
      get { if ((_hasBits0 & 16) != 0) { return allowMultichannelInput_; } else { return AllowMultichannelInputDefaultValue; } }
      set {
        _hasBits0 |= 16;
        allowMultichannelInput_ = value;
      }
    }
    /// <summary>Gets whether the "allow_multichannel_input" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAllowMultichannelInput {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "allow_multichannel_input" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAllowMultichannelInput() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "window_type" field.</summary>
    public const int WindowTypeFieldNumber = 6;
    private readonly static global::Mediapipe.SpectrogramCalculatorOptions.Types.WindowType WindowTypeDefaultValue = global::Mediapipe.SpectrogramCalculatorOptions.Types.WindowType.Hann;

    private global::Mediapipe.SpectrogramCalculatorOptions.Types.WindowType windowType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.SpectrogramCalculatorOptions.Types.WindowType WindowType {
      get { if ((_hasBits0 & 32) != 0) { return windowType_; } else { return WindowTypeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        windowType_ = value;
      }
    }
    /// <summary>Gets whether the "window_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWindowType {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "window_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWindowType() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "output_scale" field.</summary>
    public const int OutputScaleFieldNumber = 7;
    private readonly static double OutputScaleDefaultValue = 1D;

    private double outputScale_;
    /// <summary>
    /// Support a fixed multiplicative scaling of the output.  This is applied
    /// uniformly regardless of output type (i.e., even dBs are multiplied, not
    /// offset).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OutputScale {
      get { if ((_hasBits0 & 64) != 0) { return outputScale_; } else { return OutputScaleDefaultValue; } }
      set {
        _hasBits0 |= 64;
        outputScale_ = value;
      }
    }
    /// <summary>Gets whether the "output_scale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOutputScale {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "output_scale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOutputScale() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "use_local_timestamp" field.</summary>
    public const int UseLocalTimestampFieldNumber = 8;
    private readonly static bool UseLocalTimestampDefaultValue = false;

    private bool useLocalTimestamp_;
    /// <summary>
    /// If use_local_timestamp is true, the output packet's timestamp is based on
    /// the last sample of the packet and it's inferred from the latest input
    /// packet's timestamp.  If false, the output packet's timestamp is based on
    /// the cumulative timestamping, which is inferred from the initial input
    /// timestamp and the cumulative number of samples.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UseLocalTimestamp {
      get { if ((_hasBits0 & 128) != 0) { return useLocalTimestamp_; } else { return UseLocalTimestampDefaultValue; } }
      set {
        _hasBits0 |= 128;
        useLocalTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "use_local_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUseLocalTimestamp {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "use_local_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUseLocalTimestamp() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "fft_size" field.</summary>
    public const int FftSizeFieldNumber = 9;
    private readonly static int FftSizeDefaultValue = 0;

    private int fftSize_;
    /// <summary>
    /// Defines a fixed FFT size. If set to 0, the FFT size will be determined
    /// based on the frame duration and sample rate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FftSize {
      get { if ((_hasBits0 & 256) != 0) { return fftSize_; } else { return FftSizeDefaultValue; } }
      set {
        _hasBits0 |= 256;
        fftSize_ = value;
      }
    }
    /// <summary>Gets whether the "fft_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFftSize {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "fft_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFftSize() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "input_scale" field.</summary>
    public const int InputScaleFieldNumber = 10;
    private readonly static float InputScaleDefaultValue = 1F;

    private float inputScale_;
    /// <summary>
    /// Support a fixed multiplicative scaling of the input.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float InputScale {
      get { if ((_hasBits0 & 512) != 0) { return inputScale_; } else { return InputScaleDefaultValue; } }
      set {
        _hasBits0 |= 512;
        inputScale_ = value;
      }
    }
    /// <summary>Gets whether the "input_scale" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInputScale {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "input_scale" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInputScale() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "sample_buffer_mode" field.</summary>
    public const int SampleBufferModeFieldNumber = 11;
    private readonly static global::Mediapipe.SpectrogramCalculatorOptions.Types.SampleBufferMode SampleBufferModeDefaultValue = global::Mediapipe.SpectrogramCalculatorOptions.Types.SampleBufferMode.None;

    private global::Mediapipe.SpectrogramCalculatorOptions.Types.SampleBufferMode sampleBufferMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.SpectrogramCalculatorOptions.Types.SampleBufferMode SampleBufferMode {
      get { if ((_hasBits0 & 1024) != 0) { return sampleBufferMode_; } else { return SampleBufferModeDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        sampleBufferMode_ = value;
      }
    }
    /// <summary>Gets whether the "sample_buffer_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSampleBufferMode {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "sample_buffer_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSampleBufferMode() {
      _hasBits0 &= ~1024;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SpectrogramCalculatorOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SpectrogramCalculatorOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FrameDurationSeconds, other.FrameDurationSeconds)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(FrameOverlapSeconds, other.FrameOverlapSeconds)) return false;
      if (PadFinalPacket != other.PadFinalPacket) return false;
      if (OutputType != other.OutputType) return false;
      if (AllowMultichannelInput != other.AllowMultichannelInput) return false;
      if (WindowType != other.WindowType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OutputScale, other.OutputScale)) return false;
      if (UseLocalTimestamp != other.UseLocalTimestamp) return false;
      if (FftSize != other.FftSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InputScale, other.InputScale)) return false;
      if (SampleBufferMode != other.SampleBufferMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFrameDurationSeconds) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FrameDurationSeconds);
      if (HasFrameOverlapSeconds) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(FrameOverlapSeconds);
      if (HasPadFinalPacket) hash ^= PadFinalPacket.GetHashCode();
      if (HasOutputType) hash ^= OutputType.GetHashCode();
      if (HasAllowMultichannelInput) hash ^= AllowMultichannelInput.GetHashCode();
      if (HasWindowType) hash ^= WindowType.GetHashCode();
      if (HasOutputScale) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OutputScale);
      if (HasUseLocalTimestamp) hash ^= UseLocalTimestamp.GetHashCode();
      if (HasFftSize) hash ^= FftSize.GetHashCode();
      if (HasInputScale) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InputScale);
      if (HasSampleBufferMode) hash ^= SampleBufferMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFrameDurationSeconds) {
        output.WriteRawTag(9);
        output.WriteDouble(FrameDurationSeconds);
      }
      if (HasFrameOverlapSeconds) {
        output.WriteRawTag(17);
        output.WriteDouble(FrameOverlapSeconds);
      }
      if (HasPadFinalPacket) {
        output.WriteRawTag(24);
        output.WriteBool(PadFinalPacket);
      }
      if (HasOutputType) {
        output.WriteRawTag(32);
        output.WriteEnum((int) OutputType);
      }
      if (HasAllowMultichannelInput) {
        output.WriteRawTag(40);
        output.WriteBool(AllowMultichannelInput);
      }
      if (HasWindowType) {
        output.WriteRawTag(48);
        output.WriteEnum((int) WindowType);
      }
      if (HasOutputScale) {
        output.WriteRawTag(57);
        output.WriteDouble(OutputScale);
      }
      if (HasUseLocalTimestamp) {
        output.WriteRawTag(64);
        output.WriteBool(UseLocalTimestamp);
      }
      if (HasFftSize) {
        output.WriteRawTag(72);
        output.WriteInt32(FftSize);
      }
      if (HasInputScale) {
        output.WriteRawTag(85);
        output.WriteFloat(InputScale);
      }
      if (HasSampleBufferMode) {
        output.WriteRawTag(88);
        output.WriteEnum((int) SampleBufferMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFrameDurationSeconds) {
        output.WriteRawTag(9);
        output.WriteDouble(FrameDurationSeconds);
      }
      if (HasFrameOverlapSeconds) {
        output.WriteRawTag(17);
        output.WriteDouble(FrameOverlapSeconds);
      }
      if (HasPadFinalPacket) {
        output.WriteRawTag(24);
        output.WriteBool(PadFinalPacket);
      }
      if (HasOutputType) {
        output.WriteRawTag(32);
        output.WriteEnum((int) OutputType);
      }
      if (HasAllowMultichannelInput) {
        output.WriteRawTag(40);
        output.WriteBool(AllowMultichannelInput);
      }
      if (HasWindowType) {
        output.WriteRawTag(48);
        output.WriteEnum((int) WindowType);
      }
      if (HasOutputScale) {
        output.WriteRawTag(57);
        output.WriteDouble(OutputScale);
      }
      if (HasUseLocalTimestamp) {
        output.WriteRawTag(64);
        output.WriteBool(UseLocalTimestamp);
      }
      if (HasFftSize) {
        output.WriteRawTag(72);
        output.WriteInt32(FftSize);
      }
      if (HasInputScale) {
        output.WriteRawTag(85);
        output.WriteFloat(InputScale);
      }
      if (HasSampleBufferMode) {
        output.WriteRawTag(88);
        output.WriteEnum((int) SampleBufferMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasFrameDurationSeconds) {
        size += 1 + 8;
      }
      if (HasFrameOverlapSeconds) {
        size += 1 + 8;
      }
      if (HasPadFinalPacket) {
        size += 1 + 1;
      }
      if (HasOutputType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OutputType);
      }
      if (HasAllowMultichannelInput) {
        size += 1 + 1;
      }
      if (HasWindowType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) WindowType);
      }
      if (HasOutputScale) {
        size += 1 + 8;
      }
      if (HasUseLocalTimestamp) {
        size += 1 + 1;
      }
      if (HasFftSize) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FftSize);
      }
      if (HasInputScale) {
        size += 1 + 4;
      }
      if (HasSampleBufferMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SampleBufferMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SpectrogramCalculatorOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasFrameDurationSeconds) {
        FrameDurationSeconds = other.FrameDurationSeconds;
      }
      if (other.HasFrameOverlapSeconds) {
        FrameOverlapSeconds = other.FrameOverlapSeconds;
      }
      if (other.HasPadFinalPacket) {
        PadFinalPacket = other.PadFinalPacket;
      }
      if (other.HasOutputType) {
        OutputType = other.OutputType;
      }
      if (other.HasAllowMultichannelInput) {
        AllowMultichannelInput = other.AllowMultichannelInput;
      }
      if (other.HasWindowType) {
        WindowType = other.WindowType;
      }
      if (other.HasOutputScale) {
        OutputScale = other.OutputScale;
      }
      if (other.HasUseLocalTimestamp) {
        UseLocalTimestamp = other.UseLocalTimestamp;
      }
      if (other.HasFftSize) {
        FftSize = other.FftSize;
      }
      if (other.HasInputScale) {
        InputScale = other.InputScale;
      }
      if (other.HasSampleBufferMode) {
        SampleBufferMode = other.SampleBufferMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            FrameDurationSeconds = input.ReadDouble();
            break;
          }
          case 17: {
            FrameOverlapSeconds = input.ReadDouble();
            break;
          }
          case 24: {
            PadFinalPacket = input.ReadBool();
            break;
          }
          case 32: {
            OutputType = (global::Mediapipe.SpectrogramCalculatorOptions.Types.OutputType) input.ReadEnum();
            break;
          }
          case 40: {
            AllowMultichannelInput = input.ReadBool();
            break;
          }
          case 48: {
            WindowType = (global::Mediapipe.SpectrogramCalculatorOptions.Types.WindowType) input.ReadEnum();
            break;
          }
          case 57: {
            OutputScale = input.ReadDouble();
            break;
          }
          case 64: {
            UseLocalTimestamp = input.ReadBool();
            break;
          }
          case 72: {
            FftSize = input.ReadInt32();
            break;
          }
          case 85: {
            InputScale = input.ReadFloat();
            break;
          }
          case 88: {
            SampleBufferMode = (global::Mediapipe.SpectrogramCalculatorOptions.Types.SampleBufferMode) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            FrameDurationSeconds = input.ReadDouble();
            break;
          }
          case 17: {
            FrameOverlapSeconds = input.ReadDouble();
            break;
          }
          case 24: {
            PadFinalPacket = input.ReadBool();
            break;
          }
          case 32: {
            OutputType = (global::Mediapipe.SpectrogramCalculatorOptions.Types.OutputType) input.ReadEnum();
            break;
          }
          case 40: {
            AllowMultichannelInput = input.ReadBool();
            break;
          }
          case 48: {
            WindowType = (global::Mediapipe.SpectrogramCalculatorOptions.Types.WindowType) input.ReadEnum();
            break;
          }
          case 57: {
            OutputScale = input.ReadDouble();
            break;
          }
          case 64: {
            UseLocalTimestamp = input.ReadBool();
            break;
          }
          case 72: {
            FftSize = input.ReadInt32();
            break;
          }
          case 85: {
            InputScale = input.ReadFloat();
            break;
          }
          case 88: {
            SampleBufferMode = (global::Mediapipe.SpectrogramCalculatorOptions.Types.SampleBufferMode) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SpectrogramCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Output value type can be squared-magnitude, linear-magnitude,
      /// deciBels (dB, = 20*log10(linear_magnitude)), or std::complex.
      /// Their relationship:
      /// COMPLEX c = Re + Im*i;
      /// SQUARED_MAGNITUDE = Re^2 + Im^2;
      /// LINEAR_MAGNITUDE = sqrt(SQUARED_MAGNITUDE);
      /// DECIBELS = 20*log10(LINEAR_MAGNITUDE) = 10*log10(SQUARED_MAGNITUDE);
      /// </summary>
      public enum OutputType {
        [pbr::OriginalName("SQUARED_MAGNITUDE")] SquaredMagnitude = 0,
        [pbr::OriginalName("LINEAR_MAGNITUDE")] LinearMagnitude = 1,
        [pbr::OriginalName("DECIBELS")] Decibels = 2,
        [pbr::OriginalName("COMPLEX")] Complex = 3,
      }

      /// <summary>
      /// Which window to use when computing the FFT.
      /// </summary>
      public enum WindowType {
        [pbr::OriginalName("HANN")] Hann = 0,
        [pbr::OriginalName("HAMMING")] Hamming = 1,
        [pbr::OriginalName("COSINE")] Cosine = 2,
        /// <summary>
        /// Alias of COSINE.
        /// </summary>
        [pbr::OriginalName("SQRT_HANN")] SqrtHann = 4,
      }

      /// <summary>
      /// The SpectogramCalculator buffers incoming time domain signal to slice it up
      /// into chunks of frame_duration_seconds. This parameter controls how to treat
      /// leftover samples at the end of the signal that were not able to form a full
      /// chunk.
      /// </summary>
      public enum SampleBufferMode {
        /// <summary>
        /// Leftover samples from previous call are buffered and used for the next
        /// call.
        /// </summary>
        [pbr::OriginalName("NONE")] None = 0,
        /// <summary>
        /// Leftover samples from previous call are discarded, i.e. every new signal
        /// is processed independently.
        /// </summary>
        [pbr::OriginalName("RESET")] Reset = 1,
      }

    }
    #endregion

    #region Extensions
    /// <summary>Container for extensions for other messages declared in the SpectrogramCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Extensions {
      public static readonly pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.SpectrogramCalculatorOptions> Ext =
        new pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.SpectrogramCalculatorOptions>(76186688, pb::FieldCodec.ForMessage(609493506, global::Mediapipe.SpectrogramCalculatorOptions.Parser));
    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
