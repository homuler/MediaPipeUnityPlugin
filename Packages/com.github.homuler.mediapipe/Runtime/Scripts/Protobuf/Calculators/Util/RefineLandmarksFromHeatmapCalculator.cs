// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/calculators/util/refine_landmarks_from_heatmap_calculator.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/calculators/util/refine_landmarks_from_heatmap_calculator.proto</summary>
  public static partial class RefineLandmarksFromHeatmapCalculatorReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/calculators/util/refine_landmarks_from_heatmap_calculator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RefineLandmarksFromHeatmapCalculatorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CkltZWRpYXBpcGUvY2FsY3VsYXRvcnMvdXRpbC9yZWZpbmVfbGFuZG1hcmtz",
            "X2Zyb21faGVhdG1hcF9jYWxjdWxhdG9yLnByb3RvEgltZWRpYXBpcGUaJG1l",
            "ZGlhcGlwZS9mcmFtZXdvcmsvY2FsY3VsYXRvci5wcm90byKVAgorUmVmaW5l",
            "TGFuZG1hcmtzRnJvbUhlYXRtYXBDYWxjdWxhdG9yT3B0aW9ucxIWCgtrZXJu",
            "ZWxfc2l6ZRgBIAEoBToBORIlChhtaW5fY29uZmlkZW5jZV90b19yZWZpbmUY",
            "AiABKAI6AzAuNRIeCg9yZWZpbmVfcHJlc2VuY2UYAyABKAg6BWZhbHNlEiAK",
            "EXJlZmluZV92aXNpYmlsaXR5GAQgASgIOgVmYWxzZTJlCgNleHQSHC5tZWRp",
            "YXBpcGUuQ2FsY3VsYXRvck9wdGlvbnMYtfXfrAEgASgLMjYubWVkaWFwaXBl",
            "LlJlZmluZUxhbmRtYXJrc0Zyb21IZWF0bWFwQ2FsY3VsYXRvck9wdGlvbnM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mediapipe.CalculatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.RefineLandmarksFromHeatmapCalculatorOptions), global::Mediapipe.RefineLandmarksFromHeatmapCalculatorOptions.Parser, new[]{ "KernelSize", "MinConfidenceToRefine", "RefinePresence", "RefineVisibility" }, null, null, new pb::Extension[] { global::Mediapipe.RefineLandmarksFromHeatmapCalculatorOptions.Extensions.Ext }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RefineLandmarksFromHeatmapCalculatorOptions : pb::IMessage<RefineLandmarksFromHeatmapCalculatorOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RefineLandmarksFromHeatmapCalculatorOptions> _parser = new pb::MessageParser<RefineLandmarksFromHeatmapCalculatorOptions>(() => new RefineLandmarksFromHeatmapCalculatorOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RefineLandmarksFromHeatmapCalculatorOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.RefineLandmarksFromHeatmapCalculatorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RefineLandmarksFromHeatmapCalculatorOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RefineLandmarksFromHeatmapCalculatorOptions(RefineLandmarksFromHeatmapCalculatorOptions other) : this() {
      _hasBits0 = other._hasBits0;
      kernelSize_ = other.kernelSize_;
      minConfidenceToRefine_ = other.minConfidenceToRefine_;
      refinePresence_ = other.refinePresence_;
      refineVisibility_ = other.refineVisibility_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RefineLandmarksFromHeatmapCalculatorOptions Clone() {
      return new RefineLandmarksFromHeatmapCalculatorOptions(this);
    }

    /// <summary>Field number for the "kernel_size" field.</summary>
    public const int KernelSizeFieldNumber = 1;
    private readonly static int KernelSizeDefaultValue = 9;

    private int kernelSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int KernelSize {
      get { if ((_hasBits0 & 1) != 0) { return kernelSize_; } else { return KernelSizeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        kernelSize_ = value;
      }
    }
    /// <summary>Gets whether the "kernel_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasKernelSize {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "kernel_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearKernelSize() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "min_confidence_to_refine" field.</summary>
    public const int MinConfidenceToRefineFieldNumber = 2;
    private readonly static float MinConfidenceToRefineDefaultValue = 0.5F;

    private float minConfidenceToRefine_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float MinConfidenceToRefine {
      get { if ((_hasBits0 & 2) != 0) { return minConfidenceToRefine_; } else { return MinConfidenceToRefineDefaultValue; } }
      set {
        _hasBits0 |= 2;
        minConfidenceToRefine_ = value;
      }
    }
    /// <summary>Gets whether the "min_confidence_to_refine" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinConfidenceToRefine {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "min_confidence_to_refine" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinConfidenceToRefine() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "refine_presence" field.</summary>
    public const int RefinePresenceFieldNumber = 3;
    private readonly static bool RefinePresenceDefaultValue = false;

    private bool refinePresence_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RefinePresence {
      get { if ((_hasBits0 & 4) != 0) { return refinePresence_; } else { return RefinePresenceDefaultValue; } }
      set {
        _hasBits0 |= 4;
        refinePresence_ = value;
      }
    }
    /// <summary>Gets whether the "refine_presence" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRefinePresence {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "refine_presence" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRefinePresence() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "refine_visibility" field.</summary>
    public const int RefineVisibilityFieldNumber = 4;
    private readonly static bool RefineVisibilityDefaultValue = false;

    private bool refineVisibility_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RefineVisibility {
      get { if ((_hasBits0 & 8) != 0) { return refineVisibility_; } else { return RefineVisibilityDefaultValue; } }
      set {
        _hasBits0 |= 8;
        refineVisibility_ = value;
      }
    }
    /// <summary>Gets whether the "refine_visibility" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRefineVisibility {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "refine_visibility" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRefineVisibility() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RefineLandmarksFromHeatmapCalculatorOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RefineLandmarksFromHeatmapCalculatorOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KernelSize != other.KernelSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MinConfidenceToRefine, other.MinConfidenceToRefine)) return false;
      if (RefinePresence != other.RefinePresence) return false;
      if (RefineVisibility != other.RefineVisibility) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKernelSize) hash ^= KernelSize.GetHashCode();
      if (HasMinConfidenceToRefine) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MinConfidenceToRefine);
      if (HasRefinePresence) hash ^= RefinePresence.GetHashCode();
      if (HasRefineVisibility) hash ^= RefineVisibility.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasKernelSize) {
        output.WriteRawTag(8);
        output.WriteInt32(KernelSize);
      }
      if (HasMinConfidenceToRefine) {
        output.WriteRawTag(21);
        output.WriteFloat(MinConfidenceToRefine);
      }
      if (HasRefinePresence) {
        output.WriteRawTag(24);
        output.WriteBool(RefinePresence);
      }
      if (HasRefineVisibility) {
        output.WriteRawTag(32);
        output.WriteBool(RefineVisibility);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKernelSize) {
        output.WriteRawTag(8);
        output.WriteInt32(KernelSize);
      }
      if (HasMinConfidenceToRefine) {
        output.WriteRawTag(21);
        output.WriteFloat(MinConfidenceToRefine);
      }
      if (HasRefinePresence) {
        output.WriteRawTag(24);
        output.WriteBool(RefinePresence);
      }
      if (HasRefineVisibility) {
        output.WriteRawTag(32);
        output.WriteBool(RefineVisibility);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasKernelSize) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(KernelSize);
      }
      if (HasMinConfidenceToRefine) {
        size += 1 + 4;
      }
      if (HasRefinePresence) {
        size += 1 + 1;
      }
      if (HasRefineVisibility) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RefineLandmarksFromHeatmapCalculatorOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasKernelSize) {
        KernelSize = other.KernelSize;
      }
      if (other.HasMinConfidenceToRefine) {
        MinConfidenceToRefine = other.MinConfidenceToRefine;
      }
      if (other.HasRefinePresence) {
        RefinePresence = other.RefinePresence;
      }
      if (other.HasRefineVisibility) {
        RefineVisibility = other.RefineVisibility;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            KernelSize = input.ReadInt32();
            break;
          }
          case 21: {
            MinConfidenceToRefine = input.ReadFloat();
            break;
          }
          case 24: {
            RefinePresence = input.ReadBool();
            break;
          }
          case 32: {
            RefineVisibility = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            KernelSize = input.ReadInt32();
            break;
          }
          case 21: {
            MinConfidenceToRefine = input.ReadFloat();
            break;
          }
          case 24: {
            RefinePresence = input.ReadBool();
            break;
          }
          case 32: {
            RefineVisibility = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Extensions
    /// <summary>Container for extensions for other messages declared in the RefineLandmarksFromHeatmapCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Extensions {
      public static readonly pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.RefineLandmarksFromHeatmapCalculatorOptions> Ext =
        new pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.RefineLandmarksFromHeatmapCalculatorOptions>(362281653, pb::FieldCodec.ForMessage(2898253226, global::Mediapipe.RefineLandmarksFromHeatmapCalculatorOptions.Parser));
    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
