// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/calculators/util/labels_to_render_data_calculator.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/calculators/util/labels_to_render_data_calculator.proto</summary>
  public static partial class LabelsToRenderDataCalculatorReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/calculators/util/labels_to_render_data_calculator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LabelsToRenderDataCalculatorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CkFtZWRpYXBpcGUvY2FsY3VsYXRvcnMvdXRpbC9sYWJlbHNfdG9fcmVuZGVy",
            "X2RhdGFfY2FsY3VsYXRvci5wcm90bxIJbWVkaWFwaXBlGiRtZWRpYXBpcGUv",
            "ZnJhbWV3b3JrL2NhbGN1bGF0b3IucHJvdG8aGm1lZGlhcGlwZS91dGlsL2Nv",
            "bG9yLnByb3RvItoECiNMYWJlbHNUb1JlbmRlckRhdGFDYWxjdWxhdG9yT3B0",
            "aW9ucxIfCgVjb2xvchgBIAMoCzIQLm1lZGlhcGlwZS5Db2xvchIUCgl0aGlj",
            "a25lc3MYAiABKAE6ATISJwoNb3V0bGluZV9jb2xvchgMIAMoCzIQLm1lZGlh",
            "cGlwZS5Db2xvchIZChFvdXRsaW5lX3RoaWNrbmVzcxgLIAEoARIaCg5mb250",
            "X2hlaWdodF9weBgDIAEoBToCNTASHwoUaG9yaXpvbnRhbF9vZmZzZXRfcHgY",
            "ByABKAU6ATASHQoSdmVydGljYWxfb2Zmc2V0X3B4GAggASgFOgEwEhkKDm1h",
            "eF9udW1fbGFiZWxzGAQgASgFOgExEhQKCWZvbnRfZmFjZRgFIAEoBToBMBJT",
            "Cghsb2NhdGlvbhgGIAEoDjI3Lm1lZGlhcGlwZS5MYWJlbHNUb1JlbmRlckRh",
            "dGFDYWxjdWxhdG9yT3B0aW9ucy5Mb2NhdGlvbjoIVE9QX0xFRlQSHwoQdXNl",
            "X2Rpc3BsYXlfbmFtZRgJIAEoCDoFZmFsc2USKwocZGlzcGxheV9jbGFzc2lm",
            "aWNhdGlvbl9zY29yZRgKIAEoCDoFZmFsc2UiKQoITG9jYXRpb24SDAoIVE9Q",
            "X0xFRlQQABIPCgtCT1RUT01fTEVGVBABMl0KA2V4dBIcLm1lZGlhcGlwZS5D",
            "YWxjdWxhdG9yT3B0aW9ucxjM6sSBASABKAsyLi5tZWRpYXBpcGUuTGFiZWxz",
            "VG9SZW5kZXJEYXRhQ2FsY3VsYXRvck9wdGlvbnM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mediapipe.CalculatorReflection.Descriptor, global::Mediapipe.ColorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.LabelsToRenderDataCalculatorOptions), global::Mediapipe.LabelsToRenderDataCalculatorOptions.Parser, new[]{ "Color", "Thickness", "OutlineColor", "OutlineThickness", "FontHeightPx", "HorizontalOffsetPx", "VerticalOffsetPx", "MaxNumLabels", "FontFace", "Location", "UseDisplayName", "DisplayClassificationScore" }, null, new[]{ typeof(global::Mediapipe.LabelsToRenderDataCalculatorOptions.Types.Location) }, new pb::Extension[] { global::Mediapipe.LabelsToRenderDataCalculatorOptions.Extensions.Ext }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LabelsToRenderDataCalculatorOptions : pb::IMessage<LabelsToRenderDataCalculatorOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LabelsToRenderDataCalculatorOptions> _parser = new pb::MessageParser<LabelsToRenderDataCalculatorOptions>(() => new LabelsToRenderDataCalculatorOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<LabelsToRenderDataCalculatorOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.LabelsToRenderDataCalculatorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LabelsToRenderDataCalculatorOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LabelsToRenderDataCalculatorOptions(LabelsToRenderDataCalculatorOptions other) : this() {
      _hasBits0 = other._hasBits0;
      color_ = other.color_.Clone();
      thickness_ = other.thickness_;
      outlineColor_ = other.outlineColor_.Clone();
      outlineThickness_ = other.outlineThickness_;
      fontHeightPx_ = other.fontHeightPx_;
      horizontalOffsetPx_ = other.horizontalOffsetPx_;
      verticalOffsetPx_ = other.verticalOffsetPx_;
      maxNumLabels_ = other.maxNumLabels_;
      fontFace_ = other.fontFace_;
      location_ = other.location_;
      useDisplayName_ = other.useDisplayName_;
      displayClassificationScore_ = other.displayClassificationScore_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public LabelsToRenderDataCalculatorOptions Clone() {
      return new LabelsToRenderDataCalculatorOptions(this);
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Mediapipe.Color> _repeated_color_codec
        = pb::FieldCodec.ForMessage(10, global::Mediapipe.Color.Parser);
    private readonly pbc::RepeatedField<global::Mediapipe.Color> color_ = new pbc::RepeatedField<global::Mediapipe.Color>();
    /// <summary>
    /// Colors for drawing the label(s).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mediapipe.Color> Color {
      get { return color_; }
    }

    /// <summary>Field number for the "thickness" field.</summary>
    public const int ThicknessFieldNumber = 2;
    private readonly static double ThicknessDefaultValue = 2D;

    private double thickness_;
    /// <summary>
    /// Thickness for drawing the label(s).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Thickness {
      get { if ((_hasBits0 & 1) != 0) { return thickness_; } else { return ThicknessDefaultValue; } }
      set {
        _hasBits0 |= 1;
        thickness_ = value;
      }
    }
    /// <summary>Gets whether the "thickness" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasThickness {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "thickness" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearThickness() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "outline_color" field.</summary>
    public const int OutlineColorFieldNumber = 12;
    private static readonly pb::FieldCodec<global::Mediapipe.Color> _repeated_outlineColor_codec
        = pb::FieldCodec.ForMessage(98, global::Mediapipe.Color.Parser);
    private readonly pbc::RepeatedField<global::Mediapipe.Color> outlineColor_ = new pbc::RepeatedField<global::Mediapipe.Color>();
    /// <summary>
    /// Color of outline around each character, if any. One per label, as with
    /// color attribute.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Mediapipe.Color> OutlineColor {
      get { return outlineColor_; }
    }

    /// <summary>Field number for the "outline_thickness" field.</summary>
    public const int OutlineThicknessFieldNumber = 11;
    private readonly static double OutlineThicknessDefaultValue = 0D;

    private double outlineThickness_;
    /// <summary>
    /// Thickness of outline around each character.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double OutlineThickness {
      get { if ((_hasBits0 & 512) != 0) { return outlineThickness_; } else { return OutlineThicknessDefaultValue; } }
      set {
        _hasBits0 |= 512;
        outlineThickness_ = value;
      }
    }
    /// <summary>Gets whether the "outline_thickness" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOutlineThickness {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "outline_thickness" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOutlineThickness() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "font_height_px" field.</summary>
    public const int FontHeightPxFieldNumber = 3;
    private readonly static int FontHeightPxDefaultValue = 50;

    private int fontHeightPx_;
    /// <summary>
    /// The font height in absolute pixels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FontHeightPx {
      get { if ((_hasBits0 & 2) != 0) { return fontHeightPx_; } else { return FontHeightPxDefaultValue; } }
      set {
        _hasBits0 |= 2;
        fontHeightPx_ = value;
      }
    }
    /// <summary>Gets whether the "font_height_px" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFontHeightPx {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "font_height_px" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFontHeightPx() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "horizontal_offset_px" field.</summary>
    public const int HorizontalOffsetPxFieldNumber = 7;
    private readonly static int HorizontalOffsetPxDefaultValue = 0;

    private int horizontalOffsetPx_;
    /// <summary>
    /// The offset of the starting text in horizontal direction in absolute pixels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HorizontalOffsetPx {
      get { if ((_hasBits0 & 32) != 0) { return horizontalOffsetPx_; } else { return HorizontalOffsetPxDefaultValue; } }
      set {
        _hasBits0 |= 32;
        horizontalOffsetPx_ = value;
      }
    }
    /// <summary>Gets whether the "horizontal_offset_px" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHorizontalOffsetPx {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "horizontal_offset_px" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHorizontalOffsetPx() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "vertical_offset_px" field.</summary>
    public const int VerticalOffsetPxFieldNumber = 8;
    private readonly static int VerticalOffsetPxDefaultValue = 0;

    private int verticalOffsetPx_;
    /// <summary>
    /// The offset of the starting text in vertical direction in absolute pixels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VerticalOffsetPx {
      get { if ((_hasBits0 & 64) != 0) { return verticalOffsetPx_; } else { return VerticalOffsetPxDefaultValue; } }
      set {
        _hasBits0 |= 64;
        verticalOffsetPx_ = value;
      }
    }
    /// <summary>Gets whether the "vertical_offset_px" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVerticalOffsetPx {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "vertical_offset_px" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVerticalOffsetPx() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "max_num_labels" field.</summary>
    public const int MaxNumLabelsFieldNumber = 4;
    private readonly static int MaxNumLabelsDefaultValue = 1;

    private int maxNumLabels_;
    /// <summary>
    /// The maximum number of labels to display.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxNumLabels {
      get { if ((_hasBits0 & 4) != 0) { return maxNumLabels_; } else { return MaxNumLabelsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        maxNumLabels_ = value;
      }
    }
    /// <summary>Gets whether the "max_num_labels" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxNumLabels {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "max_num_labels" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxNumLabels() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "font_face" field.</summary>
    public const int FontFaceFieldNumber = 5;
    private readonly static int FontFaceDefaultValue = 0;

    private int fontFace_;
    /// <summary>
    /// Specifies the font for the text. Font must be one of the following from
    /// OpenCV:
    /// cv::FONT_HERSHEY_SIMPLEX (0)
    /// cv::FONT_HERSHEY_PLAIN (1)
    /// cv::FONT_HERSHEY_DUPLEX (2)
    /// cv::FONT_HERSHEY_COMPLEX (3)
    /// cv::FONT_HERSHEY_TRIPLEX (4)
    /// cv::FONT_HERSHEY_COMPLEX_SMALL (5)
    /// cv::FONT_HERSHEY_SCRIPT_SIMPLEX (6)
    /// cv::FONT_HERSHEY_SCRIPT_COMPLEX (7)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FontFace {
      get { if ((_hasBits0 & 8) != 0) { return fontFace_; } else { return FontFaceDefaultValue; } }
      set {
        _hasBits0 |= 8;
        fontFace_ = value;
      }
    }
    /// <summary>Gets whether the "font_face" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFontFace {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "font_face" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFontFace() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 6;
    private readonly static global::Mediapipe.LabelsToRenderDataCalculatorOptions.Types.Location LocationDefaultValue = global::Mediapipe.LabelsToRenderDataCalculatorOptions.Types.Location.TopLeft;

    private global::Mediapipe.LabelsToRenderDataCalculatorOptions.Types.Location location_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.LabelsToRenderDataCalculatorOptions.Types.Location Location {
      get { if ((_hasBits0 & 16) != 0) { return location_; } else { return LocationDefaultValue; } }
      set {
        _hasBits0 |= 16;
        location_ = value;
      }
    }
    /// <summary>Gets whether the "location" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLocation {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "location" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLocation() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "use_display_name" field.</summary>
    public const int UseDisplayNameFieldNumber = 9;
    private readonly static bool UseDisplayNameDefaultValue = false;

    private bool useDisplayName_;
    /// <summary>
    /// Uses Classification.display_name field instead of Classification.label.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UseDisplayName {
      get { if ((_hasBits0 & 128) != 0) { return useDisplayName_; } else { return UseDisplayNameDefaultValue; } }
      set {
        _hasBits0 |= 128;
        useDisplayName_ = value;
      }
    }
    /// <summary>Gets whether the "use_display_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUseDisplayName {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "use_display_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUseDisplayName() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "display_classification_score" field.</summary>
    public const int DisplayClassificationScoreFieldNumber = 10;
    private readonly static bool DisplayClassificationScoreDefaultValue = false;

    private bool displayClassificationScore_;
    /// <summary>
    /// Displays Classification score if enabled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DisplayClassificationScore {
      get { if ((_hasBits0 & 256) != 0) { return displayClassificationScore_; } else { return DisplayClassificationScoreDefaultValue; } }
      set {
        _hasBits0 |= 256;
        displayClassificationScore_ = value;
      }
    }
    /// <summary>Gets whether the "display_classification_score" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDisplayClassificationScore {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "display_classification_score" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDisplayClassificationScore() {
      _hasBits0 &= ~256;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as LabelsToRenderDataCalculatorOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(LabelsToRenderDataCalculatorOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!color_.Equals(other.color_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Thickness, other.Thickness)) return false;
      if(!outlineColor_.Equals(other.outlineColor_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(OutlineThickness, other.OutlineThickness)) return false;
      if (FontHeightPx != other.FontHeightPx) return false;
      if (HorizontalOffsetPx != other.HorizontalOffsetPx) return false;
      if (VerticalOffsetPx != other.VerticalOffsetPx) return false;
      if (MaxNumLabels != other.MaxNumLabels) return false;
      if (FontFace != other.FontFace) return false;
      if (Location != other.Location) return false;
      if (UseDisplayName != other.UseDisplayName) return false;
      if (DisplayClassificationScore != other.DisplayClassificationScore) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= color_.GetHashCode();
      if (HasThickness) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Thickness);
      hash ^= outlineColor_.GetHashCode();
      if (HasOutlineThickness) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(OutlineThickness);
      if (HasFontHeightPx) hash ^= FontHeightPx.GetHashCode();
      if (HasHorizontalOffsetPx) hash ^= HorizontalOffsetPx.GetHashCode();
      if (HasVerticalOffsetPx) hash ^= VerticalOffsetPx.GetHashCode();
      if (HasMaxNumLabels) hash ^= MaxNumLabels.GetHashCode();
      if (HasFontFace) hash ^= FontFace.GetHashCode();
      if (HasLocation) hash ^= Location.GetHashCode();
      if (HasUseDisplayName) hash ^= UseDisplayName.GetHashCode();
      if (HasDisplayClassificationScore) hash ^= DisplayClassificationScore.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      color_.WriteTo(output, _repeated_color_codec);
      if (HasThickness) {
        output.WriteRawTag(17);
        output.WriteDouble(Thickness);
      }
      if (HasFontHeightPx) {
        output.WriteRawTag(24);
        output.WriteInt32(FontHeightPx);
      }
      if (HasMaxNumLabels) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxNumLabels);
      }
      if (HasFontFace) {
        output.WriteRawTag(40);
        output.WriteInt32(FontFace);
      }
      if (HasLocation) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Location);
      }
      if (HasHorizontalOffsetPx) {
        output.WriteRawTag(56);
        output.WriteInt32(HorizontalOffsetPx);
      }
      if (HasVerticalOffsetPx) {
        output.WriteRawTag(64);
        output.WriteInt32(VerticalOffsetPx);
      }
      if (HasUseDisplayName) {
        output.WriteRawTag(72);
        output.WriteBool(UseDisplayName);
      }
      if (HasDisplayClassificationScore) {
        output.WriteRawTag(80);
        output.WriteBool(DisplayClassificationScore);
      }
      if (HasOutlineThickness) {
        output.WriteRawTag(89);
        output.WriteDouble(OutlineThickness);
      }
      outlineColor_.WriteTo(output, _repeated_outlineColor_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      color_.WriteTo(ref output, _repeated_color_codec);
      if (HasThickness) {
        output.WriteRawTag(17);
        output.WriteDouble(Thickness);
      }
      if (HasFontHeightPx) {
        output.WriteRawTag(24);
        output.WriteInt32(FontHeightPx);
      }
      if (HasMaxNumLabels) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxNumLabels);
      }
      if (HasFontFace) {
        output.WriteRawTag(40);
        output.WriteInt32(FontFace);
      }
      if (HasLocation) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Location);
      }
      if (HasHorizontalOffsetPx) {
        output.WriteRawTag(56);
        output.WriteInt32(HorizontalOffsetPx);
      }
      if (HasVerticalOffsetPx) {
        output.WriteRawTag(64);
        output.WriteInt32(VerticalOffsetPx);
      }
      if (HasUseDisplayName) {
        output.WriteRawTag(72);
        output.WriteBool(UseDisplayName);
      }
      if (HasDisplayClassificationScore) {
        output.WriteRawTag(80);
        output.WriteBool(DisplayClassificationScore);
      }
      if (HasOutlineThickness) {
        output.WriteRawTag(89);
        output.WriteDouble(OutlineThickness);
      }
      outlineColor_.WriteTo(ref output, _repeated_outlineColor_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      size += color_.CalculateSize(_repeated_color_codec);
      if (HasThickness) {
        size += 1 + 8;
      }
      size += outlineColor_.CalculateSize(_repeated_outlineColor_codec);
      if (HasOutlineThickness) {
        size += 1 + 8;
      }
      if (HasFontHeightPx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FontHeightPx);
      }
      if (HasHorizontalOffsetPx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HorizontalOffsetPx);
      }
      if (HasVerticalOffsetPx) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VerticalOffsetPx);
      }
      if (HasMaxNumLabels) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxNumLabels);
      }
      if (HasFontFace) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FontFace);
      }
      if (HasLocation) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Location);
      }
      if (HasUseDisplayName) {
        size += 1 + 1;
      }
      if (HasDisplayClassificationScore) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(LabelsToRenderDataCalculatorOptions other) {
      if (other == null) {
        return;
      }
      color_.Add(other.color_);
      if (other.HasThickness) {
        Thickness = other.Thickness;
      }
      outlineColor_.Add(other.outlineColor_);
      if (other.HasOutlineThickness) {
        OutlineThickness = other.OutlineThickness;
      }
      if (other.HasFontHeightPx) {
        FontHeightPx = other.FontHeightPx;
      }
      if (other.HasHorizontalOffsetPx) {
        HorizontalOffsetPx = other.HorizontalOffsetPx;
      }
      if (other.HasVerticalOffsetPx) {
        VerticalOffsetPx = other.VerticalOffsetPx;
      }
      if (other.HasMaxNumLabels) {
        MaxNumLabels = other.MaxNumLabels;
      }
      if (other.HasFontFace) {
        FontFace = other.FontFace;
      }
      if (other.HasLocation) {
        Location = other.Location;
      }
      if (other.HasUseDisplayName) {
        UseDisplayName = other.UseDisplayName;
      }
      if (other.HasDisplayClassificationScore) {
        DisplayClassificationScore = other.DisplayClassificationScore;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            color_.AddEntriesFrom(input, _repeated_color_codec);
            break;
          }
          case 17: {
            Thickness = input.ReadDouble();
            break;
          }
          case 24: {
            FontHeightPx = input.ReadInt32();
            break;
          }
          case 32: {
            MaxNumLabels = input.ReadInt32();
            break;
          }
          case 40: {
            FontFace = input.ReadInt32();
            break;
          }
          case 48: {
            Location = (global::Mediapipe.LabelsToRenderDataCalculatorOptions.Types.Location) input.ReadEnum();
            break;
          }
          case 56: {
            HorizontalOffsetPx = input.ReadInt32();
            break;
          }
          case 64: {
            VerticalOffsetPx = input.ReadInt32();
            break;
          }
          case 72: {
            UseDisplayName = input.ReadBool();
            break;
          }
          case 80: {
            DisplayClassificationScore = input.ReadBool();
            break;
          }
          case 89: {
            OutlineThickness = input.ReadDouble();
            break;
          }
          case 98: {
            outlineColor_.AddEntriesFrom(input, _repeated_outlineColor_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            color_.AddEntriesFrom(ref input, _repeated_color_codec);
            break;
          }
          case 17: {
            Thickness = input.ReadDouble();
            break;
          }
          case 24: {
            FontHeightPx = input.ReadInt32();
            break;
          }
          case 32: {
            MaxNumLabels = input.ReadInt32();
            break;
          }
          case 40: {
            FontFace = input.ReadInt32();
            break;
          }
          case 48: {
            Location = (global::Mediapipe.LabelsToRenderDataCalculatorOptions.Types.Location) input.ReadEnum();
            break;
          }
          case 56: {
            HorizontalOffsetPx = input.ReadInt32();
            break;
          }
          case 64: {
            VerticalOffsetPx = input.ReadInt32();
            break;
          }
          case 72: {
            UseDisplayName = input.ReadBool();
            break;
          }
          case 80: {
            DisplayClassificationScore = input.ReadBool();
            break;
          }
          case 89: {
            OutlineThickness = input.ReadDouble();
            break;
          }
          case 98: {
            outlineColor_.AddEntriesFrom(ref input, _repeated_outlineColor_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the LabelsToRenderDataCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Label location.
      /// </summary>
      public enum Location {
        [pbr::OriginalName("TOP_LEFT")] TopLeft = 0,
        [pbr::OriginalName("BOTTOM_LEFT")] BottomLeft = 1,
      }

    }
    #endregion

    #region Extensions
    /// <summary>Container for extensions for other messages declared in the LabelsToRenderDataCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Extensions {
      public static readonly pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.LabelsToRenderDataCalculatorOptions> Ext =
        new pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.LabelsToRenderDataCalculatorOptions>(271660364, pb::FieldCodec.ForMessage(2173282914, global::Mediapipe.LabelsToRenderDataCalculatorOptions.Parser));
    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
