// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/calculators/util/rect_to_render_data_calculator.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/calculators/util/rect_to_render_data_calculator.proto</summary>
  public static partial class RectToRenderDataCalculatorReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/calculators/util/rect_to_render_data_calculator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RectToRenderDataCalculatorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cj9tZWRpYXBpcGUvY2FsY3VsYXRvcnMvdXRpbC9yZWN0X3RvX3JlbmRlcl9k",
            "YXRhX2NhbGN1bGF0b3IucHJvdG8SCW1lZGlhcGlwZRokbWVkaWFwaXBlL2Zy",
            "YW1ld29yay9jYWxjdWxhdG9yLnByb3RvGhptZWRpYXBpcGUvdXRpbC9jb2xv",
            "ci5wcm90byL3AQohUmVjdFRvUmVuZGVyRGF0YUNhbGN1bGF0b3JPcHRpb25z",
            "Eg4KBmZpbGxlZBgBIAEoCBIfCgVjb2xvchgCIAEoCzIQLm1lZGlhcGlwZS5D",
            "b2xvchIUCgl0aGlja25lc3MYAyABKAE6ATESEwoEb3ZhbBgEIAEoCDoFZmFs",
            "c2USGgoSdG9wX2xlZnRfdGhpY2tuZXNzGAUgASgBMloKA2V4dBIcLm1lZGlh",
            "cGlwZS5DYWxjdWxhdG9yT3B0aW9ucxis24d9IAEoCzIsLm1lZGlhcGlwZS5S",
            "ZWN0VG9SZW5kZXJEYXRhQ2FsY3VsYXRvck9wdGlvbnM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mediapipe.CalculatorReflection.Descriptor, global::Mediapipe.ColorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.RectToRenderDataCalculatorOptions), global::Mediapipe.RectToRenderDataCalculatorOptions.Parser, new[]{ "Filled", "Color", "Thickness", "Oval", "TopLeftThickness" }, null, null, new pb::Extension[] { global::Mediapipe.RectToRenderDataCalculatorOptions.Extensions.Ext }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RectToRenderDataCalculatorOptions : pb::IMessage<RectToRenderDataCalculatorOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RectToRenderDataCalculatorOptions> _parser = new pb::MessageParser<RectToRenderDataCalculatorOptions>(() => new RectToRenderDataCalculatorOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RectToRenderDataCalculatorOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.RectToRenderDataCalculatorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RectToRenderDataCalculatorOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RectToRenderDataCalculatorOptions(RectToRenderDataCalculatorOptions other) : this() {
      _hasBits0 = other._hasBits0;
      filled_ = other.filled_;
      color_ = other.color_ != null ? other.color_.Clone() : null;
      thickness_ = other.thickness_;
      oval_ = other.oval_;
      topLeftThickness_ = other.topLeftThickness_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RectToRenderDataCalculatorOptions Clone() {
      return new RectToRenderDataCalculatorOptions(this);
    }

    /// <summary>Field number for the "filled" field.</summary>
    public const int FilledFieldNumber = 1;
    private readonly static bool FilledDefaultValue = false;

    private bool filled_;
    /// <summary>
    /// Whether the rendered rectangle should be filled.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Filled {
      get { if ((_hasBits0 & 1) != 0) { return filled_; } else { return FilledDefaultValue; } }
      set {
        _hasBits0 |= 1;
        filled_ = value;
      }
    }
    /// <summary>Gets whether the "filled" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFilled {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "filled" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFilled() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 2;
    private global::Mediapipe.Color color_;
    /// <summary>
    /// Line color or filled color of the rectangle.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "thickness" field.</summary>
    public const int ThicknessFieldNumber = 3;
    private readonly static double ThicknessDefaultValue = 1D;

    private double thickness_;
    /// <summary>
    /// Thickness of the line (applicable when the rectangle is not filled).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Thickness {
      get { if ((_hasBits0 & 2) != 0) { return thickness_; } else { return ThicknessDefaultValue; } }
      set {
        _hasBits0 |= 2;
        thickness_ = value;
      }
    }
    /// <summary>Gets whether the "thickness" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasThickness {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "thickness" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearThickness() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "oval" field.</summary>
    public const int OvalFieldNumber = 4;
    private readonly static bool OvalDefaultValue = false;

    private bool oval_;
    /// <summary>
    /// Whether the rendered rectangle should be an oval.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Oval {
      get { if ((_hasBits0 & 4) != 0) { return oval_; } else { return OvalDefaultValue; } }
      set {
        _hasBits0 |= 4;
        oval_ = value;
      }
    }
    /// <summary>Gets whether the "oval" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOval {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "oval" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOval() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "top_left_thickness" field.</summary>
    public const int TopLeftThicknessFieldNumber = 5;
    private readonly static double TopLeftThicknessDefaultValue = 0D;

    private double topLeftThickness_;
    /// <summary>
    /// Radius of top left corner circle. Only supported for oval=false,
    /// filled=false.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double TopLeftThickness {
      get { if ((_hasBits0 & 8) != 0) { return topLeftThickness_; } else { return TopLeftThicknessDefaultValue; } }
      set {
        _hasBits0 |= 8;
        topLeftThickness_ = value;
      }
    }
    /// <summary>Gets whether the "top_left_thickness" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTopLeftThickness {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "top_left_thickness" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTopLeftThickness() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RectToRenderDataCalculatorOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RectToRenderDataCalculatorOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Filled != other.Filled) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Thickness, other.Thickness)) return false;
      if (Oval != other.Oval) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TopLeftThickness, other.TopLeftThickness)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasFilled) hash ^= Filled.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (HasThickness) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Thickness);
      if (HasOval) hash ^= Oval.GetHashCode();
      if (HasTopLeftThickness) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TopLeftThickness);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasFilled) {
        output.WriteRawTag(8);
        output.WriteBool(Filled);
      }
      if (color_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Color);
      }
      if (HasThickness) {
        output.WriteRawTag(25);
        output.WriteDouble(Thickness);
      }
      if (HasOval) {
        output.WriteRawTag(32);
        output.WriteBool(Oval);
      }
      if (HasTopLeftThickness) {
        output.WriteRawTag(41);
        output.WriteDouble(TopLeftThickness);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasFilled) {
        output.WriteRawTag(8);
        output.WriteBool(Filled);
      }
      if (color_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Color);
      }
      if (HasThickness) {
        output.WriteRawTag(25);
        output.WriteDouble(Thickness);
      }
      if (HasOval) {
        output.WriteRawTag(32);
        output.WriteBool(Oval);
      }
      if (HasTopLeftThickness) {
        output.WriteRawTag(41);
        output.WriteDouble(TopLeftThickness);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasFilled) {
        size += 1 + 1;
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (HasThickness) {
        size += 1 + 8;
      }
      if (HasOval) {
        size += 1 + 1;
      }
      if (HasTopLeftThickness) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RectToRenderDataCalculatorOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasFilled) {
        Filled = other.Filled;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::Mediapipe.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.HasThickness) {
        Thickness = other.Thickness;
      }
      if (other.HasOval) {
        Oval = other.Oval;
      }
      if (other.HasTopLeftThickness) {
        TopLeftThickness = other.TopLeftThickness;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Filled = input.ReadBool();
            break;
          }
          case 18: {
            if (color_ == null) {
              Color = new global::Mediapipe.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 25: {
            Thickness = input.ReadDouble();
            break;
          }
          case 32: {
            Oval = input.ReadBool();
            break;
          }
          case 41: {
            TopLeftThickness = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Filled = input.ReadBool();
            break;
          }
          case 18: {
            if (color_ == null) {
              Color = new global::Mediapipe.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 25: {
            Thickness = input.ReadDouble();
            break;
          }
          case 32: {
            Oval = input.ReadBool();
            break;
          }
          case 41: {
            TopLeftThickness = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

    #region Extensions
    /// <summary>Container for extensions for other messages declared in the RectToRenderDataCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Extensions {
      public static readonly pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.RectToRenderDataCalculatorOptions> Ext =
        new pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.RectToRenderDataCalculatorOptions>(262270380, pb::FieldCodec.ForMessage(2098163042, global::Mediapipe.RectToRenderDataCalculatorOptions.Parser));
    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
