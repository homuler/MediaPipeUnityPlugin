// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/calculators/util/detections_to_render_data_calculator.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/calculators/util/detections_to_render_data_calculator.proto</summary>
  public static partial class DetectionsToRenderDataCalculatorReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/calculators/util/detections_to_render_data_calculator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static DetectionsToRenderDataCalculatorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CkVtZWRpYXBpcGUvY2FsY3VsYXRvcnMvdXRpbC9kZXRlY3Rpb25zX3RvX3Jl",
            "bmRlcl9kYXRhX2NhbGN1bGF0b3IucHJvdG8SCW1lZGlhcGlwZRokbWVkaWFw",
            "aXBlL2ZyYW1ld29yay9jYWxjdWxhdG9yLnByb3RvGhptZWRpYXBpcGUvdXRp",
            "bC9jb2xvci5wcm90bxogbWVkaWFwaXBlL3V0aWwvcmVuZGVyX2RhdGEucHJv",
            "dG8imAMKJ0RldGVjdGlvbnNUb1JlbmRlckRhdGFDYWxjdWxhdG9yT3B0aW9u",
            "cxIiChRwcm9kdWNlX2VtcHR5X3BhY2tldBgBIAEoCDoEdHJ1ZRIZCg50ZXh0",
            "X2RlbGltaXRlchgCIAEoCToBLBIhChJvbmVfbGFiZWxfcGVyX2xpbmUYAyAB",
            "KAg6BWZhbHNlEi4KBHRleHQYBCABKAsyIC5tZWRpYXBpcGUuUmVuZGVyQW5u",
            "b3RhdGlvbi5UZXh0EhQKCXRoaWNrbmVzcxgFIAEoAToBMRIfCgVjb2xvchgG",
            "IAEoCzIQLm1lZGlhcGlwZS5Db2xvchIeCgtzY2VuZV9jbGFzcxgHIAEoCToJ",
            "REVURUNUSU9OEiIKE3JlbmRlcl9kZXRlY3Rpb25faWQYCCABKAg6BWZhbHNl",
            "MmAKA2V4dBIcLm1lZGlhcGlwZS5DYWxjdWxhdG9yT3B0aW9ucxjm3rZ2IAEo",
            "CzIyLm1lZGlhcGlwZS5EZXRlY3Rpb25zVG9SZW5kZXJEYXRhQ2FsY3VsYXRv",
            "ck9wdGlvbnM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mediapipe.CalculatorReflection.Descriptor, global::Mediapipe.ColorReflection.Descriptor, global::Mediapipe.RenderDataReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.DetectionsToRenderDataCalculatorOptions), global::Mediapipe.DetectionsToRenderDataCalculatorOptions.Parser, new[]{ "ProduceEmptyPacket", "TextDelimiter", "OneLabelPerLine", "Text", "Thickness", "Color", "SceneClass", "RenderDetectionId" }, null, null, new pb::Extension[] { global::Mediapipe.DetectionsToRenderDataCalculatorOptions.Extensions.Ext }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class DetectionsToRenderDataCalculatorOptions : pb::IMessage<DetectionsToRenderDataCalculatorOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DetectionsToRenderDataCalculatorOptions> _parser = new pb::MessageParser<DetectionsToRenderDataCalculatorOptions>(() => new DetectionsToRenderDataCalculatorOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DetectionsToRenderDataCalculatorOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.DetectionsToRenderDataCalculatorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DetectionsToRenderDataCalculatorOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DetectionsToRenderDataCalculatorOptions(DetectionsToRenderDataCalculatorOptions other) : this() {
      _hasBits0 = other._hasBits0;
      produceEmptyPacket_ = other.produceEmptyPacket_;
      textDelimiter_ = other.textDelimiter_;
      oneLabelPerLine_ = other.oneLabelPerLine_;
      text_ = other.text_ != null ? other.text_.Clone() : null;
      thickness_ = other.thickness_;
      color_ = other.color_ != null ? other.color_.Clone() : null;
      sceneClass_ = other.sceneClass_;
      renderDetectionId_ = other.renderDetectionId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DetectionsToRenderDataCalculatorOptions Clone() {
      return new DetectionsToRenderDataCalculatorOptions(this);
    }

    /// <summary>Field number for the "produce_empty_packet" field.</summary>
    public const int ProduceEmptyPacketFieldNumber = 1;
    private readonly static bool ProduceEmptyPacketDefaultValue = true;

    private bool produceEmptyPacket_;
    /// <summary>
    /// If true, produces a RenderData packet with no annotation when the input
    /// packet has no detection. Otherwise, it won't produce any packet.
    /// Please note, regardless of this flag nothing will be produce if there is
    /// no input packet for a timestamp.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ProduceEmptyPacket {
      get { if ((_hasBits0 & 1) != 0) { return produceEmptyPacket_; } else { return ProduceEmptyPacketDefaultValue; } }
      set {
        _hasBits0 |= 1;
        produceEmptyPacket_ = value;
      }
    }
    /// <summary>Gets whether the "produce_empty_packet" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasProduceEmptyPacket {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "produce_empty_packet" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearProduceEmptyPacket() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "text_delimiter" field.</summary>
    public const int TextDelimiterFieldNumber = 2;
    private readonly static string TextDelimiterDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("LA=="), 0, 1);

    private string textDelimiter_;
    /// <summary>
    /// The delimiter to separate label(_id) and score.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TextDelimiter {
      get { return textDelimiter_ ?? TextDelimiterDefaultValue; }
      set {
        textDelimiter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "text_delimiter" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTextDelimiter {
      get { return textDelimiter_ != null; }
    }
    /// <summary>Clears the value of the "text_delimiter" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTextDelimiter() {
      textDelimiter_ = null;
    }

    /// <summary>Field number for the "one_label_per_line" field.</summary>
    public const int OneLabelPerLineFieldNumber = 3;
    private readonly static bool OneLabelPerLineDefaultValue = false;

    private bool oneLabelPerLine_;
    /// <summary>
    /// If true, each "label(_id),score" will be on a separate line.
    /// Otherwise, all "label(_id),score" will be concatenated when the detection
    /// has more than one label.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OneLabelPerLine {
      get { if ((_hasBits0 & 2) != 0) { return oneLabelPerLine_; } else { return OneLabelPerLineDefaultValue; } }
      set {
        _hasBits0 |= 2;
        oneLabelPerLine_ = value;
      }
    }
    /// <summary>Gets whether the "one_label_per_line" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOneLabelPerLine {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "one_label_per_line" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOneLabelPerLine() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 4;
    private global::Mediapipe.RenderAnnotation.Types.Text text_;
    /// <summary>
    /// Rendering options for the label.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.RenderAnnotation.Types.Text Text {
      get { return text_; }
      set {
        text_ = value;
      }
    }

    /// <summary>Field number for the "thickness" field.</summary>
    public const int ThicknessFieldNumber = 5;
    private readonly static double ThicknessDefaultValue = 1D;

    private double thickness_;
    /// <summary>
    /// Thickness for drawing the label(s) and the location_data(box).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public double Thickness {
      get { if ((_hasBits0 & 4) != 0) { return thickness_; } else { return ThicknessDefaultValue; } }
      set {
        _hasBits0 |= 4;
        thickness_ = value;
      }
    }
    /// <summary>Gets whether the "thickness" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasThickness {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "thickness" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearThickness() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 6;
    private global::Mediapipe.Color color_;
    /// <summary>
    /// Color for drawing the label(s), feature_tag, and the location_data(box).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "scene_class" field.</summary>
    public const int SceneClassFieldNumber = 7;
    private readonly static string SceneClassDefaultValue = global::System.Text.Encoding.UTF8.GetString(global::System.Convert.FromBase64String("REVURUNUSU9O"), 0, 9);

    private string sceneClass_;
    /// <summary>
    /// An optional string that identifies this class of annotations
    /// for the render data output this calculator produces.  If multiple
    /// instances of this calculator are present in the graph, this value
    /// should be unique among them.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SceneClass {
      get { return sceneClass_ ?? SceneClassDefaultValue; }
      set {
        sceneClass_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "scene_class" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSceneClass {
      get { return sceneClass_ != null; }
    }
    /// <summary>Clears the value of the "scene_class" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSceneClass() {
      sceneClass_ = null;
    }

    /// <summary>Field number for the "render_detection_id" field.</summary>
    public const int RenderDetectionIdFieldNumber = 8;
    private readonly static bool RenderDetectionIdDefaultValue = false;

    private bool renderDetectionId_;
    /// <summary>
    /// If true, renders the detection id in the first line before the labels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RenderDetectionId {
      get { if ((_hasBits0 & 8) != 0) { return renderDetectionId_; } else { return RenderDetectionIdDefaultValue; } }
      set {
        _hasBits0 |= 8;
        renderDetectionId_ = value;
      }
    }
    /// <summary>Gets whether the "render_detection_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRenderDetectionId {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "render_detection_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRenderDetectionId() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DetectionsToRenderDataCalculatorOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DetectionsToRenderDataCalculatorOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProduceEmptyPacket != other.ProduceEmptyPacket) return false;
      if (TextDelimiter != other.TextDelimiter) return false;
      if (OneLabelPerLine != other.OneLabelPerLine) return false;
      if (!object.Equals(Text, other.Text)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Thickness, other.Thickness)) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (SceneClass != other.SceneClass) return false;
      if (RenderDetectionId != other.RenderDetectionId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasProduceEmptyPacket) hash ^= ProduceEmptyPacket.GetHashCode();
      if (HasTextDelimiter) hash ^= TextDelimiter.GetHashCode();
      if (HasOneLabelPerLine) hash ^= OneLabelPerLine.GetHashCode();
      if (text_ != null) hash ^= Text.GetHashCode();
      if (HasThickness) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Thickness);
      if (color_ != null) hash ^= Color.GetHashCode();
      if (HasSceneClass) hash ^= SceneClass.GetHashCode();
      if (HasRenderDetectionId) hash ^= RenderDetectionId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasProduceEmptyPacket) {
        output.WriteRawTag(8);
        output.WriteBool(ProduceEmptyPacket);
      }
      if (HasTextDelimiter) {
        output.WriteRawTag(18);
        output.WriteString(TextDelimiter);
      }
      if (HasOneLabelPerLine) {
        output.WriteRawTag(24);
        output.WriteBool(OneLabelPerLine);
      }
      if (text_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Text);
      }
      if (HasThickness) {
        output.WriteRawTag(41);
        output.WriteDouble(Thickness);
      }
      if (color_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Color);
      }
      if (HasSceneClass) {
        output.WriteRawTag(58);
        output.WriteString(SceneClass);
      }
      if (HasRenderDetectionId) {
        output.WriteRawTag(64);
        output.WriteBool(RenderDetectionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasProduceEmptyPacket) {
        output.WriteRawTag(8);
        output.WriteBool(ProduceEmptyPacket);
      }
      if (HasTextDelimiter) {
        output.WriteRawTag(18);
        output.WriteString(TextDelimiter);
      }
      if (HasOneLabelPerLine) {
        output.WriteRawTag(24);
        output.WriteBool(OneLabelPerLine);
      }
      if (text_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Text);
      }
      if (HasThickness) {
        output.WriteRawTag(41);
        output.WriteDouble(Thickness);
      }
      if (color_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Color);
      }
      if (HasSceneClass) {
        output.WriteRawTag(58);
        output.WriteString(SceneClass);
      }
      if (HasRenderDetectionId) {
        output.WriteRawTag(64);
        output.WriteBool(RenderDetectionId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasProduceEmptyPacket) {
        size += 1 + 1;
      }
      if (HasTextDelimiter) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TextDelimiter);
      }
      if (HasOneLabelPerLine) {
        size += 1 + 1;
      }
      if (text_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (HasThickness) {
        size += 1 + 8;
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (HasSceneClass) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneClass);
      }
      if (HasRenderDetectionId) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DetectionsToRenderDataCalculatorOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasProduceEmptyPacket) {
        ProduceEmptyPacket = other.ProduceEmptyPacket;
      }
      if (other.HasTextDelimiter) {
        TextDelimiter = other.TextDelimiter;
      }
      if (other.HasOneLabelPerLine) {
        OneLabelPerLine = other.OneLabelPerLine;
      }
      if (other.text_ != null) {
        if (text_ == null) {
          Text = new global::Mediapipe.RenderAnnotation.Types.Text();
        }
        Text.MergeFrom(other.Text);
      }
      if (other.HasThickness) {
        Thickness = other.Thickness;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::Mediapipe.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.HasSceneClass) {
        SceneClass = other.SceneClass;
      }
      if (other.HasRenderDetectionId) {
        RenderDetectionId = other.RenderDetectionId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ProduceEmptyPacket = input.ReadBool();
            break;
          }
          case 18: {
            TextDelimiter = input.ReadString();
            break;
          }
          case 24: {
            OneLabelPerLine = input.ReadBool();
            break;
          }
          case 34: {
            if (text_ == null) {
              Text = new global::Mediapipe.RenderAnnotation.Types.Text();
            }
            input.ReadMessage(Text);
            break;
          }
          case 41: {
            Thickness = input.ReadDouble();
            break;
          }
          case 50: {
            if (color_ == null) {
              Color = new global::Mediapipe.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 58: {
            SceneClass = input.ReadString();
            break;
          }
          case 64: {
            RenderDetectionId = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ProduceEmptyPacket = input.ReadBool();
            break;
          }
          case 18: {
            TextDelimiter = input.ReadString();
            break;
          }
          case 24: {
            OneLabelPerLine = input.ReadBool();
            break;
          }
          case 34: {
            if (text_ == null) {
              Text = new global::Mediapipe.RenderAnnotation.Types.Text();
            }
            input.ReadMessage(Text);
            break;
          }
          case 41: {
            Thickness = input.ReadDouble();
            break;
          }
          case 50: {
            if (color_ == null) {
              Color = new global::Mediapipe.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 58: {
            SceneClass = input.ReadString();
            break;
          }
          case 64: {
            RenderDetectionId = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Extensions
    /// <summary>Container for extensions for other messages declared in the DetectionsToRenderDataCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Extensions {
      public static readonly pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.DetectionsToRenderDataCalculatorOptions> Ext =
        new pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.DetectionsToRenderDataCalculatorOptions>(248360806, pb::FieldCodec.ForMessage(1986886450, global::Mediapipe.DetectionsToRenderDataCalculatorOptions.Parser));
    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
