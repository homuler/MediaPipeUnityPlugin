// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/calculators/image/image_cropping_calculator.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/calculators/image/image_cropping_calculator.proto</summary>
  public static partial class ImageCroppingCalculatorReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/calculators/image/image_cropping_calculator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ImageCroppingCalculatorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjttZWRpYXBpcGUvY2FsY3VsYXRvcnMvaW1hZ2UvaW1hZ2VfY3JvcHBpbmdf",
            "Y2FsY3VsYXRvci5wcm90bxIJbWVkaWFwaXBlGiRtZWRpYXBpcGUvZnJhbWV3",
            "b3JrL2NhbGN1bGF0b3IucHJvdG8i5AMKHkltYWdlQ3JvcHBpbmdDYWxjdWxh",
            "dG9yT3B0aW9ucxINCgV3aWR0aBgBIAEoBRIOCgZoZWlnaHQYAiABKAUSEwoI",
            "cm90YXRpb24YAyABKAI6ATASEgoKbm9ybV93aWR0aBgEIAEoAhITCgtub3Jt",
            "X2hlaWdodBgFIAEoAhIYCg1ub3JtX2NlbnRlcl94GAYgASgCOgEwEhgKDW5v",
            "cm1fY2VudGVyX3kYByABKAI6ATASVgoLYm9yZGVyX21vZGUYCCABKA4yNC5t",
            "ZWRpYXBpcGUuSW1hZ2VDcm9wcGluZ0NhbGN1bGF0b3JPcHRpb25zLkJvcmRl",
            "ck1vZGU6C0JPUkRFUl9aRVJPEhgKEG91dHB1dF9tYXhfd2lkdGgYCSABKAUS",
            "GQoRb3V0cHV0X21heF9oZWlnaHQYCiABKAUiSwoKQm9yZGVyTW9kZRIWChJC",
            "T1JERVJfVU5TUEVDSUZJRUQQABIPCgtCT1JERVJfWkVSTxABEhQKEEJPUkRF",
            "Ul9SRVBMSUNBVEUQAjJXCgNleHQSHC5tZWRpYXBpcGUuQ2FsY3VsYXRvck9w",
            "dGlvbnMY39aTfSABKAsyKS5tZWRpYXBpcGUuSW1hZ2VDcm9wcGluZ0NhbGN1",
            "bGF0b3JPcHRpb25z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mediapipe.CalculatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.ImageCroppingCalculatorOptions), global::Mediapipe.ImageCroppingCalculatorOptions.Parser, new[]{ "Width", "Height", "Rotation", "NormWidth", "NormHeight", "NormCenterX", "NormCenterY", "BorderMode", "OutputMaxWidth", "OutputMaxHeight" }, null, new[]{ typeof(global::Mediapipe.ImageCroppingCalculatorOptions.Types.BorderMode) }, new pb::Extension[] { global::Mediapipe.ImageCroppingCalculatorOptions.Extensions.Ext }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ImageCroppingCalculatorOptions : pb::IMessage<ImageCroppingCalculatorOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ImageCroppingCalculatorOptions> _parser = new pb::MessageParser<ImageCroppingCalculatorOptions>(() => new ImageCroppingCalculatorOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ImageCroppingCalculatorOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.ImageCroppingCalculatorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ImageCroppingCalculatorOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ImageCroppingCalculatorOptions(ImageCroppingCalculatorOptions other) : this() {
      _hasBits0 = other._hasBits0;
      width_ = other.width_;
      height_ = other.height_;
      rotation_ = other.rotation_;
      normWidth_ = other.normWidth_;
      normHeight_ = other.normHeight_;
      normCenterX_ = other.normCenterX_;
      normCenterY_ = other.normCenterY_;
      borderMode_ = other.borderMode_;
      outputMaxWidth_ = other.outputMaxWidth_;
      outputMaxHeight_ = other.outputMaxHeight_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ImageCroppingCalculatorOptions Clone() {
      return new ImageCroppingCalculatorOptions(this);
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 1;
    private readonly static int WidthDefaultValue = 0;

    private int width_;
    /// <summary>
    /// Output texture buffer dimensions. The values defined in the options will be
    /// overridden by the WIDTH and HEIGHT input streams if they exist.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Width {
      get { if ((_hasBits0 & 1) != 0) { return width_; } else { return WidthDefaultValue; } }
      set {
        _hasBits0 |= 1;
        width_ = value;
      }
    }
    /// <summary>Gets whether the "width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWidth {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWidth() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private readonly static int HeightDefaultValue = 0;

    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Height {
      get { if ((_hasBits0 & 2) != 0) { return height_; } else { return HeightDefaultValue; } }
      set {
        _hasBits0 |= 2;
        height_ = value;
      }
    }
    /// <summary>Gets whether the "height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHeight {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHeight() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private readonly static float RotationDefaultValue = 0F;

    private float rotation_;
    /// <summary>
    /// Rotation angle is counter-clockwise in radian.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rotation {
      get { if ((_hasBits0 & 4) != 0) { return rotation_; } else { return RotationDefaultValue; } }
      set {
        _hasBits0 |= 4;
        rotation_ = value;
      }
    }
    /// <summary>Gets whether the "rotation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRotation {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "rotation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRotation() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "norm_width" field.</summary>
    public const int NormWidthFieldNumber = 4;
    private readonly static float NormWidthDefaultValue = 0F;

    private float normWidth_;
    /// <summary>
    /// Normalized width and height of the output rect. Value is within [0, 1].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NormWidth {
      get { if ((_hasBits0 & 8) != 0) { return normWidth_; } else { return NormWidthDefaultValue; } }
      set {
        _hasBits0 |= 8;
        normWidth_ = value;
      }
    }
    /// <summary>Gets whether the "norm_width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNormWidth {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "norm_width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNormWidth() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "norm_height" field.</summary>
    public const int NormHeightFieldNumber = 5;
    private readonly static float NormHeightDefaultValue = 0F;

    private float normHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NormHeight {
      get { if ((_hasBits0 & 16) != 0) { return normHeight_; } else { return NormHeightDefaultValue; } }
      set {
        _hasBits0 |= 16;
        normHeight_ = value;
      }
    }
    /// <summary>Gets whether the "norm_height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNormHeight {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "norm_height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNormHeight() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "norm_center_x" field.</summary>
    public const int NormCenterXFieldNumber = 6;
    private readonly static float NormCenterXDefaultValue = 0F;

    private float normCenterX_;
    /// <summary>
    /// Normalized location of the center of the output
    /// rectangle in image coordinates. Value is within [0, 1].
    /// The (0, 0) point is at the (top, left) corner.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NormCenterX {
      get { if ((_hasBits0 & 32) != 0) { return normCenterX_; } else { return NormCenterXDefaultValue; } }
      set {
        _hasBits0 |= 32;
        normCenterX_ = value;
      }
    }
    /// <summary>Gets whether the "norm_center_x" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNormCenterX {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "norm_center_x" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNormCenterX() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "norm_center_y" field.</summary>
    public const int NormCenterYFieldNumber = 7;
    private readonly static float NormCenterYDefaultValue = 0F;

    private float normCenterY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NormCenterY {
      get { if ((_hasBits0 & 64) != 0) { return normCenterY_; } else { return NormCenterYDefaultValue; } }
      set {
        _hasBits0 |= 64;
        normCenterY_ = value;
      }
    }
    /// <summary>Gets whether the "norm_center_y" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNormCenterY {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "norm_center_y" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNormCenterY() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "border_mode" field.</summary>
    public const int BorderModeFieldNumber = 8;
    private readonly static global::Mediapipe.ImageCroppingCalculatorOptions.Types.BorderMode BorderModeDefaultValue = global::Mediapipe.ImageCroppingCalculatorOptions.Types.BorderMode.BorderZero;

    private global::Mediapipe.ImageCroppingCalculatorOptions.Types.BorderMode borderMode_;
    /// <summary>
    /// Specifies behaviour for crops that go beyond image borders.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.ImageCroppingCalculatorOptions.Types.BorderMode BorderMode {
      get { if ((_hasBits0 & 128) != 0) { return borderMode_; } else { return BorderModeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        borderMode_ = value;
      }
    }
    /// <summary>Gets whether the "border_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBorderMode {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "border_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBorderMode() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "output_max_width" field.</summary>
    public const int OutputMaxWidthFieldNumber = 9;
    private readonly static int OutputMaxWidthDefaultValue = 0;

    private int outputMaxWidth_;
    /// <summary>
    /// Specifies limits for the size of the output image. It will be scaled down,
    /// preserving ratio, to fit within. These do not change which area of the
    /// input is selected for cropping.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OutputMaxWidth {
      get { if ((_hasBits0 & 256) != 0) { return outputMaxWidth_; } else { return OutputMaxWidthDefaultValue; } }
      set {
        _hasBits0 |= 256;
        outputMaxWidth_ = value;
      }
    }
    /// <summary>Gets whether the "output_max_width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOutputMaxWidth {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "output_max_width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOutputMaxWidth() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "output_max_height" field.</summary>
    public const int OutputMaxHeightFieldNumber = 10;
    private readonly static int OutputMaxHeightDefaultValue = 0;

    private int outputMaxHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OutputMaxHeight {
      get { if ((_hasBits0 & 512) != 0) { return outputMaxHeight_; } else { return OutputMaxHeightDefaultValue; } }
      set {
        _hasBits0 |= 512;
        outputMaxHeight_ = value;
      }
    }
    /// <summary>Gets whether the "output_max_height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOutputMaxHeight {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "output_max_height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOutputMaxHeight() {
      _hasBits0 &= ~512;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ImageCroppingCalculatorOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ImageCroppingCalculatorOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Width != other.Width) return false;
      if (Height != other.Height) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NormWidth, other.NormWidth)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NormHeight, other.NormHeight)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NormCenterX, other.NormCenterX)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NormCenterY, other.NormCenterY)) return false;
      if (BorderMode != other.BorderMode) return false;
      if (OutputMaxWidth != other.OutputMaxWidth) return false;
      if (OutputMaxHeight != other.OutputMaxHeight) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasWidth) hash ^= Width.GetHashCode();
      if (HasHeight) hash ^= Height.GetHashCode();
      if (HasRotation) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
      if (HasNormWidth) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NormWidth);
      if (HasNormHeight) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NormHeight);
      if (HasNormCenterX) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NormCenterX);
      if (HasNormCenterY) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NormCenterY);
      if (HasBorderMode) hash ^= BorderMode.GetHashCode();
      if (HasOutputMaxWidth) hash ^= OutputMaxWidth.GetHashCode();
      if (HasOutputMaxHeight) hash ^= OutputMaxHeight.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasWidth) {
        output.WriteRawTag(8);
        output.WriteInt32(Width);
      }
      if (HasHeight) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      if (HasRotation) {
        output.WriteRawTag(29);
        output.WriteFloat(Rotation);
      }
      if (HasNormWidth) {
        output.WriteRawTag(37);
        output.WriteFloat(NormWidth);
      }
      if (HasNormHeight) {
        output.WriteRawTag(45);
        output.WriteFloat(NormHeight);
      }
      if (HasNormCenterX) {
        output.WriteRawTag(53);
        output.WriteFloat(NormCenterX);
      }
      if (HasNormCenterY) {
        output.WriteRawTag(61);
        output.WriteFloat(NormCenterY);
      }
      if (HasBorderMode) {
        output.WriteRawTag(64);
        output.WriteEnum((int) BorderMode);
      }
      if (HasOutputMaxWidth) {
        output.WriteRawTag(72);
        output.WriteInt32(OutputMaxWidth);
      }
      if (HasOutputMaxHeight) {
        output.WriteRawTag(80);
        output.WriteInt32(OutputMaxHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasWidth) {
        output.WriteRawTag(8);
        output.WriteInt32(Width);
      }
      if (HasHeight) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      if (HasRotation) {
        output.WriteRawTag(29);
        output.WriteFloat(Rotation);
      }
      if (HasNormWidth) {
        output.WriteRawTag(37);
        output.WriteFloat(NormWidth);
      }
      if (HasNormHeight) {
        output.WriteRawTag(45);
        output.WriteFloat(NormHeight);
      }
      if (HasNormCenterX) {
        output.WriteRawTag(53);
        output.WriteFloat(NormCenterX);
      }
      if (HasNormCenterY) {
        output.WriteRawTag(61);
        output.WriteFloat(NormCenterY);
      }
      if (HasBorderMode) {
        output.WriteRawTag(64);
        output.WriteEnum((int) BorderMode);
      }
      if (HasOutputMaxWidth) {
        output.WriteRawTag(72);
        output.WriteInt32(OutputMaxWidth);
      }
      if (HasOutputMaxHeight) {
        output.WriteRawTag(80);
        output.WriteInt32(OutputMaxHeight);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasWidth) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (HasHeight) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (HasRotation) {
        size += 1 + 4;
      }
      if (HasNormWidth) {
        size += 1 + 4;
      }
      if (HasNormHeight) {
        size += 1 + 4;
      }
      if (HasNormCenterX) {
        size += 1 + 4;
      }
      if (HasNormCenterY) {
        size += 1 + 4;
      }
      if (HasBorderMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BorderMode);
      }
      if (HasOutputMaxWidth) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputMaxWidth);
      }
      if (HasOutputMaxHeight) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputMaxHeight);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ImageCroppingCalculatorOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasWidth) {
        Width = other.Width;
      }
      if (other.HasHeight) {
        Height = other.Height;
      }
      if (other.HasRotation) {
        Rotation = other.Rotation;
      }
      if (other.HasNormWidth) {
        NormWidth = other.NormWidth;
      }
      if (other.HasNormHeight) {
        NormHeight = other.NormHeight;
      }
      if (other.HasNormCenterX) {
        NormCenterX = other.NormCenterX;
      }
      if (other.HasNormCenterY) {
        NormCenterY = other.NormCenterY;
      }
      if (other.HasBorderMode) {
        BorderMode = other.BorderMode;
      }
      if (other.HasOutputMaxWidth) {
        OutputMaxWidth = other.OutputMaxWidth;
      }
      if (other.HasOutputMaxHeight) {
        OutputMaxHeight = other.OutputMaxHeight;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Width = input.ReadInt32();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
          case 29: {
            Rotation = input.ReadFloat();
            break;
          }
          case 37: {
            NormWidth = input.ReadFloat();
            break;
          }
          case 45: {
            NormHeight = input.ReadFloat();
            break;
          }
          case 53: {
            NormCenterX = input.ReadFloat();
            break;
          }
          case 61: {
            NormCenterY = input.ReadFloat();
            break;
          }
          case 64: {
            BorderMode = (global::Mediapipe.ImageCroppingCalculatorOptions.Types.BorderMode) input.ReadEnum();
            break;
          }
          case 72: {
            OutputMaxWidth = input.ReadInt32();
            break;
          }
          case 80: {
            OutputMaxHeight = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Width = input.ReadInt32();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
          case 29: {
            Rotation = input.ReadFloat();
            break;
          }
          case 37: {
            NormWidth = input.ReadFloat();
            break;
          }
          case 45: {
            NormHeight = input.ReadFloat();
            break;
          }
          case 53: {
            NormCenterX = input.ReadFloat();
            break;
          }
          case 61: {
            NormCenterY = input.ReadFloat();
            break;
          }
          case 64: {
            BorderMode = (global::Mediapipe.ImageCroppingCalculatorOptions.Types.BorderMode) input.ReadEnum();
            break;
          }
          case 72: {
            OutputMaxWidth = input.ReadInt32();
            break;
          }
          case 80: {
            OutputMaxHeight = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ImageCroppingCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum BorderMode {
        /// <summary>
        /// First unspecified value is required by the guideline. See details here:
        /// https://developers.google.com/protocol-buffers/docs/style#enums
        /// </summary>
        [pbr::OriginalName("BORDER_UNSPECIFIED")] BorderUnspecified = 0,
        [pbr::OriginalName("BORDER_ZERO")] BorderZero = 1,
        [pbr::OriginalName("BORDER_REPLICATE")] BorderReplicate = 2,
      }

    }
    #endregion

    #region Extensions
    /// <summary>Container for extensions for other messages declared in the ImageCroppingCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Extensions {
      public static readonly pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.ImageCroppingCalculatorOptions> Ext =
        new pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.ImageCroppingCalculatorOptions>(262466399, pb::FieldCodec.ForMessage(2099731194, global::Mediapipe.ImageCroppingCalculatorOptions.Parser));
    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
