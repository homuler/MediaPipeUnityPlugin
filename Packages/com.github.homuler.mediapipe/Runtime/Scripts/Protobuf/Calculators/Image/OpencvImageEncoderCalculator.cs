// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/calculators/image/opencv_image_encoder_calculator.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/calculators/image/opencv_image_encoder_calculator.proto</summary>
  public static partial class OpencvImageEncoderCalculatorReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/calculators/image/opencv_image_encoder_calculator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OpencvImageEncoderCalculatorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CkFtZWRpYXBpcGUvY2FsY3VsYXRvcnMvaW1hZ2Uvb3BlbmN2X2ltYWdlX2Vu",
            "Y29kZXJfY2FsY3VsYXRvci5wcm90bxIJbWVkaWFwaXBlGiRtZWRpYXBpcGUv",
            "ZnJhbWV3b3JrL2NhbGN1bGF0b3IucHJvdG8ilAEKI09wZW5DdkltYWdlRW5j",
            "b2RlckNhbGN1bGF0b3JPcHRpb25zEg8KB3F1YWxpdHkYASABKAUyXAoDZXh0",
            "EhwubWVkaWFwaXBlLkNhbGN1bGF0b3JPcHRpb25zGP6wwWwgASgLMi4ubWVk",
            "aWFwaXBlLk9wZW5DdkltYWdlRW5jb2RlckNhbGN1bGF0b3JPcHRpb25zIt0B",
            "CiNPcGVuQ3ZJbWFnZUVuY29kZXJDYWxjdWxhdG9yUmVzdWx0cxIVCg1lbmNv",
            "ZGVkX2ltYWdlGAEgASgMEg4KBmhlaWdodBgCIAEoBRINCgV3aWR0aBgDIAEo",
            "BRJNCgpjb2xvcnNwYWNlGAQgASgOMjkubWVkaWFwaXBlLk9wZW5DdkltYWdl",
            "RW5jb2RlckNhbGN1bGF0b3JSZXN1bHRzLkNvbG9yU3BhY2UiMQoKQ29sb3JT",
            "cGFjZRILCgdVTktOT1dOEAASDQoJR1JBWVNDQUxFEAESBwoDUkdCEAI="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mediapipe.CalculatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.OpenCvImageEncoderCalculatorOptions), global::Mediapipe.OpenCvImageEncoderCalculatorOptions.Parser, new[]{ "Quality" }, null, null, new pb::Extension[] { global::Mediapipe.OpenCvImageEncoderCalculatorOptions.Extensions.Ext }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.OpenCvImageEncoderCalculatorResults), global::Mediapipe.OpenCvImageEncoderCalculatorResults.Parser, new[]{ "EncodedImage", "Height", "Width", "Colorspace" }, null, new[]{ typeof(global::Mediapipe.OpenCvImageEncoderCalculatorResults.Types.ColorSpace) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class OpenCvImageEncoderCalculatorOptions : pb::IMessage<OpenCvImageEncoderCalculatorOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OpenCvImageEncoderCalculatorOptions> _parser = new pb::MessageParser<OpenCvImageEncoderCalculatorOptions>(() => new OpenCvImageEncoderCalculatorOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OpenCvImageEncoderCalculatorOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.OpencvImageEncoderCalculatorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OpenCvImageEncoderCalculatorOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OpenCvImageEncoderCalculatorOptions(OpenCvImageEncoderCalculatorOptions other) : this() {
      _hasBits0 = other._hasBits0;
      quality_ = other.quality_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OpenCvImageEncoderCalculatorOptions Clone() {
      return new OpenCvImageEncoderCalculatorOptions(this);
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 1;
    private readonly static int QualityDefaultValue = 0;

    private int quality_;
    /// <summary>
    /// Quality of the encoding. An integer between (0, 100].
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Quality {
      get { if ((_hasBits0 & 1) != 0) { return quality_; } else { return QualityDefaultValue; } }
      set {
        _hasBits0 |= 1;
        quality_ = value;
      }
    }
    /// <summary>Gets whether the "quality" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasQuality {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "quality" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearQuality() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OpenCvImageEncoderCalculatorOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OpenCvImageEncoderCalculatorOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Quality != other.Quality) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasQuality) hash ^= Quality.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasQuality) {
        output.WriteRawTag(8);
        output.WriteInt32(Quality);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasQuality) {
        output.WriteRawTag(8);
        output.WriteInt32(Quality);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasQuality) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Quality);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OpenCvImageEncoderCalculatorOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasQuality) {
        Quality = other.Quality;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Quality = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Quality = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Extensions
    /// <summary>Container for extensions for other messages declared in the OpenCvImageEncoderCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Extensions {
      public static readonly pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.OpenCvImageEncoderCalculatorOptions> Ext =
        new pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.OpenCvImageEncoderCalculatorOptions>(227563646, pb::FieldCodec.ForMessage(1820509170, global::Mediapipe.OpenCvImageEncoderCalculatorOptions.Parser));
    }
    #endregion

  }

  /// <summary>
  /// TODO: Consider renaming it to EncodedImage.
  /// </summary>
  public sealed partial class OpenCvImageEncoderCalculatorResults : pb::IMessage<OpenCvImageEncoderCalculatorResults>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<OpenCvImageEncoderCalculatorResults> _parser = new pb::MessageParser<OpenCvImageEncoderCalculatorResults>(() => new OpenCvImageEncoderCalculatorResults());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<OpenCvImageEncoderCalculatorResults> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.OpencvImageEncoderCalculatorReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OpenCvImageEncoderCalculatorResults() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OpenCvImageEncoderCalculatorResults(OpenCvImageEncoderCalculatorResults other) : this() {
      _hasBits0 = other._hasBits0;
      encodedImage_ = other.encodedImage_;
      height_ = other.height_;
      width_ = other.width_;
      colorspace_ = other.colorspace_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public OpenCvImageEncoderCalculatorResults Clone() {
      return new OpenCvImageEncoderCalculatorResults(this);
    }

    /// <summary>Field number for the "encoded_image" field.</summary>
    public const int EncodedImageFieldNumber = 1;
    private readonly static pb::ByteString EncodedImageDefaultValue = pb::ByteString.Empty;

    private pb::ByteString encodedImage_;
    /// <summary>
    /// Pixel data encoded as JPEG.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString EncodedImage {
      get { return encodedImage_ ?? EncodedImageDefaultValue; }
      set {
        encodedImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "encoded_image" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEncodedImage {
      get { return encodedImage_ != null; }
    }
    /// <summary>Clears the value of the "encoded_image" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEncodedImage() {
      encodedImage_ = null;
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private readonly static int HeightDefaultValue = 0;

    private int height_;
    /// <summary>
    /// Height of the image data under #1 once decoded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Height {
      get { if ((_hasBits0 & 1) != 0) { return height_; } else { return HeightDefaultValue; } }
      set {
        _hasBits0 |= 1;
        height_ = value;
      }
    }
    /// <summary>Gets whether the "height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasHeight {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearHeight() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private readonly static int WidthDefaultValue = 0;

    private int width_;
    /// <summary>
    /// Width of the image data under #1 once decoded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Width {
      get { if ((_hasBits0 & 2) != 0) { return width_; } else { return WidthDefaultValue; } }
      set {
        _hasBits0 |= 2;
        width_ = value;
      }
    }
    /// <summary>Gets whether the "width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasWidth {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearWidth() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "colorspace" field.</summary>
    public const int ColorspaceFieldNumber = 4;
    private readonly static global::Mediapipe.OpenCvImageEncoderCalculatorResults.Types.ColorSpace ColorspaceDefaultValue = global::Mediapipe.OpenCvImageEncoderCalculatorResults.Types.ColorSpace.Unknown;

    private global::Mediapipe.OpenCvImageEncoderCalculatorResults.Types.ColorSpace colorspace_;
    /// <summary>
    /// Color space used.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.OpenCvImageEncoderCalculatorResults.Types.ColorSpace Colorspace {
      get { if ((_hasBits0 & 4) != 0) { return colorspace_; } else { return ColorspaceDefaultValue; } }
      set {
        _hasBits0 |= 4;
        colorspace_ = value;
      }
    }
    /// <summary>Gets whether the "colorspace" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasColorspace {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "colorspace" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearColorspace() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as OpenCvImageEncoderCalculatorResults);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(OpenCvImageEncoderCalculatorResults other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EncodedImage != other.EncodedImage) return false;
      if (Height != other.Height) return false;
      if (Width != other.Width) return false;
      if (Colorspace != other.Colorspace) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasEncodedImage) hash ^= EncodedImage.GetHashCode();
      if (HasHeight) hash ^= Height.GetHashCode();
      if (HasWidth) hash ^= Width.GetHashCode();
      if (HasColorspace) hash ^= Colorspace.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasEncodedImage) {
        output.WriteRawTag(10);
        output.WriteBytes(EncodedImage);
      }
      if (HasHeight) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      if (HasWidth) {
        output.WriteRawTag(24);
        output.WriteInt32(Width);
      }
      if (HasColorspace) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Colorspace);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasEncodedImage) {
        output.WriteRawTag(10);
        output.WriteBytes(EncodedImage);
      }
      if (HasHeight) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      if (HasWidth) {
        output.WriteRawTag(24);
        output.WriteInt32(Width);
      }
      if (HasColorspace) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Colorspace);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasEncodedImage) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EncodedImage);
      }
      if (HasHeight) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (HasWidth) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (HasColorspace) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Colorspace);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(OpenCvImageEncoderCalculatorResults other) {
      if (other == null) {
        return;
      }
      if (other.HasEncodedImage) {
        EncodedImage = other.EncodedImage;
      }
      if (other.HasHeight) {
        Height = other.Height;
      }
      if (other.HasWidth) {
        Width = other.Width;
      }
      if (other.HasColorspace) {
        Colorspace = other.Colorspace;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            EncodedImage = input.ReadBytes();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
          case 24: {
            Width = input.ReadInt32();
            break;
          }
          case 32: {
            Colorspace = (global::Mediapipe.OpenCvImageEncoderCalculatorResults.Types.ColorSpace) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            EncodedImage = input.ReadBytes();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
          case 24: {
            Width = input.ReadInt32();
            break;
          }
          case 32: {
            Colorspace = (global::Mediapipe.OpenCvImageEncoderCalculatorResults.Types.ColorSpace) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the OpenCvImageEncoderCalculatorResults message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum ColorSpace {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("GRAYSCALE")] Grayscale = 1,
        [pbr::OriginalName("RGB")] Rgb = 2,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
