// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/calculators/image/recolor_calculator.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/calculators/image/recolor_calculator.proto</summary>
  public static partial class RecolorCalculatorReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/calculators/image/recolor_calculator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RecolorCalculatorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjRtZWRpYXBpcGUvY2FsY3VsYXRvcnMvaW1hZ2UvcmVjb2xvcl9jYWxjdWxh",
            "dG9yLnByb3RvEgltZWRpYXBpcGUaJG1lZGlhcGlwZS9mcmFtZXdvcmsvY2Fs",
            "Y3VsYXRvci5wcm90bxoabWVkaWFwaXBlL3V0aWwvY29sb3IucHJvdG8iywIK",
            "GFJlY29sb3JDYWxjdWxhdG9yT3B0aW9ucxJKCgxtYXNrX2NoYW5uZWwYASAB",
            "KA4yLy5tZWRpYXBpcGUuUmVjb2xvckNhbGN1bGF0b3JPcHRpb25zLk1hc2tD",
            "aGFubmVsOgNSRUQSHwoFY29sb3IYAiABKAsyEC5tZWRpYXBpcGUuQ29sb3IS",
            "GgoLaW52ZXJ0X21hc2sYAyABKAg6BWZhbHNlEiMKFWFkanVzdF93aXRoX2x1",
            "bWluYW5jZRgEIAEoCDoEdHJ1ZSIuCgtNYXNrQ2hhbm5lbBILCgdVTktOT1dO",
            "EAASBwoDUkVEEAESCQoFQUxQSEEQAjJRCgNleHQSHC5tZWRpYXBpcGUuQ2Fs",
            "Y3VsYXRvck9wdGlvbnMYjYS1eCABKAsyIy5tZWRpYXBpcGUuUmVjb2xvckNh",
            "bGN1bGF0b3JPcHRpb25z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mediapipe.CalculatorReflection.Descriptor, global::Mediapipe.ColorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.RecolorCalculatorOptions), global::Mediapipe.RecolorCalculatorOptions.Parser, new[]{ "MaskChannel", "Color", "InvertMask", "AdjustWithLuminance" }, null, new[]{ typeof(global::Mediapipe.RecolorCalculatorOptions.Types.MaskChannel) }, new pb::Extension[] { global::Mediapipe.RecolorCalculatorOptions.Extensions.Ext }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class RecolorCalculatorOptions : pb::IMessage<RecolorCalculatorOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RecolorCalculatorOptions> _parser = new pb::MessageParser<RecolorCalculatorOptions>(() => new RecolorCalculatorOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RecolorCalculatorOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.RecolorCalculatorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RecolorCalculatorOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RecolorCalculatorOptions(RecolorCalculatorOptions other) : this() {
      _hasBits0 = other._hasBits0;
      maskChannel_ = other.maskChannel_;
      color_ = other.color_ != null ? other.color_.Clone() : null;
      invertMask_ = other.invertMask_;
      adjustWithLuminance_ = other.adjustWithLuminance_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RecolorCalculatorOptions Clone() {
      return new RecolorCalculatorOptions(this);
    }

    /// <summary>Field number for the "mask_channel" field.</summary>
    public const int MaskChannelFieldNumber = 1;
    private readonly static global::Mediapipe.RecolorCalculatorOptions.Types.MaskChannel MaskChannelDefaultValue = global::Mediapipe.RecolorCalculatorOptions.Types.MaskChannel.Red;

    private global::Mediapipe.RecolorCalculatorOptions.Types.MaskChannel maskChannel_;
    /// <summary>
    /// Selects which channel of the MASK input to use for masking.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.RecolorCalculatorOptions.Types.MaskChannel MaskChannel {
      get { if ((_hasBits0 & 1) != 0) { return maskChannel_; } else { return MaskChannelDefaultValue; } }
      set {
        _hasBits0 |= 1;
        maskChannel_ = value;
      }
    }
    /// <summary>Gets whether the "mask_channel" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaskChannel {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "mask_channel" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaskChannel() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 2;
    private global::Mediapipe.Color color_;
    /// <summary>
    /// Color to blend into input image where mask is > 0.
    /// The blending is based on the input image luminosity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.Color Color {
      get { return color_; }
      set {
        color_ = value;
      }
    }

    /// <summary>Field number for the "invert_mask" field.</summary>
    public const int InvertMaskFieldNumber = 3;
    private readonly static bool InvertMaskDefaultValue = false;

    private bool invertMask_;
    /// <summary>
    /// Swap the meaning of mask values for foreground/background.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool InvertMask {
      get { if ((_hasBits0 & 2) != 0) { return invertMask_; } else { return InvertMaskDefaultValue; } }
      set {
        _hasBits0 |= 2;
        invertMask_ = value;
      }
    }
    /// <summary>Gets whether the "invert_mask" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInvertMask {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "invert_mask" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInvertMask() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "adjust_with_luminance" field.</summary>
    public const int AdjustWithLuminanceFieldNumber = 4;
    private readonly static bool AdjustWithLuminanceDefaultValue = true;

    private bool adjustWithLuminance_;
    /// <summary>
    /// Whether to use the luminance of the input image to further adjust the
    /// blending weight, to help preserve image textures.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AdjustWithLuminance {
      get { if ((_hasBits0 & 4) != 0) { return adjustWithLuminance_; } else { return AdjustWithLuminanceDefaultValue; } }
      set {
        _hasBits0 |= 4;
        adjustWithLuminance_ = value;
      }
    }
    /// <summary>Gets whether the "adjust_with_luminance" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAdjustWithLuminance {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "adjust_with_luminance" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAdjustWithLuminance() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RecolorCalculatorOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RecolorCalculatorOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MaskChannel != other.MaskChannel) return false;
      if (!object.Equals(Color, other.Color)) return false;
      if (InvertMask != other.InvertMask) return false;
      if (AdjustWithLuminance != other.AdjustWithLuminance) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasMaskChannel) hash ^= MaskChannel.GetHashCode();
      if (color_ != null) hash ^= Color.GetHashCode();
      if (HasInvertMask) hash ^= InvertMask.GetHashCode();
      if (HasAdjustWithLuminance) hash ^= AdjustWithLuminance.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasMaskChannel) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MaskChannel);
      }
      if (color_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Color);
      }
      if (HasInvertMask) {
        output.WriteRawTag(24);
        output.WriteBool(InvertMask);
      }
      if (HasAdjustWithLuminance) {
        output.WriteRawTag(32);
        output.WriteBool(AdjustWithLuminance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasMaskChannel) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MaskChannel);
      }
      if (color_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Color);
      }
      if (HasInvertMask) {
        output.WriteRawTag(24);
        output.WriteBool(InvertMask);
      }
      if (HasAdjustWithLuminance) {
        output.WriteRawTag(32);
        output.WriteBool(AdjustWithLuminance);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasMaskChannel) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MaskChannel);
      }
      if (color_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Color);
      }
      if (HasInvertMask) {
        size += 1 + 1;
      }
      if (HasAdjustWithLuminance) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RecolorCalculatorOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasMaskChannel) {
        MaskChannel = other.MaskChannel;
      }
      if (other.color_ != null) {
        if (color_ == null) {
          Color = new global::Mediapipe.Color();
        }
        Color.MergeFrom(other.Color);
      }
      if (other.HasInvertMask) {
        InvertMask = other.InvertMask;
      }
      if (other.HasAdjustWithLuminance) {
        AdjustWithLuminance = other.AdjustWithLuminance;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MaskChannel = (global::Mediapipe.RecolorCalculatorOptions.Types.MaskChannel) input.ReadEnum();
            break;
          }
          case 18: {
            if (color_ == null) {
              Color = new global::Mediapipe.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 24: {
            InvertMask = input.ReadBool();
            break;
          }
          case 32: {
            AdjustWithLuminance = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MaskChannel = (global::Mediapipe.RecolorCalculatorOptions.Types.MaskChannel) input.ReadEnum();
            break;
          }
          case 18: {
            if (color_ == null) {
              Color = new global::Mediapipe.Color();
            }
            input.ReadMessage(Color);
            break;
          }
          case 24: {
            InvertMask = input.ReadBool();
            break;
          }
          case 32: {
            AdjustWithLuminance = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the RecolorCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum MaskChannel {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("RED")] Red = 1,
        [pbr::OriginalName("ALPHA")] Alpha = 2,
      }

    }
    #endregion

    #region Extensions
    /// <summary>Container for extensions for other messages declared in the RecolorCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Extensions {
      public static readonly pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.RecolorCalculatorOptions> Ext =
        new pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.RecolorCalculatorOptions>(252527117, pb::FieldCodec.ForMessage(2020216938, global::Mediapipe.RecolorCalculatorOptions.Parser));
    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
