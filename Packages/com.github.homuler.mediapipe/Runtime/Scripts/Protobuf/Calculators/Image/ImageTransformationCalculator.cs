// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/calculators/image/image_transformation_calculator.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/calculators/image/image_transformation_calculator.proto</summary>
  public static partial class ImageTransformationCalculatorReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/calculators/image/image_transformation_calculator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ImageTransformationCalculatorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CkFtZWRpYXBpcGUvY2FsY3VsYXRvcnMvaW1hZ2UvaW1hZ2VfdHJhbnNmb3Jt",
            "YXRpb25fY2FsY3VsYXRvci5wcm90bxIJbWVkaWFwaXBlGi9tZWRpYXBpcGUv",
            "Y2FsY3VsYXRvcnMvaW1hZ2Uvcm90YXRpb25fbW9kZS5wcm90bxokbWVkaWFw",
            "aXBlL2ZyYW1ld29yay9jYWxjdWxhdG9yLnByb3RvGh5tZWRpYXBpcGUvZ3B1",
            "L3NjYWxlX21vZGUucHJvdG8iogUKJEltYWdlVHJhbnNmb3JtYXRpb25DYWxj",
            "dWxhdG9yT3B0aW9ucxIXCgxvdXRwdXRfd2lkdGgYASABKAU6ATASGAoNb3V0",
            "cHV0X2hlaWdodBgCIAEoBToBMBIzCg1yb3RhdGlvbl9tb2RlGAMgASgOMhwu",
            "bWVkaWFwaXBlLlJvdGF0aW9uTW9kZS5Nb2RlEh4KD2ZsaXBfdmVydGljYWxs",
            "eRgEIAEoCDoFZmFsc2USIAoRZmxpcF9ob3Jpem9udGFsbHkYBSABKAg6BWZh",
            "bHNlEi0KCnNjYWxlX21vZGUYBiABKA4yGS5tZWRpYXBpcGUuU2NhbGVNb2Rl",
            "Lk1vZGUSHgoQY29uc3RhbnRfcGFkZGluZxgHIAEoCDoEdHJ1ZRJMCg1wYWRk",
            "aW5nX2NvbG9yGAggASgLMjUubWVkaWFwaXBlLkltYWdlVHJhbnNmb3JtYXRp",
            "b25DYWxjdWxhdG9yT3B0aW9ucy5Db2xvchJdChJpbnRlcnBvbGF0aW9uX21v",
            "ZGUYCSABKA4yQS5tZWRpYXBpcGUuSW1hZ2VUcmFuc2Zvcm1hdGlvbkNhbGN1",
            "bGF0b3JPcHRpb25zLkludGVycG9sYXRpb25Nb2RlGjoKBUNvbG9yEg4KA3Jl",
            "ZBgBIAEoBToBMBIQCgVncmVlbhgCIAEoBToBMBIPCgRibHVlGAMgASgFOgEw",
            "IjkKEUludGVycG9sYXRpb25Nb2RlEgsKB0RFRkFVTFQQABIKCgZMSU5FQVIQ",
            "ARILCgdORUFSRVNUEAIyXQoDZXh0EhwubWVkaWFwaXBlLkNhbGN1bGF0b3JP",
            "cHRpb25zGL79kXggASgLMi8ubWVkaWFwaXBlLkltYWdlVHJhbnNmb3JtYXRp",
            "b25DYWxjdWxhdG9yT3B0aW9uc0JSCiVjb20uZ29vZ2xlLm1lZGlhcGlwZS5j",
            "YWxjdWxhdG9yLnByb3RvQilJbWFnZVRyYW5zZm9ybWF0aW9uQ2FsY3VsYXRv",
            "ck9wdGlvbnNQcm90bw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mediapipe.RotationModeReflection.Descriptor, global::Mediapipe.CalculatorReflection.Descriptor, global::Mediapipe.ScaleModeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.ImageTransformationCalculatorOptions), global::Mediapipe.ImageTransformationCalculatorOptions.Parser, new[]{ "OutputWidth", "OutputHeight", "RotationMode", "FlipVertically", "FlipHorizontally", "ScaleMode", "ConstantPadding", "PaddingColor", "InterpolationMode" }, null, new[]{ typeof(global::Mediapipe.ImageTransformationCalculatorOptions.Types.InterpolationMode) }, new pb::Extension[] { global::Mediapipe.ImageTransformationCalculatorOptions.Extensions.Ext }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.ImageTransformationCalculatorOptions.Types.Color), global::Mediapipe.ImageTransformationCalculatorOptions.Types.Color.Parser, new[]{ "Red", "Green", "Blue" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ImageTransformationCalculatorOptions : pb::IMessage<ImageTransformationCalculatorOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ImageTransformationCalculatorOptions> _parser = new pb::MessageParser<ImageTransformationCalculatorOptions>(() => new ImageTransformationCalculatorOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ImageTransformationCalculatorOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.ImageTransformationCalculatorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ImageTransformationCalculatorOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ImageTransformationCalculatorOptions(ImageTransformationCalculatorOptions other) : this() {
      _hasBits0 = other._hasBits0;
      outputWidth_ = other.outputWidth_;
      outputHeight_ = other.outputHeight_;
      rotationMode_ = other.rotationMode_;
      flipVertically_ = other.flipVertically_;
      flipHorizontally_ = other.flipHorizontally_;
      scaleMode_ = other.scaleMode_;
      constantPadding_ = other.constantPadding_;
      paddingColor_ = other.paddingColor_ != null ? other.paddingColor_.Clone() : null;
      interpolationMode_ = other.interpolationMode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ImageTransformationCalculatorOptions Clone() {
      return new ImageTransformationCalculatorOptions(this);
    }

    /// <summary>Field number for the "output_width" field.</summary>
    public const int OutputWidthFieldNumber = 1;
    private readonly static int OutputWidthDefaultValue = 0;

    private int outputWidth_;
    /// <summary>
    /// Output dimensions. Set to 0 if they should be the same as the input.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OutputWidth {
      get { if ((_hasBits0 & 1) != 0) { return outputWidth_; } else { return OutputWidthDefaultValue; } }
      set {
        _hasBits0 |= 1;
        outputWidth_ = value;
      }
    }
    /// <summary>Gets whether the "output_width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOutputWidth {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "output_width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOutputWidth() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "output_height" field.</summary>
    public const int OutputHeightFieldNumber = 2;
    private readonly static int OutputHeightDefaultValue = 0;

    private int outputHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OutputHeight {
      get { if ((_hasBits0 & 2) != 0) { return outputHeight_; } else { return OutputHeightDefaultValue; } }
      set {
        _hasBits0 |= 2;
        outputHeight_ = value;
      }
    }
    /// <summary>Gets whether the "output_height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOutputHeight {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "output_height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOutputHeight() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "rotation_mode" field.</summary>
    public const int RotationModeFieldNumber = 3;
    private readonly static global::Mediapipe.RotationMode.Types.Mode RotationModeDefaultValue = global::Mediapipe.RotationMode.Types.Mode.Unknown;

    private global::Mediapipe.RotationMode.Types.Mode rotationMode_;
    /// <summary>
    /// Counterclockwise rotation mode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.RotationMode.Types.Mode RotationMode {
      get { if ((_hasBits0 & 4) != 0) { return rotationMode_; } else { return RotationModeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        rotationMode_ = value;
      }
    }
    /// <summary>Gets whether the "rotation_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRotationMode {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "rotation_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRotationMode() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "flip_vertically" field.</summary>
    public const int FlipVerticallyFieldNumber = 4;
    private readonly static bool FlipVerticallyDefaultValue = false;

    private bool flipVertically_;
    /// <summary>
    /// Vertical flipping, applied after rotation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FlipVertically {
      get { if ((_hasBits0 & 8) != 0) { return flipVertically_; } else { return FlipVerticallyDefaultValue; } }
      set {
        _hasBits0 |= 8;
        flipVertically_ = value;
      }
    }
    /// <summary>Gets whether the "flip_vertically" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlipVertically {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "flip_vertically" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlipVertically() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "flip_horizontally" field.</summary>
    public const int FlipHorizontallyFieldNumber = 5;
    private readonly static bool FlipHorizontallyDefaultValue = false;

    private bool flipHorizontally_;
    /// <summary>
    /// Horizontal flipping, applied after rotation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FlipHorizontally {
      get { if ((_hasBits0 & 16) != 0) { return flipHorizontally_; } else { return FlipHorizontallyDefaultValue; } }
      set {
        _hasBits0 |= 16;
        flipHorizontally_ = value;
      }
    }
    /// <summary>Gets whether the "flip_horizontally" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlipHorizontally {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "flip_horizontally" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlipHorizontally() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "scale_mode" field.</summary>
    public const int ScaleModeFieldNumber = 6;
    private readonly static global::Mediapipe.ScaleMode.Types.Mode ScaleModeDefaultValue = global::Mediapipe.ScaleMode.Types.Mode.Default;

    private global::Mediapipe.ScaleMode.Types.Mode scaleMode_;
    /// <summary>
    /// Scale mode.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.ScaleMode.Types.Mode ScaleMode {
      get { if ((_hasBits0 & 32) != 0) { return scaleMode_; } else { return ScaleModeDefaultValue; } }
      set {
        _hasBits0 |= 32;
        scaleMode_ = value;
      }
    }
    /// <summary>Gets whether the "scale_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScaleMode {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "scale_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScaleMode() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "constant_padding" field.</summary>
    public const int ConstantPaddingFieldNumber = 7;
    private readonly static bool ConstantPaddingDefaultValue = true;

    private bool constantPadding_;
    /// <summary>
    /// Padding type. This option is only used when the scale mode is FIT. If set
    /// to true (default), a constant border is added with color specified by
    /// padding_color. If set to false, a border is added by replicating edge
    /// pixels (only supported for CPU).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ConstantPadding {
      get { if ((_hasBits0 & 64) != 0) { return constantPadding_; } else { return ConstantPaddingDefaultValue; } }
      set {
        _hasBits0 |= 64;
        constantPadding_ = value;
      }
    }
    /// <summary>Gets whether the "constant_padding" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasConstantPadding {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "constant_padding" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearConstantPadding() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "padding_color" field.</summary>
    public const int PaddingColorFieldNumber = 8;
    private global::Mediapipe.ImageTransformationCalculatorOptions.Types.Color paddingColor_;
    /// <summary>
    /// The color for the padding. This option is only used when the scale mode is
    /// FIT. Default is black.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.ImageTransformationCalculatorOptions.Types.Color PaddingColor {
      get { return paddingColor_; }
      set {
        paddingColor_ = value;
      }
    }

    /// <summary>Field number for the "interpolation_mode" field.</summary>
    public const int InterpolationModeFieldNumber = 9;
    private readonly static global::Mediapipe.ImageTransformationCalculatorOptions.Types.InterpolationMode InterpolationModeDefaultValue = global::Mediapipe.ImageTransformationCalculatorOptions.Types.InterpolationMode.Default;

    private global::Mediapipe.ImageTransformationCalculatorOptions.Types.InterpolationMode interpolationMode_;
    /// <summary>
    /// Mode DEFAULT will use LINEAR interpolation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.ImageTransformationCalculatorOptions.Types.InterpolationMode InterpolationMode {
      get { if ((_hasBits0 & 128) != 0) { return interpolationMode_; } else { return InterpolationModeDefaultValue; } }
      set {
        _hasBits0 |= 128;
        interpolationMode_ = value;
      }
    }
    /// <summary>Gets whether the "interpolation_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInterpolationMode {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "interpolation_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInterpolationMode() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ImageTransformationCalculatorOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ImageTransformationCalculatorOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OutputWidth != other.OutputWidth) return false;
      if (OutputHeight != other.OutputHeight) return false;
      if (RotationMode != other.RotationMode) return false;
      if (FlipVertically != other.FlipVertically) return false;
      if (FlipHorizontally != other.FlipHorizontally) return false;
      if (ScaleMode != other.ScaleMode) return false;
      if (ConstantPadding != other.ConstantPadding) return false;
      if (!object.Equals(PaddingColor, other.PaddingColor)) return false;
      if (InterpolationMode != other.InterpolationMode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOutputWidth) hash ^= OutputWidth.GetHashCode();
      if (HasOutputHeight) hash ^= OutputHeight.GetHashCode();
      if (HasRotationMode) hash ^= RotationMode.GetHashCode();
      if (HasFlipVertically) hash ^= FlipVertically.GetHashCode();
      if (HasFlipHorizontally) hash ^= FlipHorizontally.GetHashCode();
      if (HasScaleMode) hash ^= ScaleMode.GetHashCode();
      if (HasConstantPadding) hash ^= ConstantPadding.GetHashCode();
      if (paddingColor_ != null) hash ^= PaddingColor.GetHashCode();
      if (HasInterpolationMode) hash ^= InterpolationMode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOutputWidth) {
        output.WriteRawTag(8);
        output.WriteInt32(OutputWidth);
      }
      if (HasOutputHeight) {
        output.WriteRawTag(16);
        output.WriteInt32(OutputHeight);
      }
      if (HasRotationMode) {
        output.WriteRawTag(24);
        output.WriteEnum((int) RotationMode);
      }
      if (HasFlipVertically) {
        output.WriteRawTag(32);
        output.WriteBool(FlipVertically);
      }
      if (HasFlipHorizontally) {
        output.WriteRawTag(40);
        output.WriteBool(FlipHorizontally);
      }
      if (HasScaleMode) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ScaleMode);
      }
      if (HasConstantPadding) {
        output.WriteRawTag(56);
        output.WriteBool(ConstantPadding);
      }
      if (paddingColor_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PaddingColor);
      }
      if (HasInterpolationMode) {
        output.WriteRawTag(72);
        output.WriteEnum((int) InterpolationMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOutputWidth) {
        output.WriteRawTag(8);
        output.WriteInt32(OutputWidth);
      }
      if (HasOutputHeight) {
        output.WriteRawTag(16);
        output.WriteInt32(OutputHeight);
      }
      if (HasRotationMode) {
        output.WriteRawTag(24);
        output.WriteEnum((int) RotationMode);
      }
      if (HasFlipVertically) {
        output.WriteRawTag(32);
        output.WriteBool(FlipVertically);
      }
      if (HasFlipHorizontally) {
        output.WriteRawTag(40);
        output.WriteBool(FlipHorizontally);
      }
      if (HasScaleMode) {
        output.WriteRawTag(48);
        output.WriteEnum((int) ScaleMode);
      }
      if (HasConstantPadding) {
        output.WriteRawTag(56);
        output.WriteBool(ConstantPadding);
      }
      if (paddingColor_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(PaddingColor);
      }
      if (HasInterpolationMode) {
        output.WriteRawTag(72);
        output.WriteEnum((int) InterpolationMode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasOutputWidth) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputWidth);
      }
      if (HasOutputHeight) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputHeight);
      }
      if (HasRotationMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RotationMode);
      }
      if (HasFlipVertically) {
        size += 1 + 1;
      }
      if (HasFlipHorizontally) {
        size += 1 + 1;
      }
      if (HasScaleMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ScaleMode);
      }
      if (HasConstantPadding) {
        size += 1 + 1;
      }
      if (paddingColor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PaddingColor);
      }
      if (HasInterpolationMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) InterpolationMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ImageTransformationCalculatorOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasOutputWidth) {
        OutputWidth = other.OutputWidth;
      }
      if (other.HasOutputHeight) {
        OutputHeight = other.OutputHeight;
      }
      if (other.HasRotationMode) {
        RotationMode = other.RotationMode;
      }
      if (other.HasFlipVertically) {
        FlipVertically = other.FlipVertically;
      }
      if (other.HasFlipHorizontally) {
        FlipHorizontally = other.FlipHorizontally;
      }
      if (other.HasScaleMode) {
        ScaleMode = other.ScaleMode;
      }
      if (other.HasConstantPadding) {
        ConstantPadding = other.ConstantPadding;
      }
      if (other.paddingColor_ != null) {
        if (paddingColor_ == null) {
          PaddingColor = new global::Mediapipe.ImageTransformationCalculatorOptions.Types.Color();
        }
        PaddingColor.MergeFrom(other.PaddingColor);
      }
      if (other.HasInterpolationMode) {
        InterpolationMode = other.InterpolationMode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OutputWidth = input.ReadInt32();
            break;
          }
          case 16: {
            OutputHeight = input.ReadInt32();
            break;
          }
          case 24: {
            RotationMode = (global::Mediapipe.RotationMode.Types.Mode) input.ReadEnum();
            break;
          }
          case 32: {
            FlipVertically = input.ReadBool();
            break;
          }
          case 40: {
            FlipHorizontally = input.ReadBool();
            break;
          }
          case 48: {
            ScaleMode = (global::Mediapipe.ScaleMode.Types.Mode) input.ReadEnum();
            break;
          }
          case 56: {
            ConstantPadding = input.ReadBool();
            break;
          }
          case 66: {
            if (paddingColor_ == null) {
              PaddingColor = new global::Mediapipe.ImageTransformationCalculatorOptions.Types.Color();
            }
            input.ReadMessage(PaddingColor);
            break;
          }
          case 72: {
            InterpolationMode = (global::Mediapipe.ImageTransformationCalculatorOptions.Types.InterpolationMode) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OutputWidth = input.ReadInt32();
            break;
          }
          case 16: {
            OutputHeight = input.ReadInt32();
            break;
          }
          case 24: {
            RotationMode = (global::Mediapipe.RotationMode.Types.Mode) input.ReadEnum();
            break;
          }
          case 32: {
            FlipVertically = input.ReadBool();
            break;
          }
          case 40: {
            FlipHorizontally = input.ReadBool();
            break;
          }
          case 48: {
            ScaleMode = (global::Mediapipe.ScaleMode.Types.Mode) input.ReadEnum();
            break;
          }
          case 56: {
            ConstantPadding = input.ReadBool();
            break;
          }
          case 66: {
            if (paddingColor_ == null) {
              PaddingColor = new global::Mediapipe.ImageTransformationCalculatorOptions.Types.Color();
            }
            input.ReadMessage(PaddingColor);
            break;
          }
          case 72: {
            InterpolationMode = (global::Mediapipe.ImageTransformationCalculatorOptions.Types.InterpolationMode) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ImageTransformationCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Interpolation method to use. Note that on CPU when LINEAR is specified,
      /// INTER_LINEAR is used for upscaling and INTER_AREA is used for downscaling.
      /// </summary>
      public enum InterpolationMode {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("LINEAR")] Linear = 1,
        [pbr::OriginalName("NEAREST")] Nearest = 2,
      }

      /// <summary>
      /// RGB values in range of 0 - 255
      /// </summary>
      public sealed partial class Color : pb::IMessage<Color>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Color> _parser = new pb::MessageParser<Color>(() => new Color());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Color> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mediapipe.ImageTransformationCalculatorOptions.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Color() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Color(Color other) : this() {
          _hasBits0 = other._hasBits0;
          red_ = other.red_;
          green_ = other.green_;
          blue_ = other.blue_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Color Clone() {
          return new Color(this);
        }

        /// <summary>Field number for the "red" field.</summary>
        public const int RedFieldNumber = 1;
        private readonly static int RedDefaultValue = 0;

        private int red_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Red {
          get { if ((_hasBits0 & 1) != 0) { return red_; } else { return RedDefaultValue; } }
          set {
            _hasBits0 |= 1;
            red_ = value;
          }
        }
        /// <summary>Gets whether the "red" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasRed {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "red" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearRed() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "green" field.</summary>
        public const int GreenFieldNumber = 2;
        private readonly static int GreenDefaultValue = 0;

        private int green_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Green {
          get { if ((_hasBits0 & 2) != 0) { return green_; } else { return GreenDefaultValue; } }
          set {
            _hasBits0 |= 2;
            green_ = value;
          }
        }
        /// <summary>Gets whether the "green" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasGreen {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "green" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearGreen() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "blue" field.</summary>
        public const int BlueFieldNumber = 3;
        private readonly static int BlueDefaultValue = 0;

        private int blue_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Blue {
          get { if ((_hasBits0 & 4) != 0) { return blue_; } else { return BlueDefaultValue; } }
          set {
            _hasBits0 |= 4;
            blue_ = value;
          }
        }
        /// <summary>Gets whether the "blue" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasBlue {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "blue" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearBlue() {
          _hasBits0 &= ~4;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Color);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Color other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Red != other.Red) return false;
          if (Green != other.Green) return false;
          if (Blue != other.Blue) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasRed) hash ^= Red.GetHashCode();
          if (HasGreen) hash ^= Green.GetHashCode();
          if (HasBlue) hash ^= Blue.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasRed) {
            output.WriteRawTag(8);
            output.WriteInt32(Red);
          }
          if (HasGreen) {
            output.WriteRawTag(16);
            output.WriteInt32(Green);
          }
          if (HasBlue) {
            output.WriteRawTag(24);
            output.WriteInt32(Blue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasRed) {
            output.WriteRawTag(8);
            output.WriteInt32(Red);
          }
          if (HasGreen) {
            output.WriteRawTag(16);
            output.WriteInt32(Green);
          }
          if (HasBlue) {
            output.WriteRawTag(24);
            output.WriteInt32(Blue);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasRed) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Red);
          }
          if (HasGreen) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Green);
          }
          if (HasBlue) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Blue);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Color other) {
          if (other == null) {
            return;
          }
          if (other.HasRed) {
            Red = other.Red;
          }
          if (other.HasGreen) {
            Green = other.Green;
          }
          if (other.HasBlue) {
            Blue = other.Blue;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Red = input.ReadInt32();
                break;
              }
              case 16: {
                Green = input.ReadInt32();
                break;
              }
              case 24: {
                Blue = input.ReadInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Red = input.ReadInt32();
                break;
              }
              case 16: {
                Green = input.ReadInt32();
                break;
              }
              case 24: {
                Blue = input.ReadInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

    #region Extensions
    /// <summary>Container for extensions for other messages declared in the ImageTransformationCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Extensions {
      public static readonly pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.ImageTransformationCalculatorOptions> Ext =
        new pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.ImageTransformationCalculatorOptions>(251952830, pb::FieldCodec.ForMessage(2015622642, global::Mediapipe.ImageTransformationCalculatorOptions.Parser));
    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
