// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/calculators/tensor/tensors_to_landmarks_calculator.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/calculators/tensor/tensors_to_landmarks_calculator.proto</summary>
  public static partial class TensorsToLandmarksCalculatorReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/calculators/tensor/tensors_to_landmarks_calculator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TensorsToLandmarksCalculatorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CkJtZWRpYXBpcGUvY2FsY3VsYXRvcnMvdGVuc29yL3RlbnNvcnNfdG9fbGFu",
            "ZG1hcmtzX2NhbGN1bGF0b3IucHJvdG8SCW1lZGlhcGlwZRokbWVkaWFwaXBl",
            "L2ZyYW1ld29yay9jYWxjdWxhdG9yLnByb3RvIo8ECiNUZW5zb3JzVG9MYW5k",
            "bWFya3NDYWxjdWxhdG9yT3B0aW9ucxIVCg1udW1fbGFuZG1hcmtzGAEgASgF",
            "EhkKEWlucHV0X2ltYWdlX3dpZHRoGAIgASgFEhoKEmlucHV0X2ltYWdlX2hl",
            "aWdodBgDIAEoBRIeCg9mbGlwX3ZlcnRpY2FsbHkYBCABKAg6BWZhbHNlEiAK",
            "EWZsaXBfaG9yaXpvbnRhbGx5GAYgASgIOgVmYWxzZRIWCgtub3JtYWxpemVf",
            "ehgFIAEoAjoBMRJeChV2aXNpYmlsaXR5X2FjdGl2YXRpb24YByABKA4yOS5t",
            "ZWRpYXBpcGUuVGVuc29yc1RvTGFuZG1hcmtzQ2FsY3VsYXRvck9wdGlvbnMu",
            "QWN0aXZhdGlvbjoETk9ORRJcChNwcmVzZW5jZV9hY3RpdmF0aW9uGAggASgO",
            "MjkubWVkaWFwaXBlLlRlbnNvcnNUb0xhbmRtYXJrc0NhbGN1bGF0b3JPcHRp",
            "b25zLkFjdGl2YXRpb246BE5PTkUiIwoKQWN0aXZhdGlvbhIICgROT05FEAAS",
            "CwoHU0lHTU9JRBABMl0KA2V4dBIcLm1lZGlhcGlwZS5DYWxjdWxhdG9yT3B0",
            "aW9ucxiwjYygASABKAsyLi5tZWRpYXBpcGUuVGVuc29yc1RvTGFuZG1hcmtz",
            "Q2FsY3VsYXRvck9wdGlvbnM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mediapipe.CalculatorReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.TensorsToLandmarksCalculatorOptions), global::Mediapipe.TensorsToLandmarksCalculatorOptions.Parser, new[]{ "NumLandmarks", "InputImageWidth", "InputImageHeight", "FlipVertically", "FlipHorizontally", "NormalizeZ", "VisibilityActivation", "PresenceActivation" }, null, new[]{ typeof(global::Mediapipe.TensorsToLandmarksCalculatorOptions.Types.Activation) }, new pb::Extension[] { global::Mediapipe.TensorsToLandmarksCalculatorOptions.Extensions.Ext }, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TensorsToLandmarksCalculatorOptions : pb::IMessage<TensorsToLandmarksCalculatorOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TensorsToLandmarksCalculatorOptions> _parser = new pb::MessageParser<TensorsToLandmarksCalculatorOptions>(() => new TensorsToLandmarksCalculatorOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TensorsToLandmarksCalculatorOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.TensorsToLandmarksCalculatorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TensorsToLandmarksCalculatorOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TensorsToLandmarksCalculatorOptions(TensorsToLandmarksCalculatorOptions other) : this() {
      _hasBits0 = other._hasBits0;
      numLandmarks_ = other.numLandmarks_;
      inputImageWidth_ = other.inputImageWidth_;
      inputImageHeight_ = other.inputImageHeight_;
      flipVertically_ = other.flipVertically_;
      flipHorizontally_ = other.flipHorizontally_;
      normalizeZ_ = other.normalizeZ_;
      visibilityActivation_ = other.visibilityActivation_;
      presenceActivation_ = other.presenceActivation_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TensorsToLandmarksCalculatorOptions Clone() {
      return new TensorsToLandmarksCalculatorOptions(this);
    }

    /// <summary>Field number for the "num_landmarks" field.</summary>
    public const int NumLandmarksFieldNumber = 1;
    private readonly static int NumLandmarksDefaultValue = 0;

    private int numLandmarks_;
    /// <summary>
    /// [Required] Number of landmarks from the output of the model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NumLandmarks {
      get { if ((_hasBits0 & 1) != 0) { return numLandmarks_; } else { return NumLandmarksDefaultValue; } }
      set {
        _hasBits0 |= 1;
        numLandmarks_ = value;
      }
    }
    /// <summary>Gets whether the "num_landmarks" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNumLandmarks {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "num_landmarks" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNumLandmarks() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "input_image_width" field.</summary>
    public const int InputImageWidthFieldNumber = 2;
    private readonly static int InputImageWidthDefaultValue = 0;

    private int inputImageWidth_;
    /// <summary>
    /// Size of the input image for the model. These options are used only when
    /// normalized landmarks are needed. Z coordinate is scaled as X assuming
    /// a weak perspective projection camera model.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InputImageWidth {
      get { if ((_hasBits0 & 2) != 0) { return inputImageWidth_; } else { return InputImageWidthDefaultValue; } }
      set {
        _hasBits0 |= 2;
        inputImageWidth_ = value;
      }
    }
    /// <summary>Gets whether the "input_image_width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInputImageWidth {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "input_image_width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInputImageWidth() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "input_image_height" field.</summary>
    public const int InputImageHeightFieldNumber = 3;
    private readonly static int InputImageHeightDefaultValue = 0;

    private int inputImageHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int InputImageHeight {
      get { if ((_hasBits0 & 4) != 0) { return inputImageHeight_; } else { return InputImageHeightDefaultValue; } }
      set {
        _hasBits0 |= 4;
        inputImageHeight_ = value;
      }
    }
    /// <summary>Gets whether the "input_image_height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInputImageHeight {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "input_image_height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInputImageHeight() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "flip_vertically" field.</summary>
    public const int FlipVerticallyFieldNumber = 4;
    private readonly static bool FlipVerticallyDefaultValue = false;

    private bool flipVertically_;
    /// <summary>
    /// Whether the detection coordinates from the input tensors should be flipped
    /// vertically (along the y-direction). This is useful, for example, when the
    /// input tensors represent detections defined with a coordinate system where
    /// the origin is at the top-left corner, whereas the desired detection
    /// representation has a bottom-left origin (e.g., in OpenGL).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FlipVertically {
      get { if ((_hasBits0 & 8) != 0) { return flipVertically_; } else { return FlipVerticallyDefaultValue; } }
      set {
        _hasBits0 |= 8;
        flipVertically_ = value;
      }
    }
    /// <summary>Gets whether the "flip_vertically" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlipVertically {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "flip_vertically" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlipVertically() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "flip_horizontally" field.</summary>
    public const int FlipHorizontallyFieldNumber = 6;
    private readonly static bool FlipHorizontallyDefaultValue = false;

    private bool flipHorizontally_;
    /// <summary>
    /// Whether the detection coordinates from the input tensors should be flipped
    /// horizontally (along the x-direction). This is useful, for example, when the
    /// input image is horizontally flipped in ImageTransformationCalculator
    /// beforehand.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FlipHorizontally {
      get { if ((_hasBits0 & 32) != 0) { return flipHorizontally_; } else { return FlipHorizontallyDefaultValue; } }
      set {
        _hasBits0 |= 32;
        flipHorizontally_ = value;
      }
    }
    /// <summary>Gets whether the "flip_horizontally" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlipHorizontally {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "flip_horizontally" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlipHorizontally() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "normalize_z" field.</summary>
    public const int NormalizeZFieldNumber = 5;
    private readonly static float NormalizeZDefaultValue = 1F;

    private float normalizeZ_;
    /// <summary>
    /// A value that Z coordinates should be divided by. This option is used only
    /// when normalized landmarks are needed. It is applied in addition to Z
    /// coordinate being re-scaled as X.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float NormalizeZ {
      get { if ((_hasBits0 & 16) != 0) { return normalizeZ_; } else { return NormalizeZDefaultValue; } }
      set {
        _hasBits0 |= 16;
        normalizeZ_ = value;
      }
    }
    /// <summary>Gets whether the "normalize_z" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasNormalizeZ {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "normalize_z" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearNormalizeZ() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "visibility_activation" field.</summary>
    public const int VisibilityActivationFieldNumber = 7;
    private readonly static global::Mediapipe.TensorsToLandmarksCalculatorOptions.Types.Activation VisibilityActivationDefaultValue = global::Mediapipe.TensorsToLandmarksCalculatorOptions.Types.Activation.None;

    private global::Mediapipe.TensorsToLandmarksCalculatorOptions.Types.Activation visibilityActivation_;
    /// <summary>
    /// Apply activation function to the tensor representing landmark visibility.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.TensorsToLandmarksCalculatorOptions.Types.Activation VisibilityActivation {
      get { if ((_hasBits0 & 64) != 0) { return visibilityActivation_; } else { return VisibilityActivationDefaultValue; } }
      set {
        _hasBits0 |= 64;
        visibilityActivation_ = value;
      }
    }
    /// <summary>Gets whether the "visibility_activation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVisibilityActivation {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "visibility_activation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVisibilityActivation() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "presence_activation" field.</summary>
    public const int PresenceActivationFieldNumber = 8;
    private readonly static global::Mediapipe.TensorsToLandmarksCalculatorOptions.Types.Activation PresenceActivationDefaultValue = global::Mediapipe.TensorsToLandmarksCalculatorOptions.Types.Activation.None;

    private global::Mediapipe.TensorsToLandmarksCalculatorOptions.Types.Activation presenceActivation_;
    /// <summary>
    /// Apply activation function to the tensor representing landmark presence.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.TensorsToLandmarksCalculatorOptions.Types.Activation PresenceActivation {
      get { if ((_hasBits0 & 128) != 0) { return presenceActivation_; } else { return PresenceActivationDefaultValue; } }
      set {
        _hasBits0 |= 128;
        presenceActivation_ = value;
      }
    }
    /// <summary>Gets whether the "presence_activation" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPresenceActivation {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "presence_activation" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPresenceActivation() {
      _hasBits0 &= ~128;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TensorsToLandmarksCalculatorOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TensorsToLandmarksCalculatorOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumLandmarks != other.NumLandmarks) return false;
      if (InputImageWidth != other.InputImageWidth) return false;
      if (InputImageHeight != other.InputImageHeight) return false;
      if (FlipVertically != other.FlipVertically) return false;
      if (FlipHorizontally != other.FlipHorizontally) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NormalizeZ, other.NormalizeZ)) return false;
      if (VisibilityActivation != other.VisibilityActivation) return false;
      if (PresenceActivation != other.PresenceActivation) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasNumLandmarks) hash ^= NumLandmarks.GetHashCode();
      if (HasInputImageWidth) hash ^= InputImageWidth.GetHashCode();
      if (HasInputImageHeight) hash ^= InputImageHeight.GetHashCode();
      if (HasFlipVertically) hash ^= FlipVertically.GetHashCode();
      if (HasFlipHorizontally) hash ^= FlipHorizontally.GetHashCode();
      if (HasNormalizeZ) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NormalizeZ);
      if (HasVisibilityActivation) hash ^= VisibilityActivation.GetHashCode();
      if (HasPresenceActivation) hash ^= PresenceActivation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasNumLandmarks) {
        output.WriteRawTag(8);
        output.WriteInt32(NumLandmarks);
      }
      if (HasInputImageWidth) {
        output.WriteRawTag(16);
        output.WriteInt32(InputImageWidth);
      }
      if (HasInputImageHeight) {
        output.WriteRawTag(24);
        output.WriteInt32(InputImageHeight);
      }
      if (HasFlipVertically) {
        output.WriteRawTag(32);
        output.WriteBool(FlipVertically);
      }
      if (HasNormalizeZ) {
        output.WriteRawTag(45);
        output.WriteFloat(NormalizeZ);
      }
      if (HasFlipHorizontally) {
        output.WriteRawTag(48);
        output.WriteBool(FlipHorizontally);
      }
      if (HasVisibilityActivation) {
        output.WriteRawTag(56);
        output.WriteEnum((int) VisibilityActivation);
      }
      if (HasPresenceActivation) {
        output.WriteRawTag(64);
        output.WriteEnum((int) PresenceActivation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasNumLandmarks) {
        output.WriteRawTag(8);
        output.WriteInt32(NumLandmarks);
      }
      if (HasInputImageWidth) {
        output.WriteRawTag(16);
        output.WriteInt32(InputImageWidth);
      }
      if (HasInputImageHeight) {
        output.WriteRawTag(24);
        output.WriteInt32(InputImageHeight);
      }
      if (HasFlipVertically) {
        output.WriteRawTag(32);
        output.WriteBool(FlipVertically);
      }
      if (HasNormalizeZ) {
        output.WriteRawTag(45);
        output.WriteFloat(NormalizeZ);
      }
      if (HasFlipHorizontally) {
        output.WriteRawTag(48);
        output.WriteBool(FlipHorizontally);
      }
      if (HasVisibilityActivation) {
        output.WriteRawTag(56);
        output.WriteEnum((int) VisibilityActivation);
      }
      if (HasPresenceActivation) {
        output.WriteRawTag(64);
        output.WriteEnum((int) PresenceActivation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasNumLandmarks) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumLandmarks);
      }
      if (HasInputImageWidth) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputImageWidth);
      }
      if (HasInputImageHeight) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InputImageHeight);
      }
      if (HasFlipVertically) {
        size += 1 + 1;
      }
      if (HasFlipHorizontally) {
        size += 1 + 1;
      }
      if (HasNormalizeZ) {
        size += 1 + 4;
      }
      if (HasVisibilityActivation) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VisibilityActivation);
      }
      if (HasPresenceActivation) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PresenceActivation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TensorsToLandmarksCalculatorOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasNumLandmarks) {
        NumLandmarks = other.NumLandmarks;
      }
      if (other.HasInputImageWidth) {
        InputImageWidth = other.InputImageWidth;
      }
      if (other.HasInputImageHeight) {
        InputImageHeight = other.InputImageHeight;
      }
      if (other.HasFlipVertically) {
        FlipVertically = other.FlipVertically;
      }
      if (other.HasFlipHorizontally) {
        FlipHorizontally = other.FlipHorizontally;
      }
      if (other.HasNormalizeZ) {
        NormalizeZ = other.NormalizeZ;
      }
      if (other.HasVisibilityActivation) {
        VisibilityActivation = other.VisibilityActivation;
      }
      if (other.HasPresenceActivation) {
        PresenceActivation = other.PresenceActivation;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NumLandmarks = input.ReadInt32();
            break;
          }
          case 16: {
            InputImageWidth = input.ReadInt32();
            break;
          }
          case 24: {
            InputImageHeight = input.ReadInt32();
            break;
          }
          case 32: {
            FlipVertically = input.ReadBool();
            break;
          }
          case 45: {
            NormalizeZ = input.ReadFloat();
            break;
          }
          case 48: {
            FlipHorizontally = input.ReadBool();
            break;
          }
          case 56: {
            VisibilityActivation = (global::Mediapipe.TensorsToLandmarksCalculatorOptions.Types.Activation) input.ReadEnum();
            break;
          }
          case 64: {
            PresenceActivation = (global::Mediapipe.TensorsToLandmarksCalculatorOptions.Types.Activation) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            NumLandmarks = input.ReadInt32();
            break;
          }
          case 16: {
            InputImageWidth = input.ReadInt32();
            break;
          }
          case 24: {
            InputImageHeight = input.ReadInt32();
            break;
          }
          case 32: {
            FlipVertically = input.ReadBool();
            break;
          }
          case 45: {
            NormalizeZ = input.ReadFloat();
            break;
          }
          case 48: {
            FlipHorizontally = input.ReadBool();
            break;
          }
          case 56: {
            VisibilityActivation = (global::Mediapipe.TensorsToLandmarksCalculatorOptions.Types.Activation) input.ReadEnum();
            break;
          }
          case 64: {
            PresenceActivation = (global::Mediapipe.TensorsToLandmarksCalculatorOptions.Types.Activation) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TensorsToLandmarksCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum Activation {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("SIGMOID")] Sigmoid = 1,
      }

    }
    #endregion

    #region Extensions
    /// <summary>Container for extensions for other messages declared in the TensorsToLandmarksCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Extensions {
      public static readonly pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.TensorsToLandmarksCalculatorOptions> Ext =
        new pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.TensorsToLandmarksCalculatorOptions>(335742640, pb::FieldCodec.ForMessage(2685941122, global::Mediapipe.TensorsToLandmarksCalculatorOptions.Parser));
    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
