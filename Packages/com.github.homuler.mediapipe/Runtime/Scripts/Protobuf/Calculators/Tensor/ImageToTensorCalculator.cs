// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: mediapipe/calculators/tensor/image_to_tensor_calculator.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Mediapipe {

  /// <summary>Holder for reflection information generated from mediapipe/calculators/tensor/image_to_tensor_calculator.proto</summary>
  public static partial class ImageToTensorCalculatorReflection {

    #region Descriptor
    /// <summary>File descriptor for mediapipe/calculators/tensor/image_to_tensor_calculator.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ImageToTensorCalculatorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cj1tZWRpYXBpcGUvY2FsY3VsYXRvcnMvdGVuc29yL2ltYWdlX3RvX3RlbnNv",
            "cl9jYWxjdWxhdG9yLnByb3RvEgltZWRpYXBpcGUaJG1lZGlhcGlwZS9mcmFt",
            "ZXdvcmsvY2FsY3VsYXRvci5wcm90bxoebWVkaWFwaXBlL2dwdS9ncHVfb3Jp",
            "Z2luLnByb3RvIqAGCh5JbWFnZVRvVGVuc29yQ2FsY3VsYXRvck9wdGlvbnMS",
            "GwoTb3V0cHV0X3RlbnNvcl93aWR0aBgBIAEoBRIcChRvdXRwdXRfdGVuc29y",
            "X2hlaWdodBgCIAEoBRIZChFrZWVwX2FzcGVjdF9yYXRpbxgDIAEoCBJZChlv",
            "dXRwdXRfdGVuc29yX2Zsb2F0X3JhbmdlGAQgASgLMjQubWVkaWFwaXBlLklt",
            "YWdlVG9UZW5zb3JDYWxjdWxhdG9yT3B0aW9ucy5GbG9hdFJhbmdlSAASVQoX",
            "b3V0cHV0X3RlbnNvcl9pbnRfcmFuZ2UYByABKAsyMi5tZWRpYXBpcGUuSW1h",
            "Z2VUb1RlbnNvckNhbGN1bGF0b3JPcHRpb25zLkludFJhbmdlSAASVwoYb3V0",
            "cHV0X3RlbnNvcl91aW50X3JhbmdlGAggASgLMjMubWVkaWFwaXBlLkltYWdl",
            "VG9UZW5zb3JDYWxjdWxhdG9yT3B0aW9ucy5VSW50UmFuZ2VIABItCgpncHVf",
            "b3JpZ2luGAUgASgOMhkubWVkaWFwaXBlLkdwdU9yaWdpbi5Nb2RlEkkKC2Jv",
            "cmRlcl9tb2RlGAYgASgOMjQubWVkaWFwaXBlLkltYWdlVG9UZW5zb3JDYWxj",
            "dWxhdG9yT3B0aW9ucy5Cb3JkZXJNb2RlGiYKCkZsb2F0UmFuZ2USCwoDbWlu",
            "GAEgASgCEgsKA21heBgCIAEoAhokCghJbnRSYW5nZRILCgNtaW4YASABKAMS",
            "CwoDbWF4GAIgASgDGiUKCVVJbnRSYW5nZRILCgNtaW4YASABKAQSCwoDbWF4",
            "GAIgASgEIksKCkJvcmRlck1vZGUSFgoSQk9SREVSX1VOU1BFQ0lGSUVEEAAS",
            "DwoLQk9SREVSX1pFUk8QARIUChBCT1JERVJfUkVQTElDQVRFEAIyWAoDZXh0",
            "EhwubWVkaWFwaXBlLkNhbGN1bGF0b3JPcHRpb25zGNPqt58BIAEoCzIpLm1l",
            "ZGlhcGlwZS5JbWFnZVRvVGVuc29yQ2FsY3VsYXRvck9wdGlvbnNCBwoFcmFu",
            "Z2U="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Mediapipe.CalculatorReflection.Descriptor, global::Mediapipe.GpuOriginReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.ImageToTensorCalculatorOptions), global::Mediapipe.ImageToTensorCalculatorOptions.Parser, new[]{ "OutputTensorWidth", "OutputTensorHeight", "KeepAspectRatio", "OutputTensorFloatRange", "OutputTensorIntRange", "OutputTensorUintRange", "GpuOrigin", "BorderMode" }, new[]{ "Range" }, new[]{ typeof(global::Mediapipe.ImageToTensorCalculatorOptions.Types.BorderMode) }, new pb::Extension[] { global::Mediapipe.ImageToTensorCalculatorOptions.Extensions.Ext }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.ImageToTensorCalculatorOptions.Types.FloatRange), global::Mediapipe.ImageToTensorCalculatorOptions.Types.FloatRange.Parser, new[]{ "Min", "Max" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.ImageToTensorCalculatorOptions.Types.IntRange), global::Mediapipe.ImageToTensorCalculatorOptions.Types.IntRange.Parser, new[]{ "Min", "Max" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Mediapipe.ImageToTensorCalculatorOptions.Types.UIntRange), global::Mediapipe.ImageToTensorCalculatorOptions.Types.UIntRange.Parser, new[]{ "Min", "Max" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ImageToTensorCalculatorOptions : pb::IMessage<ImageToTensorCalculatorOptions>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ImageToTensorCalculatorOptions> _parser = new pb::MessageParser<ImageToTensorCalculatorOptions>(() => new ImageToTensorCalculatorOptions());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ImageToTensorCalculatorOptions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Mediapipe.ImageToTensorCalculatorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ImageToTensorCalculatorOptions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ImageToTensorCalculatorOptions(ImageToTensorCalculatorOptions other) : this() {
      _hasBits0 = other._hasBits0;
      outputTensorWidth_ = other.outputTensorWidth_;
      outputTensorHeight_ = other.outputTensorHeight_;
      keepAspectRatio_ = other.keepAspectRatio_;
      gpuOrigin_ = other.gpuOrigin_;
      borderMode_ = other.borderMode_;
      switch (other.RangeCase) {
        case RangeOneofCase.OutputTensorFloatRange:
          OutputTensorFloatRange = other.OutputTensorFloatRange.Clone();
          break;
        case RangeOneofCase.OutputTensorIntRange:
          OutputTensorIntRange = other.OutputTensorIntRange.Clone();
          break;
        case RangeOneofCase.OutputTensorUintRange:
          OutputTensorUintRange = other.OutputTensorUintRange.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ImageToTensorCalculatorOptions Clone() {
      return new ImageToTensorCalculatorOptions(this);
    }

    /// <summary>Field number for the "output_tensor_width" field.</summary>
    public const int OutputTensorWidthFieldNumber = 1;
    private readonly static int OutputTensorWidthDefaultValue = 0;

    private int outputTensorWidth_;
    /// <summary>
    /// The width and height of output tensor. The output tensor would have the
    /// input image width/height if not set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OutputTensorWidth {
      get { if ((_hasBits0 & 1) != 0) { return outputTensorWidth_; } else { return OutputTensorWidthDefaultValue; } }
      set {
        _hasBits0 |= 1;
        outputTensorWidth_ = value;
      }
    }
    /// <summary>Gets whether the "output_tensor_width" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOutputTensorWidth {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "output_tensor_width" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOutputTensorWidth() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "output_tensor_height" field.</summary>
    public const int OutputTensorHeightFieldNumber = 2;
    private readonly static int OutputTensorHeightDefaultValue = 0;

    private int outputTensorHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OutputTensorHeight {
      get { if ((_hasBits0 & 2) != 0) { return outputTensorHeight_; } else { return OutputTensorHeightDefaultValue; } }
      set {
        _hasBits0 |= 2;
        outputTensorHeight_ = value;
      }
    }
    /// <summary>Gets whether the "output_tensor_height" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOutputTensorHeight {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "output_tensor_height" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOutputTensorHeight() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "keep_aspect_ratio" field.</summary>
    public const int KeepAspectRatioFieldNumber = 3;
    private readonly static bool KeepAspectRatioDefaultValue = false;

    private bool keepAspectRatio_;
    /// <summary>
    /// If true, image region will be extracted and copied into tensor keeping
    /// region aspect ratio, which usually results in letterbox padding. Otherwise,
    /// if false, image region is stretched to fill output tensor fully.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool KeepAspectRatio {
      get { if ((_hasBits0 & 4) != 0) { return keepAspectRatio_; } else { return KeepAspectRatioDefaultValue; } }
      set {
        _hasBits0 |= 4;
        keepAspectRatio_ = value;
      }
    }
    /// <summary>Gets whether the "keep_aspect_ratio" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasKeepAspectRatio {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "keep_aspect_ratio" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearKeepAspectRatio() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "output_tensor_float_range" field.</summary>
    public const int OutputTensorFloatRangeFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.ImageToTensorCalculatorOptions.Types.FloatRange OutputTensorFloatRange {
      get { return rangeCase_ == RangeOneofCase.OutputTensorFloatRange ? (global::Mediapipe.ImageToTensorCalculatorOptions.Types.FloatRange) range_ : null; }
      set {
        range_ = value;
        rangeCase_ = value == null ? RangeOneofCase.None : RangeOneofCase.OutputTensorFloatRange;
      }
    }

    /// <summary>Field number for the "output_tensor_int_range" field.</summary>
    public const int OutputTensorIntRangeFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.ImageToTensorCalculatorOptions.Types.IntRange OutputTensorIntRange {
      get { return rangeCase_ == RangeOneofCase.OutputTensorIntRange ? (global::Mediapipe.ImageToTensorCalculatorOptions.Types.IntRange) range_ : null; }
      set {
        range_ = value;
        rangeCase_ = value == null ? RangeOneofCase.None : RangeOneofCase.OutputTensorIntRange;
      }
    }

    /// <summary>Field number for the "output_tensor_uint_range" field.</summary>
    public const int OutputTensorUintRangeFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.ImageToTensorCalculatorOptions.Types.UIntRange OutputTensorUintRange {
      get { return rangeCase_ == RangeOneofCase.OutputTensorUintRange ? (global::Mediapipe.ImageToTensorCalculatorOptions.Types.UIntRange) range_ : null; }
      set {
        range_ = value;
        rangeCase_ = value == null ? RangeOneofCase.None : RangeOneofCase.OutputTensorUintRange;
      }
    }

    /// <summary>Field number for the "gpu_origin" field.</summary>
    public const int GpuOriginFieldNumber = 5;
    private readonly static global::Mediapipe.GpuOrigin.Types.Mode GpuOriginDefaultValue = global::Mediapipe.GpuOrigin.Types.Mode.Default;

    private global::Mediapipe.GpuOrigin.Types.Mode gpuOrigin_;
    /// <summary>
    /// For CONVENTIONAL mode for OpenGL, input image starts at bottom and needs
    /// to be flipped vertically as tensors are expected to start at top.
    /// (DEFAULT or unset interpreted as CONVENTIONAL.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.GpuOrigin.Types.Mode GpuOrigin {
      get { if ((_hasBits0 & 8) != 0) { return gpuOrigin_; } else { return GpuOriginDefaultValue; } }
      set {
        _hasBits0 |= 8;
        gpuOrigin_ = value;
      }
    }
    /// <summary>Gets whether the "gpu_origin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasGpuOrigin {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "gpu_origin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearGpuOrigin() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "border_mode" field.</summary>
    public const int BorderModeFieldNumber = 6;
    private readonly static global::Mediapipe.ImageToTensorCalculatorOptions.Types.BorderMode BorderModeDefaultValue = global::Mediapipe.ImageToTensorCalculatorOptions.Types.BorderMode.BorderUnspecified;

    private global::Mediapipe.ImageToTensorCalculatorOptions.Types.BorderMode borderMode_;
    /// <summary>
    /// Pixel extrapolation method.
    /// When converting image to tensor it may happen that tensor needs to read
    /// pixels outside image boundaries. Border mode helps to specify how such
    /// pixels will be calculated.
    ///
    /// BORDER_REPLICATE is used by default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Mediapipe.ImageToTensorCalculatorOptions.Types.BorderMode BorderMode {
      get { if ((_hasBits0 & 16) != 0) { return borderMode_; } else { return BorderModeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        borderMode_ = value;
      }
    }
    /// <summary>Gets whether the "border_mode" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasBorderMode {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "border_mode" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearBorderMode() {
      _hasBits0 &= ~16;
    }

    private object range_;
    /// <summary>Enum of possible cases for the "range" oneof.</summary>
    public enum RangeOneofCase {
      None = 0,
      OutputTensorFloatRange = 4,
      OutputTensorIntRange = 7,
      OutputTensorUintRange = 8,
    }
    private RangeOneofCase rangeCase_ = RangeOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RangeOneofCase RangeCase {
      get { return rangeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRange() {
      rangeCase_ = RangeOneofCase.None;
      range_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ImageToTensorCalculatorOptions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ImageToTensorCalculatorOptions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OutputTensorWidth != other.OutputTensorWidth) return false;
      if (OutputTensorHeight != other.OutputTensorHeight) return false;
      if (KeepAspectRatio != other.KeepAspectRatio) return false;
      if (!object.Equals(OutputTensorFloatRange, other.OutputTensorFloatRange)) return false;
      if (!object.Equals(OutputTensorIntRange, other.OutputTensorIntRange)) return false;
      if (!object.Equals(OutputTensorUintRange, other.OutputTensorUintRange)) return false;
      if (GpuOrigin != other.GpuOrigin) return false;
      if (BorderMode != other.BorderMode) return false;
      if (RangeCase != other.RangeCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOutputTensorWidth) hash ^= OutputTensorWidth.GetHashCode();
      if (HasOutputTensorHeight) hash ^= OutputTensorHeight.GetHashCode();
      if (HasKeepAspectRatio) hash ^= KeepAspectRatio.GetHashCode();
      if (rangeCase_ == RangeOneofCase.OutputTensorFloatRange) hash ^= OutputTensorFloatRange.GetHashCode();
      if (rangeCase_ == RangeOneofCase.OutputTensorIntRange) hash ^= OutputTensorIntRange.GetHashCode();
      if (rangeCase_ == RangeOneofCase.OutputTensorUintRange) hash ^= OutputTensorUintRange.GetHashCode();
      if (HasGpuOrigin) hash ^= GpuOrigin.GetHashCode();
      if (HasBorderMode) hash ^= BorderMode.GetHashCode();
      hash ^= (int) rangeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasOutputTensorWidth) {
        output.WriteRawTag(8);
        output.WriteInt32(OutputTensorWidth);
      }
      if (HasOutputTensorHeight) {
        output.WriteRawTag(16);
        output.WriteInt32(OutputTensorHeight);
      }
      if (HasKeepAspectRatio) {
        output.WriteRawTag(24);
        output.WriteBool(KeepAspectRatio);
      }
      if (rangeCase_ == RangeOneofCase.OutputTensorFloatRange) {
        output.WriteRawTag(34);
        output.WriteMessage(OutputTensorFloatRange);
      }
      if (HasGpuOrigin) {
        output.WriteRawTag(40);
        output.WriteEnum((int) GpuOrigin);
      }
      if (HasBorderMode) {
        output.WriteRawTag(48);
        output.WriteEnum((int) BorderMode);
      }
      if (rangeCase_ == RangeOneofCase.OutputTensorIntRange) {
        output.WriteRawTag(58);
        output.WriteMessage(OutputTensorIntRange);
      }
      if (rangeCase_ == RangeOneofCase.OutputTensorUintRange) {
        output.WriteRawTag(66);
        output.WriteMessage(OutputTensorUintRange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOutputTensorWidth) {
        output.WriteRawTag(8);
        output.WriteInt32(OutputTensorWidth);
      }
      if (HasOutputTensorHeight) {
        output.WriteRawTag(16);
        output.WriteInt32(OutputTensorHeight);
      }
      if (HasKeepAspectRatio) {
        output.WriteRawTag(24);
        output.WriteBool(KeepAspectRatio);
      }
      if (rangeCase_ == RangeOneofCase.OutputTensorFloatRange) {
        output.WriteRawTag(34);
        output.WriteMessage(OutputTensorFloatRange);
      }
      if (HasGpuOrigin) {
        output.WriteRawTag(40);
        output.WriteEnum((int) GpuOrigin);
      }
      if (HasBorderMode) {
        output.WriteRawTag(48);
        output.WriteEnum((int) BorderMode);
      }
      if (rangeCase_ == RangeOneofCase.OutputTensorIntRange) {
        output.WriteRawTag(58);
        output.WriteMessage(OutputTensorIntRange);
      }
      if (rangeCase_ == RangeOneofCase.OutputTensorUintRange) {
        output.WriteRawTag(66);
        output.WriteMessage(OutputTensorUintRange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasOutputTensorWidth) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputTensorWidth);
      }
      if (HasOutputTensorHeight) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OutputTensorHeight);
      }
      if (HasKeepAspectRatio) {
        size += 1 + 1;
      }
      if (rangeCase_ == RangeOneofCase.OutputTensorFloatRange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputTensorFloatRange);
      }
      if (rangeCase_ == RangeOneofCase.OutputTensorIntRange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputTensorIntRange);
      }
      if (rangeCase_ == RangeOneofCase.OutputTensorUintRange) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OutputTensorUintRange);
      }
      if (HasGpuOrigin) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GpuOrigin);
      }
      if (HasBorderMode) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BorderMode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ImageToTensorCalculatorOptions other) {
      if (other == null) {
        return;
      }
      if (other.HasOutputTensorWidth) {
        OutputTensorWidth = other.OutputTensorWidth;
      }
      if (other.HasOutputTensorHeight) {
        OutputTensorHeight = other.OutputTensorHeight;
      }
      if (other.HasKeepAspectRatio) {
        KeepAspectRatio = other.KeepAspectRatio;
      }
      if (other.HasGpuOrigin) {
        GpuOrigin = other.GpuOrigin;
      }
      if (other.HasBorderMode) {
        BorderMode = other.BorderMode;
      }
      switch (other.RangeCase) {
        case RangeOneofCase.OutputTensorFloatRange:
          if (OutputTensorFloatRange == null) {
            OutputTensorFloatRange = new global::Mediapipe.ImageToTensorCalculatorOptions.Types.FloatRange();
          }
          OutputTensorFloatRange.MergeFrom(other.OutputTensorFloatRange);
          break;
        case RangeOneofCase.OutputTensorIntRange:
          if (OutputTensorIntRange == null) {
            OutputTensorIntRange = new global::Mediapipe.ImageToTensorCalculatorOptions.Types.IntRange();
          }
          OutputTensorIntRange.MergeFrom(other.OutputTensorIntRange);
          break;
        case RangeOneofCase.OutputTensorUintRange:
          if (OutputTensorUintRange == null) {
            OutputTensorUintRange = new global::Mediapipe.ImageToTensorCalculatorOptions.Types.UIntRange();
          }
          OutputTensorUintRange.MergeFrom(other.OutputTensorUintRange);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OutputTensorWidth = input.ReadInt32();
            break;
          }
          case 16: {
            OutputTensorHeight = input.ReadInt32();
            break;
          }
          case 24: {
            KeepAspectRatio = input.ReadBool();
            break;
          }
          case 34: {
            global::Mediapipe.ImageToTensorCalculatorOptions.Types.FloatRange subBuilder = new global::Mediapipe.ImageToTensorCalculatorOptions.Types.FloatRange();
            if (rangeCase_ == RangeOneofCase.OutputTensorFloatRange) {
              subBuilder.MergeFrom(OutputTensorFloatRange);
            }
            input.ReadMessage(subBuilder);
            OutputTensorFloatRange = subBuilder;
            break;
          }
          case 40: {
            GpuOrigin = (global::Mediapipe.GpuOrigin.Types.Mode) input.ReadEnum();
            break;
          }
          case 48: {
            BorderMode = (global::Mediapipe.ImageToTensorCalculatorOptions.Types.BorderMode) input.ReadEnum();
            break;
          }
          case 58: {
            global::Mediapipe.ImageToTensorCalculatorOptions.Types.IntRange subBuilder = new global::Mediapipe.ImageToTensorCalculatorOptions.Types.IntRange();
            if (rangeCase_ == RangeOneofCase.OutputTensorIntRange) {
              subBuilder.MergeFrom(OutputTensorIntRange);
            }
            input.ReadMessage(subBuilder);
            OutputTensorIntRange = subBuilder;
            break;
          }
          case 66: {
            global::Mediapipe.ImageToTensorCalculatorOptions.Types.UIntRange subBuilder = new global::Mediapipe.ImageToTensorCalculatorOptions.Types.UIntRange();
            if (rangeCase_ == RangeOneofCase.OutputTensorUintRange) {
              subBuilder.MergeFrom(OutputTensorUintRange);
            }
            input.ReadMessage(subBuilder);
            OutputTensorUintRange = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OutputTensorWidth = input.ReadInt32();
            break;
          }
          case 16: {
            OutputTensorHeight = input.ReadInt32();
            break;
          }
          case 24: {
            KeepAspectRatio = input.ReadBool();
            break;
          }
          case 34: {
            global::Mediapipe.ImageToTensorCalculatorOptions.Types.FloatRange subBuilder = new global::Mediapipe.ImageToTensorCalculatorOptions.Types.FloatRange();
            if (rangeCase_ == RangeOneofCase.OutputTensorFloatRange) {
              subBuilder.MergeFrom(OutputTensorFloatRange);
            }
            input.ReadMessage(subBuilder);
            OutputTensorFloatRange = subBuilder;
            break;
          }
          case 40: {
            GpuOrigin = (global::Mediapipe.GpuOrigin.Types.Mode) input.ReadEnum();
            break;
          }
          case 48: {
            BorderMode = (global::Mediapipe.ImageToTensorCalculatorOptions.Types.BorderMode) input.ReadEnum();
            break;
          }
          case 58: {
            global::Mediapipe.ImageToTensorCalculatorOptions.Types.IntRange subBuilder = new global::Mediapipe.ImageToTensorCalculatorOptions.Types.IntRange();
            if (rangeCase_ == RangeOneofCase.OutputTensorIntRange) {
              subBuilder.MergeFrom(OutputTensorIntRange);
            }
            input.ReadMessage(subBuilder);
            OutputTensorIntRange = subBuilder;
            break;
          }
          case 66: {
            global::Mediapipe.ImageToTensorCalculatorOptions.Types.UIntRange subBuilder = new global::Mediapipe.ImageToTensorCalculatorOptions.Types.UIntRange();
            if (rangeCase_ == RangeOneofCase.OutputTensorUintRange) {
              subBuilder.MergeFrom(OutputTensorUintRange);
            }
            input.ReadMessage(subBuilder);
            OutputTensorUintRange = subBuilder;
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ImageToTensorCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// Pixel extrapolation methods. See @border_mode.
      /// </summary>
      public enum BorderMode {
        [pbr::OriginalName("BORDER_UNSPECIFIED")] BorderUnspecified = 0,
        [pbr::OriginalName("BORDER_ZERO")] BorderZero = 1,
        [pbr::OriginalName("BORDER_REPLICATE")] BorderReplicate = 2,
      }

      /// <summary>
      /// Range of float values [min, max].
      /// min, must be strictly less than max.
      /// </summary>
      public sealed partial class FloatRange : pb::IMessage<FloatRange>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<FloatRange> _parser = new pb::MessageParser<FloatRange>(() => new FloatRange());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<FloatRange> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mediapipe.ImageToTensorCalculatorOptions.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public FloatRange() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public FloatRange(FloatRange other) : this() {
          _hasBits0 = other._hasBits0;
          min_ = other.min_;
          max_ = other.max_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public FloatRange Clone() {
          return new FloatRange(this);
        }

        /// <summary>Field number for the "min" field.</summary>
        public const int MinFieldNumber = 1;
        private readonly static float MinDefaultValue = 0F;

        private float min_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Min {
          get { if ((_hasBits0 & 1) != 0) { return min_; } else { return MinDefaultValue; } }
          set {
            _hasBits0 |= 1;
            min_ = value;
          }
        }
        /// <summary>Gets whether the "min" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasMin {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "min" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearMin() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "max" field.</summary>
        public const int MaxFieldNumber = 2;
        private readonly static float MaxDefaultValue = 0F;

        private float max_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public float Max {
          get { if ((_hasBits0 & 2) != 0) { return max_; } else { return MaxDefaultValue; } }
          set {
            _hasBits0 |= 2;
            max_ = value;
          }
        }
        /// <summary>Gets whether the "max" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasMax {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "max" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearMax() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as FloatRange);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(FloatRange other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Min, other.Min)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Max, other.Max)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasMin) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Min);
          if (HasMax) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Max);
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasMin) {
            output.WriteRawTag(13);
            output.WriteFloat(Min);
          }
          if (HasMax) {
            output.WriteRawTag(21);
            output.WriteFloat(Max);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasMin) {
            output.WriteRawTag(13);
            output.WriteFloat(Min);
          }
          if (HasMax) {
            output.WriteRawTag(21);
            output.WriteFloat(Max);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasMin) {
            size += 1 + 4;
          }
          if (HasMax) {
            size += 1 + 4;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(FloatRange other) {
          if (other == null) {
            return;
          }
          if (other.HasMin) {
            Min = other.Min;
          }
          if (other.HasMax) {
            Max = other.Max;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 13: {
                Min = input.ReadFloat();
                break;
              }
              case 21: {
                Max = input.ReadFloat();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 13: {
                Min = input.ReadFloat();
                break;
              }
              case 21: {
                Max = input.ReadFloat();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Range of int values [min, max].
      /// min, must be strictly less than max.
      /// Please note that IntRange is supported for CPU tensors only.
      /// </summary>
      public sealed partial class IntRange : pb::IMessage<IntRange>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<IntRange> _parser = new pb::MessageParser<IntRange>(() => new IntRange());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<IntRange> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mediapipe.ImageToTensorCalculatorOptions.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public IntRange() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public IntRange(IntRange other) : this() {
          _hasBits0 = other._hasBits0;
          min_ = other.min_;
          max_ = other.max_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public IntRange Clone() {
          return new IntRange(this);
        }

        /// <summary>Field number for the "min" field.</summary>
        public const int MinFieldNumber = 1;
        private readonly static long MinDefaultValue = 0L;

        private long min_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long Min {
          get { if ((_hasBits0 & 1) != 0) { return min_; } else { return MinDefaultValue; } }
          set {
            _hasBits0 |= 1;
            min_ = value;
          }
        }
        /// <summary>Gets whether the "min" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasMin {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "min" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearMin() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "max" field.</summary>
        public const int MaxFieldNumber = 2;
        private readonly static long MaxDefaultValue = 0L;

        private long max_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public long Max {
          get { if ((_hasBits0 & 2) != 0) { return max_; } else { return MaxDefaultValue; } }
          set {
            _hasBits0 |= 2;
            max_ = value;
          }
        }
        /// <summary>Gets whether the "max" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasMax {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "max" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearMax() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as IntRange);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(IntRange other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Min != other.Min) return false;
          if (Max != other.Max) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasMin) hash ^= Min.GetHashCode();
          if (HasMax) hash ^= Max.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasMin) {
            output.WriteRawTag(8);
            output.WriteInt64(Min);
          }
          if (HasMax) {
            output.WriteRawTag(16);
            output.WriteInt64(Max);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasMin) {
            output.WriteRawTag(8);
            output.WriteInt64(Min);
          }
          if (HasMax) {
            output.WriteRawTag(16);
            output.WriteInt64(Max);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasMin) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Min);
          }
          if (HasMax) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(Max);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(IntRange other) {
          if (other == null) {
            return;
          }
          if (other.HasMin) {
            Min = other.Min;
          }
          if (other.HasMax) {
            Max = other.Max;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Min = input.ReadInt64();
                break;
              }
              case 16: {
                Max = input.ReadInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Min = input.ReadInt64();
                break;
              }
              case 16: {
                Max = input.ReadInt64();
                break;
              }
            }
          }
        }
        #endif

      }

      /// <summary>
      /// Range of uint values [min, max].
      /// min, must be strictly less than max.
      /// Please note that UIntRange is supported for CPU tensors only.
      /// </summary>
      public sealed partial class UIntRange : pb::IMessage<UIntRange>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<UIntRange> _parser = new pb::MessageParser<UIntRange>(() => new UIntRange());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<UIntRange> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Mediapipe.ImageToTensorCalculatorOptions.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UIntRange() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UIntRange(UIntRange other) : this() {
          _hasBits0 = other._hasBits0;
          min_ = other.min_;
          max_ = other.max_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public UIntRange Clone() {
          return new UIntRange(this);
        }

        /// <summary>Field number for the "min" field.</summary>
        public const int MinFieldNumber = 1;
        private readonly static ulong MinDefaultValue = 0UL;

        private ulong min_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ulong Min {
          get { if ((_hasBits0 & 1) != 0) { return min_; } else { return MinDefaultValue; } }
          set {
            _hasBits0 |= 1;
            min_ = value;
          }
        }
        /// <summary>Gets whether the "min" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasMin {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "min" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearMin() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "max" field.</summary>
        public const int MaxFieldNumber = 2;
        private readonly static ulong MaxDefaultValue = 0UL;

        private ulong max_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public ulong Max {
          get { if ((_hasBits0 & 2) != 0) { return max_; } else { return MaxDefaultValue; } }
          set {
            _hasBits0 |= 2;
            max_ = value;
          }
        }
        /// <summary>Gets whether the "max" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool HasMax {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "max" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void ClearMax() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as UIntRange);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(UIntRange other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Min != other.Min) return false;
          if (Max != other.Max) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (HasMin) hash ^= Min.GetHashCode();
          if (HasMax) hash ^= Max.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasMin) {
            output.WriteRawTag(8);
            output.WriteUInt64(Min);
          }
          if (HasMax) {
            output.WriteRawTag(16);
            output.WriteUInt64(Max);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasMin) {
            output.WriteRawTag(8);
            output.WriteUInt64(Min);
          }
          if (HasMax) {
            output.WriteRawTag(16);
            output.WriteUInt64(Max);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (HasMin) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Min);
          }
          if (HasMax) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Max);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(UIntRange other) {
          if (other == null) {
            return;
          }
          if (other.HasMin) {
            Min = other.Min;
          }
          if (other.HasMax) {
            Max = other.Max;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Min = input.ReadUInt64();
                break;
              }
              case 16: {
                Max = input.ReadUInt64();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Min = input.ReadUInt64();
                break;
              }
              case 16: {
                Max = input.ReadUInt64();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

    #region Extensions
    /// <summary>Container for extensions for other messages declared in the ImageToTensorCalculatorOptions message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Extensions {
      public static readonly pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.ImageToTensorCalculatorOptions> Ext =
        new pb::Extension<global::Mediapipe.CalculatorOptions, global::Mediapipe.ImageToTensorCalculatorOptions>(334361939, pb::FieldCodec.ForMessage(2674895514, global::Mediapipe.ImageToTensorCalculatorOptions.Parser));
    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
