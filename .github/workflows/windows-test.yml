name: Run Tests on Windows
on:
  workflow_call:
    inputs:
      ref:
        type: string
    secrets:
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true
      UNITY_TOTP_KEY:
        required: true
jobs:
  build:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      # Cache built libraries
      - name: Concat native library source files
        run: |
          find WORKSPACE packages.config build.py mediapipe_api/ third_party/ -type f | sort | xargs cat > cache_key.txt
        shell: bash

      - name: Cache libraries
        id: cache-libs
        uses: actions/cache@v4
        with:
          path: |
            Packages/com.github.homuler.mediapipe/Runtime/Plugins/mediapipe_c.dll
            Packages/com.github.homuler.mediapipe/Runtime/Plugins/Protobuf/*.dll
            Packages/com.github.homuler.mediapipe/Runtime/Scripts/Protobuf/**/*.cs
            Packages/com.github.homuler.mediapipe/PackageResources/MediaPipe/*.bytes
            Packages/com.github.homuler.mediapipe/PackageResources/MediaPipe/*.txt
          key: libs-windows-2019-v1-${{ hashFiles('cache_key.txt') }}

      - name: Remove cache_key.txt
        run: |
          rm cache_key.txt
        shell: cmd

      # Setup build tools
      - uses: msys2/setup-msys2@v2
        if: steps.cache-libs.outputs.cache-hit != 'true'
        with:
          msystem: MINGW64
          update: true
          install: git patch unzip zip

      # Setup Python
      - uses: actions/setup-python@v5
        if: steps.cache-libs.outputs.cache-hit != 'true'
        with:
          python-version: '3.10'
      - name: Install NumPy
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: pip install --no-cache-dir --user numpy

      - name: Build
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: |
          set ANDROID_NDK_HOME=
          python build.py build --desktop cpu --opencv cmake -vv
        shell: cmd

      - name: Shutdown Bazel
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: |
          bazel --output_user_root=C:\_bzl shutdown
        shell: cmd

      - name: Package
        run: |
          tar cvf artifacts.tar Packages/com.github.homuler.mediapipe
        shell: cmd
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-package
          path: artifacts.tar
          retention-days: 1

  test:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-2019
        unity:
          - { version: "2022.3.16f1", changeset: "d2c21f0ef2f1" }
          - { version: "2021.3.33f1", changeset: "ee5a2aa03ab2" }
          - { version: "2020.3.44f1", changeset: "7f159b6136da" }
    steps:
      - name: Install UnityHub
        uses: crazy-max/ghaction-chocolatey@v3
        with:
          args: install unity-hub -y
      - name: Install UnityEditor
        run: |
          Start-Process -NoNewWindow -Wait -PassThru "C:\Program Files\Unity Hub\Unity Hub.exe" -ArgumentList "-- --headless install --version ${{ matrix.unity.version }} --changeset ${{ matrix.unity.changeset }}"
          exit 0

      - name: Generate a license activation file
        run: |
          Start-Process -NoNewWindow -Wait -PassThru "C:\Program Files\Unity\Hub\Editor\${{ matrix.unity.version }}\Editor\Unity.exe" -ArgumentList "-quit -batchmode -createManualActivationFile -logfile"
          exit 0
        timeout-minutes: 1
      - name: Request a Unity license file
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_TOTP_KEY: ${{ secrets.UNITY_TOTP_KEY }}
        run: |
          npm install -g unity-verify-code
          git clone https://github.com/homuler/unity-license-activate.git
          cd unity-license-activate
          npm install
          cd ..
          npm install -g ./unity-license-activate
          unity-license-activate "$env:UNITY_EMAIL" "$env:UNITY_PASSWORD" Unity_v${{ matrix.unity.version }}.alf --authenticator-key "$env:UNITY_TOTP_KEY"
      - name: Activate License
        run: |
          $ulf_file = Get-Item Unity_*.ulf
          $process = Start-Process -NoNewWindow -Wait -PassThru "C:\Program Files\Unity\Hub\Editor\${{ matrix.unity.version }}\Editor\Unity.exe" -ArgumentList "-batchmode -nographics -logFile -quit -manualLicenseFile $ulf_file"
          $ulf_file.Delete()

          if ($process.ExitCode -ne 1)
          {
            exit $process.ExitCode
          }
        timeout-minutes: 1

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          name: windows-package

      - name: Create a dummy project
        run: |
          Start-Process -NoNewWindow -Wait -PassThru "C:\Program Files\Unity\Hub\Editor\${{ matrix.unity.version }}\Editor\Unity.exe" -ArgumentList "-quit -batchmode -createProject DummyProject -logfile"
          mv artifacts.tar DummyProject
          cd DummyProject
          tar xvf artifacts.tar
        timeout-minutes: 8

      - uses: actions/cache@v4
        with:
          path: DummyProject/Library
          key: Library-DummyProject-${{ matrix.os }}-${{ matrix.unity.version }}-v1

      - name: Run tests
        env:
          ARTIFACTS_PATH: testResults
        run: |
          $process = Start-Process -NoNewWindow -Wait -PassThru "C:\Program Files\Unity\Hub\Editor\${{ matrix.unity.version }}\Editor\Unity.exe" `
            -ArgumentList `
            "-batchmode -nographics `
            -logFile `
            -projectPath DummyProject `
            -testResults $env:ARTIFACTS_PATH/results.xml `
            -runTests `
            -testPlatform EditMode `
            -testCategory !GpuOnly;!SignalAbort"
          exit $process.ExitCode
        timeout-minutes: 3

      - name: Cat results.xml
        env:
          RESULT_FILE_PATH: DummyProject\testResults\results.xml
        if: always()
        run: |
          if (Test-Path $env:RESULT_FILE_PATH -PathType Leaf) {
            cat $env:RESULT_FILE_PATH
          }

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test results for ${{ matrix.unity.version }} on ${{ matrix.os }}
          path: DummyProject\testResults
          retention-days: 7

  post-test:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: geekyeggo/delete-artifact@v4
        with:
          name: windows-package
          failOnError: false
