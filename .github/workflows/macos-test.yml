name: Run Tests on macOS
on:
  workflow_call:
    inputs:
      ref:
        type: string
      is_master:
        type: boolean
        default: false
    secrets:
      UNITY_EMAIL:
        required: true
      UNITY_PASSWORD:
        required: true
      UNITY_TOTP_KEY:
        required: true
jobs:
  build:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      # Cache built libraries
      - name: Concat native library source files
        run: |
          find WORKSPACE packages.config build.py mediapipe_api/ third_party/ -type f | sort | xargs cat > cache_key.txt

      - name: Cache libraries
        id: cache-libs
        uses: actions/cache@v4
        with:
          path: |
            Packages/com.github.homuler.mediapipe/Runtime/Plugins/libmediapipe_c.dylib
            Packages/com.github.homuler.mediapipe/Runtime/Plugins/Protobuf/*.dll
            Packages/com.github.homuler.mediapipe/Runtime/Scripts/Protobuf/**/*.cs
            Packages/com.github.homuler.mediapipe/PackageResources/MediaPipe/*.bytes
            Packages/com.github.homuler.mediapipe/PackageResources/MediaPipe/*.txt
          key: libs-macos-11-v1-${{ hashFiles('cache_key.txt') }}

      # Setup build tools
      - name: Mount bazel cache
        if: steps.cache-libs.outputs.cache-hit != 'true'
        uses: actions/cache/restore@v4
        with:
          path: /private/var/tmp/_bazel_runner
          key: bazel-macos-11-v1-${{ hashFiles('WORKSPACE') }}-${{ hashFiles('cache_key.txt') }}
          restore-keys: |
            bazel-macos-11-v1-${{ hashFiles('WORKSPACE') }}-
            bazel-macos-11-v1-

      - name: Remove cache_key.txt
        run: |
          rm cache_key.txt

      # Setup Python
      - uses: actions/setup-python@v5
        if: steps.cache-libs.outputs.cache-hit != 'true'
        with:
          python-version: '3.10'
      - name: Install NumPy
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: pip install --no-cache-dir --user numpy

      - name: Build
        if: steps.cache-libs.outputs.cache-hit != 'true'
        run: |
          unset ANDROID_NDK_HOME
          python build.py build --desktop cpu --opencv cmake -vv

      - name: Package
        run: |
          tar cvf artifacts.tar Packages/com.github.homuler.mediapipe
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-package
          path: artifacts.tar
          retention-days: 1

      - name: Cache bazel
        if: inputs.is_master && steps.cache-libs.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: /private/var/tmp/_bazel_runner
          key: bazel-macos-11-v1-${{ hashFiles('WORKSPACE') }}-${{ hashFiles('cache_key.txt') }}

  test:
    runs-on: ${{ matrix.os }}
    needs: build
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-11
          - macos-12
        unity:
          - { version: "2022.3.16f1", changeset: "d2c21f0ef2f1" }
          - { version: "2021.3.33f1", changeset: "ee5a2aa03ab2" }
          - { version: "2020.3.44f1", changeset: "7f159b6136da" }
        exclude:
          - os: macos-12
            unity: { version: "2020.3.44f1", changeset: "7f159b6136da" }
    steps:
      - name: Install UnityEditor
        run: |
          curl -LO https://beta.unity3d.com/download/${{ matrix.unity.changeset }}/MacEditorInstaller/Unity.pkg
          sudo installer -package Unity.pkg -target /

      - name: Generate a license activation file
        run: |
          /Applications/Unity/Unity.app/Contents/MacOS/Unity -quit -batchmode -createManualActivationFile -logFile || true
      - name: Request a Unity license file
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_TOTP_KEY: ${{ secrets.UNITY_TOTP_KEY }}
        run: |
          npm install -g unity-verify-code
          git clone https://github.com/homuler/unity-license-activate.git
          cd unity-license-activate
          npm install
          cd ..
          npm install -g ./unity-license-activate
          unity-license-activate "${UNITY_EMAIL}" "${UNITY_PASSWORD}" Unity_v${{ matrix.unity.version }}.alf --authenticator-key "${UNITY_TOTP_KEY}"
      - name: Activate License
        run: |
          /Applications/Unity/Unity.app/Contents/MacOS/Unity -quit -batchmode -nographics -logFile -manualLicenseFile $(ls Unity_*.ulf) || true
          rm Unity_*.ulf

      - name: Download built artifacts
        uses: actions/download-artifact@v4
        with:
          name: macos-package

      - name: Create a dummy project
        run: |
          /Applications/Unity/Unity.app/Contents/MacOS/Unity -quit -batchmode -nographics -createProject DummyProject -logFile
          mv artifacts.tar DummyProject
          cd DummyProject
          tar xvf artifacts.tar

      - uses: actions/cache@v4
        with:
          path: DummyProject/Library
          key: Library-DummyProject-${{ matrix.os }}-${{ matrix.unity.version }}-v1

      - name: Run tests
        env:
          ARTIFACTS_PATH: testResults
        run: |
          /Applications/Unity/Unity.app/Contents/MacOS/Unity -batchmode \
            -nographics \
            -logFile \
            -projectPath DummyProject \
            -testResults ${ARTIFACTS_PATH}/results.xml \
            -runTests \
            -testPlatform EditMode \
            -testCategory !GpuOnly

      - name: Cat results.xml
        env:
          RESULT_FILE_PATH: DummyProject/testResults/results.xml
        if: always()
        run: |
          [ -f $RESULT_FILE_PATH ] && cat ${RESULT_FILE_PATH}

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Test results for ${{ matrix.unity.version }} on ${{ matrix.os }}
          path: DummyProject/testResults
          retention-days: 7

  post-test:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: geekyeggo/delete-artifact@v4
        with:
          name: macos-package
          failOnError: false
