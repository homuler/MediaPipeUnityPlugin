name: Package
on:
  workflow_call:
    inputs:
      ref:
        type: string
        required: true
      packageName:
        type: string
        default: package
      bazelBuildArgs:
        type: string
        description: The value for the "--bazel_build_opts" option, which is commonly used
      linuxBuildArgs:
        type: string
        description: The build command options to be used for Linux Build
      androidBuildArgs:
        type: string
        description: The build command options to be used for Android Build
      macosBuildArgs:
        type: string
        description: The build command options to be used for macOS Build
      iosBuildArgs:
        type: string
        description: The build command options to be used for iOS Build
      windowsBuildArgs:
        type: string
        description: The build command options to be used for Windows Build
    secrets:
      UNITY_EMAIL:
        required: false
      UNITY_PASSWORD:
        required: false
      UNITY_TOTP_KEY:
        required: false

jobs:
  print-inputs:
    runs-on: ubuntu-latest
    steps:
      - name: Print inputs for debug
        run: |
          echo 'inputs.ref=${{ inputs.ref }}'
          echo 'inputs.bazelBuildArgs=${{ inputs.bazelBuildArgs }}'
          echo 'inputs.linuxBuildArgs=${{ inputs.linuxBuildArgs }}'
          echo 'inputs.androidBuildArgs=${{ inputs.androidBuildArgs }}'
          echo 'inputs.macosBuildArgs=${{ inputs.macosBuildArgs }}'
          echo 'inputs.iosBuildArgs=${{ inputs.iosBuildArgs }}'
          echo 'inputs.windowsBuildArgs=${{ inputs.windowsBuildArgs }}'

  linux-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Build a Docker image
        run: |
          docker build --no-cache --build-arg UID=$(id -u) -t mediapipe_unity:latest . -f docker/linux/x86_64/Dockerfile

      - name: Remove unused files to free up space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android

      - name: Build
        run: |
          docker run --rm \
            --mount type=bind,src=$PWD/Packages,dst=/home/mediapipe/Packages \
            --mount type=bind,src=$PWD/Assets,dst=/home/mediapipe/Assets \
            mediapipe_unity:latest \
            python build.py build --bazel_build_opts="${{ inputs.bazelBuildArgs }}" ${{ inputs.linuxBuildArgs }} -vv

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.packageName }}-base
          path: .

  android-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Build a Docker image
        if: ${{ inputs.androidBuildArgs != '' }}
        run: |
          docker build --no-cache --build-arg UID=$(id -u) -t mediapipe_unity:latest . -f docker/linux/x86_64/Dockerfile

      - name: Remove unused files to free up space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android

      - name: Build
        if: ${{ inputs.androidBuildArgs != '' }}
        run: |
          docker run --rm \
            --mount type=bind,src=$PWD/Packages,dst=/home/mediapipe/Packages \
            --mount type=bind,src=$PWD/Assets,dst=/home/mediapipe/Assets \
            mediapipe_unity:latest \
            python build.py build --bazel_build_opts="${{ inputs.bazelBuildArgs }}" ${{ inputs.androidBuildArgs }} -vv

      - name: Upload mediapipe_android.aar
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.packageName }}-Android
          path: Packages/com.github.homuler.mediapipe/Runtime/Plugins/Android

  macos-build:
    runs-on: macos-15
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Install NuGet
        run: brew install nuget

      # Setup Python
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install NumPy
        run: pip install --no-cache-dir --user numpy

      - name: Build libmediapipe_c.dylib
        if: ${{ inputs.macosBuildArgs != '' }}
        run: |
          unset ANDROID_NDK_HOME
          python build.py build --bazel_build_opts="${{ inputs.bazelBuildArgs }}" ${{ inputs.macosBuildArgs }} -vv

      - name: Upload libmediapipe_c.dylib
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.packageName }}-macOS-Plugins
          path: Packages/com.github.homuler.mediapipe/Runtime/Plugins/libmediapipe_c.dylib*

  ios-build:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      # Setup Python
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install NumPy
        run: pip install --no-cache-dir --user numpy

      - name: Build MediaPipeUnity.framework
        if: ${{ inputs.iosBuildArgs != '' }}
        run: |
          unset ANDROID_NDK_HOME
          python build.py build --bazel_build_opts="${{ inputs.bazelBuildArgs }}" ${{ inputs.iosBuildArgs }} -vv

      - name: Upload MediaPipeUnity.framework
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.packageName }}-iOS
          path: Packages/com.github.homuler.mediapipe/Runtime/Plugins/iOS

  windows-build:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Build a Docker image
        if: ${{ inputs.windowsBuildArgs != '' }}
        run: |
          docker build --no-cache -t mediapipe_unity:latest . -f docker/windows/x86_64/Dockerfile
        shell: cmd
        timeout-minutes: 60

      - name: Build
        if: ${{ inputs.windowsBuildArgs != '' }}
        run: |
          docker run --rm --cpus=2 --memory=8g ^
            --mount type=bind,src=%CD%\Packages,dst=C:\mediapipe\Packages ^
            --mount type=bind,src=%CD%\Assets,dst=C:\mediapipe\Assets ^
            mediapipe_unity:latest ^
            python build.py build --bazel_build_opts="${{ inputs.bazelBuildArgs }}" ${{ inputs.windowsBuildArgs }} -vv
        shell: cmd

      - name: Upload mediapipe_c.dll
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.packageName }}-Windows-Plugins
          path: Packages/com.github.homuler.mediapipe/Runtime/Plugins/mediapipe_c.dll*

  package:
    runs-on: ubuntu-latest
    needs:
      - linux-build
      - android-build
      - macos-build
      - ios-build
      - windows-build
    steps:
      - name: Check options
        run: |
          if [[ -z '${{ secrets.UNITY_EMAIL }}' ]]; then
            echo "BUILD_UNITYPACKAGE=0" >> $GITHUB_ENV
          else
            echo "BUILD_UNITYPACKAGE=1" >> $GITHUB_ENV
          fi

      # avoid "No space left on device" error
      - name: Remove unused files to free up space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android

      - name: Install UnityEditor
        if: ${{ env.BUILD_UNITYPACKAGE == '1' }}
        run: |
          sudo docker cp $(docker create --rm unityci/editor:6000.0.33f1-base-3):/opt/unity /opt/unity
          sudo chown -R $(id -u):$(id -g) /opt/unity

          echo -e '#!/bin/bash\nxvfb-run -ae /dev/stdout /opt/unity/Editor/Unity -batchmode "$@"' | sudo tee -a /usr/bin/unity-editor
          sudo chmod +x /usr/bin/unity-editor
      - name: Generate a license activation file
        if: ${{ env.BUILD_UNITYPACKAGE == '1' }}
        run: |
          unity-editor -quit -createManualActivationFile -logFile || true
      - name: Request a Unity license file
        if: ${{ env.BUILD_UNITYPACKAGE == '1' }}
        env:
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          UNITY_TOTP_KEY: ${{ secrets.UNITY_TOTP_KEY }}
        run: |
          npm install -g unity-verify-code
          git clone https://github.com/homuler/unity-license-activate.git
          cd unity-license-activate
          npm install
          cd ..
          npm install -g ./unity-license-activate
          unity-license-activate "$UNITY_EMAIL" "$UNITY_PASSWORD" Unity_v6000.0.33f1.alf --authenticator-key "$UNITY_TOTP_KEY"
          rm -rf unity-license-activate
      - name: Activate License
        if: ${{ env.BUILD_UNITYPACKAGE == '1' }}
        run: |
          unity-editor -quit -batchmode -nographics -logFile -manualLicenseFile $(ls Unity_*.ulf) || true
          rm Unity_*.alf
          rm Unity_*.ulf

      - name: Download the base package
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.packageName }}-base
      - name: Download Android libraries
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.packageName }}-Android
          path: Packages/com.github.homuler.mediapipe/Runtime/Plugins/Android
      - name: Download macOS libraries
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.packageName }}-macOS-Plugins
          path: Packages/com.github.homuler.mediapipe/Runtime/Plugins
      - name: Download iOS libraries
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.packageName }}-iOS
          path: Packages/com.github.homuler.mediapipe/Runtime/Plugins/iOS
      - name: Download Windows libraries
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.packageName }}-Windows-Plugins
          path: Packages/com.github.homuler.mediapipe/Runtime/Plugins

      - name: Zip all
        run: |
          zip -r MediaPipeUnityPlugin-all.zip . -x .git/**\*

      - name: Upload MediaPipeUnityPlugin-all.zip
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.packageName }}-src-all
          path: |
            MediaPipeUnityPlugin-all.zip
          retention-days: 7

      # avoid "No space left on device" error
      - name: Remove uploaded files to free up space
        run: |
          rm MediaPipeUnityPlugin-all.zip

      # NOTE: this step will overwrite AppSettings.asset
      - name: Export unitypackage
        if: ${{ env.BUILD_UNITYPACKAGE == '1' }}
        run: |
          unity-editor -quit -batchmode -nographics -silent-crashes -logFile -projectPath . -executeMethod PackageExporter.Export

      - name: Upload the unitypackage
        if: ${{ env.BUILD_UNITYPACKAGE == '1' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.packageName }}-unitypackage
          path: |
            *.unitypackage
          retention-days: 7

      - name: Export tarball
        run: |
          cd Packages/com.github.homuler.mediapipe
          npm pack
          mv com.github.homuler.mediapipe-*.tgz ../..

      - name: Upload the tarball package
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.packageName }}-tarball
          path: |
            com.github.homuler.mediapipe-*.tgz
          retention-days: 7

  clean:
    runs-on: ubuntu-latest
    needs:
      - package
    steps:
      - uses: geekyeggo/delete-artifact@v4
        with:
          name: ${{ inputs.packageName }}-base
          failOnError: false

      - uses: geekyeggo/delete-artifact@v4
        with:
          name: ${{ inputs.packageName }}-Android
          failOnError: false

      - uses: geekyeggo/delete-artifact@v4
        with:
          name: ${{ inputs.packageName }}-macOS-Plugins
          failOnError: false

      - uses: geekyeggo/delete-artifact@v4
        with:
          name: ${{ inputs.packageName }}-iOS
          failOnError: false

      - uses: geekyeggo/delete-artifact@v4
        with:
          name: ${{ inputs.packageName }}-Windows-Plugins
          failOnError: false
