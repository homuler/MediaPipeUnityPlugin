diff --git a/bazel/glog.bzl b/bazel/glog.bzl
index a46e2d1..f9f9a03 100644
--- a/bazel/glog.bzl
+++ b/bazel/glog.bzl
@@ -107,12 +107,12 @@ def glog_library(namespace = "google", with_gflags = 1, **kwargs):
             "src/utilities.h",
             "src/vlog_is_on.cc",
         ] + select({
-            "@bazel_tools//src/conditions:windows": windows_only_srcs,
+            "@com_google_mediapipe//mediapipe:windows": windows_only_srcs,
             "//conditions:default": [":config_h"],
         }),
         copts =
             select({
-                "@bazel_tools//src/conditions:windows": common_copts + windows_only_copts,
+                "@com_google_mediapipe//mediapipe:windows": common_copts + windows_only_copts,
                 "@bazel_tools//src/conditions:darwin": common_copts + linux_or_darwin_copts + darwin_only_copts,
                 "@bazel_tools//src/conditions:freebsd": common_copts + linux_or_darwin_copts + freebsd_only_copts,
                 ":wasm": common_copts + wasm_copts,
@@ -128,7 +128,7 @@ def glog_library(namespace = "google", with_gflags = 1, **kwargs):
     native.cc_library(
         name = "glog_headers",
         deps = select({
-            "@bazel_tools//src/conditions:windows": [":windows_glog_headers"],
+            "@com_google_mediapipe//mediapipe:windows": [":windows_glog_headers"],
             "//conditions:default": [":default_glog_headers"],
         }),
     )
diff --git a/src/logging.cc b/src/logging.cc
index ddcf910..c7e7578 100644
--- a/src/logging.cc
+++ b/src/logging.cc
@@ -73,6 +73,10 @@
 # include "stacktrace.h"
 #endif
 
+#ifdef __ANDROID__
+#include <android/log.h>
+#endif
+
 using std::string;
 using std::vector;
 using std::setw;
@@ -1485,6 +1489,23 @@ ostream& LogMessage::stream() {
   return data_->stream_;
 }
 
+namespace {
+#if defined(__ANDROID__)
+int AndroidLogLevel(const int severity) {
+  switch (severity) {
+    case 3:
+      return ANDROID_LOG_FATAL;
+    case 2:
+      return ANDROID_LOG_ERROR;
+    case 1:
+      return ANDROID_LOG_WARN;
+    default:
+      return ANDROID_LOG_INFO;
+  }
+}
+#endif  // defined(__ANDROID__)
+}  // namespace
+
 // Flush buffered message, called by the destructor, or any other function
 // that needs to synchronize the log.
 void LogMessage::Flush() {
@@ -1519,6 +1540,12 @@ void LogMessage::Flush() {
   }
   LogDestination::WaitForSinks(data_);
 
+#if defined(__ANDROID__)
+  const int level = AndroidLogLevel((int)data_->severity_);
+  const std::string text = std::string(data_->message_text_);
+  __android_log_write(level, "native", text.substr(0,data_->num_chars_to_log_).c_str());
+#endif  // defined(__ANDROID__)
+
   if (append_newline) {
     // Fix the ostrstream back how it was before we screwed with it.
     // It's 99.44% certain that we don't need to worry about doing this.
